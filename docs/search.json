[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The #TidyTuesday Cookbook",
    "section": "",
    "text": "Preface\n\n\n\n\n\n\nWelcome to the online version of The #TidyTuesday Cookbook by Nicola Rennie.\nThis book is currently a work-in-progress.\n\n\n\n#TidyTuesday is a weekly social data project which aims to make learning to work with data easier, by providing real-world datasets. Participants are encouraged to explore the data shared via GitHub each week, create an output such as a data visualization, and share their output alongside their code, with the community.\nAfter three years of weekly contributions, I’ve worked with around 150 datasets and created over 150 data visualizations. This book will present a subset of these visualizations, and describe the process used to create them. Each chapter will cover a different data visualization, showing: the data exploration process; the choice of data visualization type; the initial design ideas with hand-drawn sketches; the first build of a plot; and the iterative process of styling plots.\n\n\n\n\nComin, D., and Hohijn B. 2004. “Cross-Country Technological Adoption: Making the Theories Face the Facts.” Journal of Monetary Economics January 2004: 39–83.\n\n\ncontributors, PLDB. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for r. https://doi.org/10.5281/zenodo.4679423.\n\n\nHughes, Ellis. 2022a. Camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. Paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People, 2019.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. Patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. Sysfonts: Loading Fonts into r. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. Showtext: Using Fonts More Easily in r Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. Ggtext: Improved Text Rendering Support for ’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nYutani, Hiroaki. 2023. Gghighlight: Highlight Lines and Points in ’Ggplot2’. https://CRAN.R-project.org/package=gghighlight.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "author.html",
    "href": "author.html",
    "title": "Author",
    "section": "",
    "text": "Nicola Rennie is a Lecturer in Health Data Science within the Centre for Health Informatics, Computing, and Statistics at Lancaster University. She holds a PhD in Statistics and Operational Research, focusing on analysing and visualising transport demand. Her current research is focused on applications of statistics and machine learning to health-related data, communicating statistics, and the effective teaching of data science. She has experience of teaching at both undergraduate and postgraduate level, in courses covering fundamentals of data science, population health, and statistical programming. Nicola has also previously worked in data science consultancy, and delivered training courses covering topics including advanced data visualisation with R, statistical modelling, and reproducible reporting. She is the author and maintainer of several R packages, including multiple {ggplot2} extension packages. Nicola is a regular speaker at R and data science meetups, and is the current chapter organiser of R-Ladies Lancaster. She is co-author of the Royal Statistical Society’s Best Practices for Data Visualisation Guide, and an active member of the Royal Statistical Society. Several of her data visualisations have been long-listed at the Information is Beautiful Awards.\n\n\n\n\nComin, D., and Hohijn B. 2004. “Cross-Country Technological Adoption: Making the Theories Face the Facts.” Journal of Monetary Economics January 2004: 39–83.\n\n\ncontributors, PLDB. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for r. https://doi.org/10.5281/zenodo.4679423.\n\n\nHughes, Ellis. 2022a. Camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. Paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People, 2019.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. Patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. Sysfonts: Loading Fonts into r. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. Showtext: Using Fonts More Easily in r Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. Ggtext: Improved Text Rendering Support for ’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nYutani, Hiroaki. 2023. Gghighlight: Highlight Lines and Points in ’Ggplot2’. https://CRAN.R-project.org/package=gghighlight.",
    "crumbs": [
      "Author"
    ]
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 Why visualize data?\nData visualization can be a very effective and efficient means of communicating information. Visualizing your data typically serves one of two purposes: (i) as part of exploratory analysis to help uncover discrepancies in data and identify interesting relationships to measure; or (ii) to communicate key insights and messages to a broader audience. The case-study nature of this book means that we’ll talk about both of these aspects, though we ’ll focus mostly on the second.\nChoosing an appropriate type of visualization and making careful choice about design can clarify the message you are trying to convey to a reader. That does not necessarily mean that every chart must follow a set of rules and stick to a rigid format. Instead, data visualization is a blend of science and creativity - many of the key landmark data visualizations held up as excellent examples don’t fit into the standard categories of bar charts, scatter plots, or line graphs.\nThat being said, the visualizations in this book are not necessarily always the most effective choice of visualization for the data and relationship shown. Rather, this book aims to show you examples of the end-to-end process of creating data visualizations, with a focus on the technical details of building them in R. You’ll see some hacky solutions and unusual ideas that you can use to transform your data visualizations.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "introduction.html#background-knowledge",
    "href": "introduction.html#background-knowledge",
    "title": "1  Introduction",
    "section": "1.2 Background knowledge",
    "text": "1.2 Background knowledge\nThis book is primarily aimed at those who wish to develop their data visualization skills in R. Readers of this book may find a basic knowledge of R, more specifically of the {tidyverse} ecosystem, useful though all code used in examples is fully explained. Readers do not need to be experienced in {ggplot2}, though this book will also be of interest to those who are. Readers of this book will be of interest to those who are already familiar with R (including {ggplot2}), and wish to develop their skills in designing data visualizations further. It will also be of interest to those who already design data visualizations using other tools, and want to learn how to do the equivalent in R.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "introduction.html#a-note-about-r-code",
    "href": "introduction.html#a-note-about-r-code",
    "title": "1  Introduction",
    "section": "1.3 A note about R code",
    "text": "1.3 A note about R code\nIn R, the pipe operator takes the thing on its left and passes it along to the function on its right (Wickham, Çetinkaya-Rundel, and Grolemund 2023). You can find a full description of the pipe operator in R for Data Science. The pipe (%&gt;%) was first introduced to R via the {magrittr} package. Since version 4.1.0 of R, a version of the pipe (|&gt;) has existed in base R. The base R version of the pipe is used throughout the book. Although there are some difference between the two version of the pipe, in this book, they can be used interchangeably.\nNamespacing (the pre-fixing of functions with the package name and ::) is used for all packages except {ggplot2} and base R packages. Namespacing is useful for two reasons (i) from a learning perspective, it makes it easier to recognise where functions come from and how they connect together, and (ii) from a programming perspective, it reduces conflicts and errors - something we all want less of!\nYou may notice that some of the final images differ slightly from those initially created and published on social media. You might also find some small differences in the code used to produce them if you compare the contents of this book to original scripts in the GitHub repository. These differences are likely due to one of four reasons:\n\npackages have since been updated and code has been changed to use newer syntax. Many of the code changes relate to changes in {ggplot2} version 3.5.0;\nsome aspects have been omitted from a visualization to avoid explaining everything in Chapter 1 - but those aspects are all covered and linked to in later chapters;\nafter many years of practice, there may be more efficient ways of re-writing code from some of the earlier plots. Any changes are clearly labelled and discussed;\nsome images may be different due to copyright reasons.\n\nAll software requirements, including a complete list of package versions, can be found in the Appendix.\n\n\n\n\nComin, D., and Hohijn B. 2004. “Cross-Country Technological Adoption: Making the Theories Face the Facts.” Journal of Monetary Economics January 2004: 39–83.\n\n\ncontributors, PLDB. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for r. https://doi.org/10.5281/zenodo.4679423.\n\n\nHughes, Ellis. 2022a. Camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. Paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People, 2019.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. Patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. Sysfonts: Loading Fonts into r. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. Showtext: Using Fonts More Easily in r Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. Ggtext: Improved Text Rendering Support for ’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nYutani, Hiroaki. 2023. Gghighlight: Highlight Lines and Points in ’Ggplot2’. https://CRAN.R-project.org/package=gghighlight.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "common-charts.html",
    "href": "common-charts.html",
    "title": "Common charts don’t need to be boring!",
    "section": "",
    "text": "Comin, D., and Hohijn B. 2004. “Cross-Country Technological Adoption: Making the Theories Face the Facts.” Journal of Monetary Economics January 2004: 39–83.\n\n\ncontributors, PLDB. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for r. https://doi.org/10.5281/zenodo.4679423.\n\n\nHughes, Ellis. 2022a. Camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. Paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People, 2019.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. Patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. Sysfonts: Loading Fonts into r. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. Showtext: Using Fonts More Easily in r Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. Ggtext: Improved Text Rendering Support for ’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nYutani, Hiroaki. 2023. Gghighlight: Highlight Lines and Points in ’Ggplot2’. https://CRAN.R-project.org/package=gghighlight.",
    "crumbs": [
      "Common charts don't need to be boring!"
    ]
  },
  {
    "objectID": "uk-museums.html",
    "href": "uk-museums.html",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "",
    "text": "2.1 Data\nThe Mapping Museums project (Mapping Museums 2021) has collected data relating to over 4,000 museums in the UK, covering museums from 1960 onward. The data can be downloaded from the Mapping Museums website at www.mappingmuseums.org. It was also used as a #TidyTuesday (R4DS Online Learning Community 2023) data set in November 2022, and we’ll use that version for this chapter.\nLet’s start by reading in the data and looking at the definitions of the variables:\nmuseums &lt;- readr::read_csv(\"data/museums.csv\")\nThe data contains information for 35 different variables on 4191 museums. After the first museum_id columns, the next 8 columns provide information on the location of the museum - including address and co-ordinates. The next set of columns provides information about the museums such as whether it’s an accredited museum, how it’s governed, what types of items it has, and when it was open. Since this is a collated data set, information is also provided on the original source of the data for some of these variables. The remaining columns provide information on the area in which the museum is located, including information about different deprivation indices and geodemogrqaphic group (type of area e.g. \"University Towns and Cities\"). A full glossary of the terms used can be found on the Mapping Museums website at museweb.dcs.bbk.ac.uk/glossary.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "uk-museums.html#exploratory-work",
    "href": "uk-museums.html#exploratory-work",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "\n2.2 Exploratory work",
    "text": "2.2 Exploratory work\nLet’s start exploring what these variables look like!\n\n\n\n\n\n\nRemember that you can use View(museums) to inspect the data in a more human-readable format.\n\n\n\n\n2.2.1 Data exploration\nThere are many different aspects of this data we could inspect:\n\nHow are museums spread out across the UK? Is there a higher concentration of museums in more affluent areas?\nWhat types of museums are most prevalent in the UK? Does the vary based on whether the museum is accredited?\nHow is the number of museums open changing over time? Are more museums opening than closing?\n\nSome of the variables, such as DOMUS_Subject_Matter have quite a lot of missing values which makes\nAlthough these definitely warrant further exploration,\nGiven the wealth of information around deprivation indices (8 different variables), that’s the first aspect of the data that jumps out. How does the number of museums vary per index of deprivation?\n\nbarplot(\n  table(museums$Area_Deprivation_index),\n  cex.axis = 0.5,\n  cex.names = 0.5\n)\n\n\n\n\n\n\nFigure 2.1: Bar chart of number of museums per level of deprivation, with higher numbers of museums shown in levels 5 and 6.\n\n\n\n\nHere, 1 is the most deprived, and 10 is the least deprived. This is quite an interesting relationship - there have been more museums in places with a moderate level of deprivation compared to higher or lower level. This might feel a little bit counter-intuitive, we might expect there to be more museums in more affluent areas. But looking at the total number of museums in the data per index of deprivation doesn’t tell us the whole story. How many of these museums were open at once? How many are still open today?\nTo get a better understanding of the relationship between deprivation and the number of museums, we could look at how the number of museums changed for each index of deprivation has changed since 1960 (the earliest date in the data set). Then we might be able to tell whether more are opening or closing, and how this varies across the different levels of deprivation.\n\n2.2.2 Exploratory sketches\nWe have 10 deciles of deprivation, so we’ll have 10 time series that we want to plot that show the number of museums over time. There are different options for plotting time series like this. We need to think about some different choices:\n\nWhat type of geometry will we use? Lines, points, shaded areas? Lines are the most common approach for\nDo we plot all 10 lines on the same chart and use color to denote the different levels of deprivation?\nOr do we use faceting to split it into multiple smaller plots by deprivation index?\n\nIf we go with line charts, and faceting by deprivation index, that might look something like this:\n\n\n\n\n\nFigure 2.2: Initial sketch of a faceted line chart showing change over time for each level of deprivation.\n\n\nWe could achieve something this type of plot using geom_line() and facet_wrap() from {ggplot2} . We’ve talked about faceting before in both Chapter …(1) and Chapter …(2) but we haven’t really thought much about the layouts of those facets. In Chapter …(1), we used faceting with only 3 categories, where the layout choice is fairly obvious: either one column or one row. In Chapter …(2), we used facet_grid() where the number of levels in two factor variables define the number of rows and columns. Here, we have a little bit more flexibility and we might want to think about controlling that layout. \nIf we leave it to the default options, {ggplot2} usually tries to coerce it into something square-ish. Here, it would likely give us a 3x4 grid filled with 10 plots (for the 10 levels of deprivation) and 2 blank spaces. It’s not always possible, but plots without those blank spaces often look a lot cleaner and tidier. We could do either a 5x2 (or 2x5) grid, or a 10x1 (or 1x10) grid to fit our small multiple plots into a perfect rectangle. A 5x2 grid works better here since we don’t want to make a very wide but very short plot.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "uk-museums.html#preparing-a-plot",
    "href": "uk-museums.html#preparing-a-plot",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "\n2.3 Preparing a plot",
    "text": "2.3 Preparing a plot\nSo let’s get started on preparing the data to create this plot!\n\n2.3.1 Data wrangling\nThis is one of those very real datasets - the data wrangling is not straightforward for the data. In fact, the two columns relating to opening and closing dates are the two that will require the most attention.\nFirst, let’s drop any columns that we don’t actually need using the select() function from {dplyr} - we only need the Year_opened, Year_closed, and Area_Deprivation_index columns to calculate the number of museums open each year . There are a few NA values in the Area_Deprivation_index column so we’ll drop those rows using drop_na() from {tidyr} .\nNow let’s start dealing with the year columns. If you look at the values, you’ll notice that they’re not exactly what you’d expect in a year column:\n\nhead(museums$Year_opened, 4)\n\n[1] \"2012:2012\" \"1971:1971\" \"1984:1984\" \"1971:1971\"\n\nhead(museums$Year_closed, 4)\n\n[1] \"9999:9999\" \"2007:2017\" \"9999:9999\" \"2012:2012\"\n\n\nEach entry is in fact two years, separated by a :. According to the Mapping Museums glossary, this is because these are actually date ranges. For some museums, it wasn’t possible to establish an exact opening or closing date, and instead a date range is given based on partial information. For example, a value of \"2007:2017\" means the museum opened (or closed) sometime between 2007 and 2017.\nLet’s separate out these year values into four columns instead of two using the separate() function from {tidyr} . We separate based on the :, and create two new columns, opened1 and opened2. from the Year_opened column. We do the same thing for the Year_closed closed column. We also want to make sure that these new columns are numeric rather than character columns, so we use mutate() and across() from {dplyr} to convert them using as.numeric() . We can also convert the Area_Deprivation_index to a factor rather than a numeric and make sure the order is correct.\n\nmuseum_subset &lt;- museums |&gt;\n  dplyr::select(\n    Year_opened, Year_closed, Area_Deprivation_index\n  ) |&gt;\n  tidyr::drop_na() |&gt;\n  tidyr::separate(\n    Year_opened,\n    into = c(\"opened1\", \"opened2\"),\n    sep = \":\"\n  ) |&gt;\n  tidyr::separate(\n    Year_closed,\n    into = c(\"closed1\", \"closed2\"),\n    sep = \":\"\n  ) |&gt;\n  dplyr::mutate(\n    dplyr::across(\n      c(opened1, opened2, closed1, closed2), as.numeric\n    ),\n    Area_Deprivation_index = factor(Area_Deprivation_index, levels = 1:10)\n  )\n\n\n\n\n\n\n\nYou could alternatively use separate_wider_delim() instead of separate(). \n\n\n\nNow we need to think about how to deal with all of these year columns:\n\nIf the date before the : and the date after the : are the same, we want to treat it as an exact year and only keep one value.\nIf the dates do not match, we need to decide a way of choosing which year to use. The simplest approach is to take the midpoint of the date range.\nIf the value in the Year_closed column is \"9999:9999\", this means that the museum is still open.\n\nLet’s start with the last of these issues first. For the closed1 and closed2 columns, if the value is \"9999\", we’ll convert it to an NA_real_ value and otherwise leave it as it is. We can do this using a combination of mutate(), across(), and if_else() from {dplyr} .\nThe remaining two issues can be dealt with at the same time using case_when() from {dplyr} . We can create a new column called closed which:\n\nif closed1 and closed2 are equal, takes this value;\nif closed1 and closed2 are not equal, takes the value in the middle (rounded so that we work only with whole year values).\n\nThe same approach is then applied to create another new column called opened. There are no instances in the data where one of the closing dates is NA but the other is not, so we don’t need to worry about that. We can also tidy up the output by dropping any columns we don’t need, renaming the Area_Deprivation_index to something a little bit shorter and easier to work with, and arranging the data by level of deprivation. \n\nmuseum_data &lt;- museum_subset |&gt;\n  dplyr::mutate(dplyr::across(\n    c(closed1, closed2),\n    ~ dplyr::if_else(.x == 9999, NA_real_, .x)\n  )) |&gt;\n  dplyr::mutate(closed = dplyr::case_when(\n    closed1 == closed2 ~ closed1,\n    closed1 != closed2 ~ round((closed2 + closed1) / 2)\n  )) |&gt;\n  dplyr::mutate(opened = dplyr::case_when(\n    opened1 == opened2 ~ opened1,\n    opened1 != opened2 ~ round((opened2 + opened1) / 2)\n  )) |&gt;\n  dplyr::select(Area_Deprivation_index, opened, closed) |&gt;\n  dplyr::rename(deprivation = Area_Deprivation_index) |&gt;\n  dplyr::arrange(deprivation)\n\nThis gives us data that looks like this:\n\nhead(museum_data)\n\n# A tibble: 6 × 3\n  deprivation opened closed\n  &lt;fct&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 1             1988     NA\n2 1             1984   2007\n3 1             1983     NA\n4 1             1969     NA\n5 1             1989     NA\n6 1             1995     NA\n\n\nWhat we want to know is how many museums were open in a given year for each level of deprivation. Let’s create a function that takes three inputs: a year of interest, a level of deprivation, and the museum_data. Inside the function, we can then filter() the data to only the level of deprivation we’re interested in. Then we can count how many museums opened before or in the year we’re interested in, and then same for the how many museums closed (remembering to deal with the NA values for museums that are still open). The difference between the two will be how many were open in that year. \n\nnum_year &lt;- function(year, dep, data = museum_data) {\n  df &lt;- dplyr::filter(data, deprivation == dep)\n  num_open &lt;- sum(df$opened &lt;= year)\n  num_closed &lt;- sum(df$closed &lt;= year, na.rm = TRUE)\n  diff &lt;- num_open - num_closed\n  return(diff)\n}\n\nLet’s test it works:\n\nnum_year(1980, 3)\n\n[1] 186\n\n\nThere were 186 museums open in 1980. Now, we need to run this function for every combination of year (from 1960 to 2021) and deprivation level (from 1 to 10). There are many different ways of doing this in R, and we’re going to use the {purrr} package (Wickham and Henry 2023). We start by creating to variables with sequences of years and levels of deprivation - this is useful for testing if the code works because we can easily change it to a smaller number of years. Then we use expand.grid to create a data.frame with all of the combinations and pass this in as the first argument to pmap_vec from {purrr}. The second argument to pmap_vec is the function we want to apply (num_year()) that we defined above), where the first argument of num_year() comes from the first column of the grid of values, and the second argument from the second column. We can then convert the output into a matrix where each column is a level of deprivation, and each row is a year. \n\nall_years &lt;- 1960:2021\ndeps &lt;- 1:10\noutput &lt;- purrr::pmap_vec(\n  expand.grid(all_years, deps),\n  ~ num_year(year = .x, dep = .y)\n)\nresults &lt;- matrix(output,\n  nrow = length(all_years),\n  byrow = FALSE\n)\ncolnames(results) &lt;- 1:10\n\nNow, our data looks like this:\n\nhead(results)\n\n       1  2   3   4   5   6   7   8  9 10\n[1,] 103 78 110 125 125 124 122 110 76 51\n[2,] 103 78 112 132 125 131 126 113 77 53\n[3,] 104 78 113 138 129 135 129 117 83 58\n[4,] 105 79 118 140 136 140 130 123 85 60\n[5,] 105 79 122 144 139 145 135 126 86 64\n[6,] 106 80 123 148 143 147 137 128 89 67\n\n\nWe’re almost ready to start plotting our data! We just need to convert this into a tibble() (or data.frame), add the year column using mutate(), and put the data into a long format using pivot_longer from {tidyr} . We want to end up with a 3 column data set, where the 3 columns are: year, deprivation, and museums (number of open museums).\n\nplot_data &lt;- results |&gt;\n  tibble::as_tibble() |&gt;\n  dplyr::mutate(year = all_years) |&gt;\n  tidyr::pivot_longer(\n    -year,\n    names_to = \"deprivation\",\n    values_to = \"museums\"\n  ) |&gt;\n  dplyr::mutate(\n    deprivation = factor(deprivation, levels = 1:10)\n  )\n\n\n2.3.2 The first plot\nOne of most common approaches to visualising multiple time series, is to plot multiple lines on the same plot. Although we’re already thinking about facets, it’s still worth seeing what those line charts look like. It can help us to understand the overall variability of the data. We can create the initial plot using ggplot() to define the data and the aesthetic mapping with the aes() function. We have year on the x-axis, museums on the y-axis, and each line will have a different color based on deprivation. The actual lines are then added with geom_line(). \n\nlibrary(ggplot2)\nggplot(\n  data = plot_data,\n  mapping = aes(x = year, y = museums, color = deprivation)\n) +\n  geom_line()\n\n\n\n\n\n\nFigure 2.3: A line chart of total number of museums open per year for each level of deprivation, with the overlapping lines resembling spaghetti!\n\n\n\n\nThere are a few things that jump out immediately about this plot:\n\nThe variability is increasing over time: in 1960 the gap between the highest and lowest values is much smaller than the gap between the highest and lowest values in 2020.\nIt’s difficult to tell which line belongs to which level of deprivation: some of the colors are quite similar, many of the lines intersect, and the order of the legend is generally in reverse to the order of the lines.\nIt’s what we might call a spaghetti plot: it shows the overall trend across all levels, but it’s hard to tell the difference between different levels of deprivation.\n\nLet’s go back to our previous idea, and try separating out the deprivation levels into different facets. We can do this using facet_wrap(~deprivation, nrow = 2) , with the nrow argument used to create that 5x2 grid we talked about earlier. Let’s also try changing geom_line() to geom_area(). Although line charts and area charts can both show the same data, line charts often cause us to focus more on the trend over time. In contrast, area charts often cause us to focus on the total volume over time - helping to highlight differences in total number of open museums over time rather than just increases and decreases. Remember to also change color to fill in the aesthetic mapping! \n\nggplot(\n  data = plot_data,\n  mapping = aes(x = year, y = museums, fill = deprivation)\n) +\n  geom_area() +\n  facet_wrap(~deprivation, nrow = 2)\n\n\n\n\n\n\nFigure 2.4: An area chart of total number of museums open per year for each level of deprivation, with the each deprivation level in a different facet.\n\n\n\n\nThis tells a similar story to the initial bar chart in Figure 2.1 - there are more museums open in the areas with moderate levels of deprivation. This plot still isn’t ideal, for a couple of reasons:\n\nThe number of open museums in 1960 is different in each faceted plot: since they all start at different levels, it makes it more difficult to compare the relative increases or decreases.\nIt’s hard to directly compare one facet to another since each facet only contains one trend line: we have to imagine overlaying the lines in our head to compare one trend line to another.\n\nWe could solve these problems by making two changes:\n\nRescale the data based on the number of museums open in 1960; and\nShow all 10 lines on each faceted plot but highlight only one relating to each level of deprivation.\n\n2.3.3 Highlighting with {gghighlight}\nThe second change can be implemented easily using the {gghighlight} package (Yutani 2023). {gghighlight} is a {ggplot2} extension package, specifically designed for highlighting points and lines based on some conditions. Let’s switch back to geom_line() and add gghighlight::gghighlight(). We set use_direct_label = FALSE because {gghighlight} will otherwise add a label to each highlighted line - unnecessary since each line is labelled by it’s facet label already. \n\nggplot(\n  data = plot_data,\n  mapping = aes(x = year, y = museums, color = deprivation)\n) +\n  geom_line() +\n  facet_wrap(~deprivation, nrow = 2) +\n  gghighlight::gghighlight(use_direct_label = FALSE)\n\n\n\n\n\n\nFigure 2.5: A line chart of total number of museums open per year for each level of deprivation, with the each deprivation level in a different facet and individual lines highlighted.\n\n\n\n\nWe can also perform an additional bit of data wrangling to rescale the values by their 1960 levels. We start by filtering the data to only include data from the year 1960 and keeping only the deprivation and museums columns . Then, we join this baseline data back to our original data based on the deprivation level, and for each year calculate the percentage change since 1960 and save it in a new column called change. \n\nlookup &lt;- plot_data |&gt;\n  dplyr::filter(year == 1960) |&gt;\n  dplyr::select(deprivation, museums)\n\nnew_plot_data &lt;- plot_data |&gt;\n  dplyr::left_join(lookup, by = \"deprivation\") |&gt;\n  dplyr::rename(\n    museums = museums.x,\n    museums_1960 = museums.y\n  ) |&gt;\n  dplyr::mutate(\n    change = (100 * (museums - museums_1960) / museums_1960)\n  ) |&gt;\n  dplyr::select(year, deprivation, change)\n\nWe can then re-do our line chart using the rescaled change data on the y-axis instead:\n\nbase_plot &lt;- ggplot(\n  data = new_plot_data,\n  mapping = aes(x = year, y = change, color = deprivation)\n) +\n  geom_line() +\n  facet_wrap(~deprivation, nrow = 2) +\n  gghighlight::gghighlight(use_direct_label = FALSE)\nbase_plot\n\n\n\n\n\n\nFigure 2.6: A line chart of percentage increase in museums (compared to 1960) for each level of deprivation, with the each deprivation level in a different facet and individual lines highlighted.\n\n\n\n\nThis is starting to look promising, but there are still ways that we can style our chart to improve it.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "uk-museums.html#advanced-styling",
    "href": "uk-museums.html#advanced-styling",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "\n2.4 Advanced styling",
    "text": "2.4 Advanced styling\nSo what can we do to make this chart better?\n\nWe can get rid of the legend. The colors are based on the levels of deprivation, which are already labelled on the facet titles.\nThe default choice of color isn’t great - they’re not grayscale printing friendly, and their not colorblind friendly either.\nIt’s not immediately clear what this chart shows: it could do with smoe text to explain what’s going on.\n\n\n2.4.1 Colors\nLet’s get started with choosing some colors. As discussed in Chapter …(1), we’ll save color codes as variables: either using hex codes or color names. Let’s use \"black\" for text, and \"#fafafa\" for the background color. The use of a light gray rather than white for the background is primarily personal preference - it’s less glaringly bright on a screen. Although, you do have to be a bit more careful around contrast of text against the background - hence the black text.\n\nbg_col &lt;- \"#fafafa\"\ntext_col &lt;- \"black\"\n\nFor the colors of the lines, we can use the {viridis} package (Garnier et al. 2024). The {viridis} package provides multiple different color palettes which are designed to be visually pleasing, perceptually-uniform ,and colorblind friendly. The default viridis palette includes purples, blues, greens, then yellows. Viridis color palettes are most commonly used with continuous data, rather than categorical data. However, since the categories that we wish to color (levels of deprivation) are ordered, they will work well here too. The {viridis} package includes functions to add the colors to plots made with {ggplot2}. Here, we use the scale_color_viridis() function, specify that we want a discrete palette and that the lowest values should have the yellow colors with direction = -1 .\n\ncol_plot &lt;- base_plot +\n  viridis::scale_color_viridis(discrete = TRUE, direction = -1)\ncol_plot\n\n\n\n\n\n\nFigure 2.7: An updated version of the previous chart with colors chosen from the {viridis} R package.\n\n\n\n\n\n2.4.2 Text and fonts\nLet’s start by loading in a different font using font_add_google() from {sysfonts} and setting font options with {showtext} . The Raleway font is a minimalist, sans serif font, and we’ll use it for both body text and title text. We can save it as a single variable, body_font.\n\nsysfonts::font_add_google(\"Raleway\", \"raleway\")\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font &lt;- \"raleway\"\n\nWe also need to define a title, subtitle, and caption. Adding a question as a title can help guide readers towards what you want them to see, but also force them to look for themselves. Here, we ask Are there fewer museums opening in more deprived areas? in the title - telling readers to look at changes across the levels of deprivation, but not giving them the answer straight away.\nThe subtitle then goes onto explain what the answer is, and exactly what is shown in the chart. The caption is more extended here than you may see in many charts because it explains more about the source of the data and what the variables actually are. Understanding definitions of variables isn’t something we should ever take for granted. Unless you are already familiar with indices of deprivation, it may not be clear that 1 means higher levels of deprivation.\n\ntitle &lt;- \"Are there fewer museums opening in more deprived areas?\"\nst &lt;- \"The change in the estimated number of open museums since 1960 is significantly lower in areas with higher levels of deprivation. *Since around 2000, the number of open museums has stagnated across all areas, regardless of deprivation index. However, the rate of growth prior to this stagnation is lower in more deprived areas.\"\ncap &lt;- \"*The Index of Multiple Deprivation (IMD) measures the relative deprivation of geographic areas in the UK, aggregating different dimensions (income, employment, education, health, crime, housing, and living environment). The index ranges from 1 (most deprived) to 10 (least deprived).&lt;br&gt;&lt;br&gt;**In some instances it has been impossible to establish an exact opening or closing date for a museum. In these cases, museums’ opening and closing dates are taken to be the mid point of a specified range of possible dates.&lt;br&gt;&lt;br&gt;N. Rennie | Data: museweb.dcs.bbk.ac.uk\"\n\n\n\n\n\n\n\nThe caption includes HTML line breaks, &lt;br&gt;, since we’ll be using element_textbox_simple() from {ggtext} for processing the text elements as we’ve done in previous chapters. \n\n\n\nLet’s add the title, subtitle, caption, and a y-axis label in using the labs() function. We can also remove the default column name label on the x-axis as it’s very clear that the x-axis shows years. \n\ntext_plot &lt;- col_plot +\n  labs(\n    title = title, subtitle = st, caption = cap,\n    x = \"\",\n    y = \"% change in estimated number of\\nopen museums since 1960**\"\n  )\n\n\n2.4.3 Adjusting themes\nNow we need to edit the theme() elements to apply the text fonts and styles, edit the background colors, and remove the legend. \nIn {ggplot2}, the axis limits are chosen automatically based on the range of the data. It’s often useful to chose limits (and breaks) that are nice - it makes it easier to calculate where other values are. We can set scale_y_continuous(limits = c(0, 300)) to make the range of the y-axis between 0 and 300. We can also set coord_cartesian(expand = FALSE) to remove the extra space around the plot area that is added by default - giving a slightly cleaner look. Using theme_minimal() as a base, we can set the default font size and family using base_size = 7 and base_family = body_font. \nSetting legend.position = \"none\" removes the legend on the right hand side. The plot.title.position = \"plot\" and plot.caption.position = \"plot\" arguments make sure that the title, subtitle, and caption text are all aligned with the left side of the plot area. The default is to align with the edge of the panel area (the area shaded grey by default), which doesn’t look good when you have long axis labels, or a multi-line axis title on the y-axis.\nThe panel.spacing argument controls how close the facets are to each other - this can help to stop the year labels on side-by-side plots from overlapping. Setting plot.margin = margin(10, 15, 10, 10) adds some extra space around the outside of the plot, with the higher value on the right hand side compensating and balancing out the space from the axis title on the left hand side. The plot.background and panel.background arguments set the background color of the plot and panel areas to be the bg_col variable previously defined.\nFor the plot.title, plot.subtitle, and plot.caption, arguments, we use element_textbox_simple() from {ggtext} to make sure that any Markdown or HTML syntax is processed, and to automatically wrap the text in the subtitle and caption. The text is all left-aligned, with a lineheight of 0.5, and set to use the text_col variable for the color. The title font is made slightly larger and in bold. The axis.text is also set to be text_col colored with with a lineheight of 0.5 using element_text(). \nNow, we have our final plot:\n\nlibrary(ggtext)\ntext_plot +\n  scale_y_continuous(limits = c(0, 300)) +\n  coord_cartesian(expand = FALSE) +\n  theme_minimal(base_size = 7, base_family = body_font) +\n  theme(\n    legend.position = \"none\",\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    panel.spacing = unit(1, \"lines\"),\n    plot.margin = margin(10, 15, 10, 10),\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    plot.title = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5,\n      size = rel(1.2),\n      face = \"bold\",\n      margin = margin(b = 5)\n    ),\n    plot.subtitle = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5\n    ),\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col,\n      lineheight = 0.5\n    ),\n    axis.text = element_text(\n      color = text_col,\n      lineheight = 0.5\n    )\n  )\n\n\n\n\n\n\nFigure 2.8: A styled version of the previous plot - with a custom font, colored background, and better spacing.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "uk-museums.html#reflection",
    "href": "uk-museums.html#reflection",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "\n2.5 Reflection",
    "text": "2.5 Reflection\nIs there anything that could still be improved about this plot? There are two main elements that jump out:\n\nThe axis text denoting the years only appears on the bottom row of faceted plots. This makes it a little bit tricky to see what’s going on in the first row without first looking at the years in the row below. It’s a fairly minor point, but adding year labels to the top row would just make it easier for a reader.\nWe removed the legend from the plot with the reason that the colors are based on the levels of deprivation, which are already labelled on the facet titles. This same argument could be used to remove the colors altogether. There’s no need to use color here to denote the deprivation levels when the deprivation levels are given by the facet titles. Especially since the yellow color is harder to see against the pale background color. Using a stronger color e.g. red for all highlighted lines, would be better for making the lines stand out, and reduce confusion about what the colors mean.\n\nEach plot created during the process of developing the original version of this visualisation was captured using {camcorder}, and is shown in the gif below. If you’d like to learn more about how {camcorder} can be used in the data visualisation process, see Chapter 5.\n\n\n\n\n\n\n\n\nComin, D., and Hohijn B. 2004. “Cross-Country Technological Adoption: Making the Theories Face the Facts.” Journal of Monetary Economics January 2004: 39–83.\n\n\ncontributors, PLDB. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for r. https://doi.org/10.5281/zenodo.4679423.\n\n\nHughes, Ellis. 2022a. Camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. Paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People, 2019.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. Patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. Sysfonts: Loading Fonts into r. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. Showtext: Using Fonts More Easily in r Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. Ggtext: Improved Text Rendering Support for ’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nYutani, Hiroaki. 2023. Gghighlight: Highlight Lines and Points in ’Ggplot2’. https://CRAN.R-project.org/package=gghighlight.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "spatial.html",
    "href": "spatial.html",
    "title": "Visualising spatial data",
    "section": "",
    "text": "Comin, D., and Hohijn B. 2004. “Cross-Country Technological Adoption: Making the Theories Face the Facts.” Journal of Monetary Economics January 2004: 39–83.\n\n\ncontributors, PLDB. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for r. https://doi.org/10.5281/zenodo.4679423.\n\n\nHughes, Ellis. 2022a. Camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. Paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People, 2019.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. Patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. Sysfonts: Loading Fonts into r. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. Showtext: Using Fonts More Easily in r Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. Ggtext: Improved Text Rendering Support for ’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nYutani, Hiroaki. 2023. Gghighlight: Highlight Lines and Points in ’Ggplot2’. https://CRAN.R-project.org/package=gghighlight.",
    "crumbs": [
      "Visualising spatial data"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html",
    "href": "doctors-ageing-population.html",
    "title": "3  Doctors in an ageing population: making maps with {ggplot2}",
    "section": "",
    "text": "3.1 Data\nThere’s often a Bring Your Own Data week each year of #TidyTuesday (R4DS Online Learning Community 2023), where participants are encouraged to source their own data. Some use their own data - visualising how many times they’ve gone for a run over the past year, or recreating GitHub contributions graphs. Others choose to find and visualise other sources of data. So where do you find publicly available data?\nThere are many open sources of data, covering a wide range of topics, time frames, and regions across the world. Some government organisations have data portals, some compaies have APIs you can access, some academic papers have accompanying data, or the Google dataset search engine (datasetsearch.research.google.com) might also help you to identify data you’re interested in.\nOne fantastic source of data is the Our World in Data website (ourworldindata.org). The aim of Our World in Data, according to their website, is to publish the research and data to make progress against the world’s largest problems. There are datasets on everything from energy and environment, to poverty and education, to name a few. Their website also has many examples of beautiful, effective data visualisations if you’re ever looking for inspiration.\nFor this chapter, we’ll visualise data on Medical doctors per 1,000 people, a dataset which comes from the Our World in Data website (Our World in Data 2019).\ndoctors &lt;- readr::read_csv(\"data/doctors.csv\")",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Doctors in an ageing population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html#exploratory-work",
    "href": "doctors-ageing-population.html#exploratory-work",
    "title": "3  Doctors in an ageing population: making maps with {ggplot2}",
    "section": "\n3.2 Exploratory work",
    "text": "3.2 Exploratory work\nLet’s start by exploring the data to see if there are interesting patterns that can be visualised.\n\n3.2.1 Data exploration\nThe data is reasonably small, containing only 4 columns: entity (denoting the country or a larger region), code (the country code), year (year the data relates to), and Physicians (per 1,000 people). The 4682 rows of data cover 221 different regions (some aggregates of others), with data covering rlength(unique(doctors$year))` years.\n\nhead(doctors)\n\n# A tibble: 6 × 4\n  entity      code   year `Physicians (per 1,000 people)`\n  &lt;chr&gt;       &lt;chr&gt; &lt;dbl&gt;                           &lt;dbl&gt;\n1 Afghanistan AFG    1960                           0.035\n2 Afghanistan AFG    1965                           0.063\n3 Afghanistan AFG    1970                           0.065\n4 Afghanistan AFG    1981                           0.077\n5 Afghanistan AFG    1986                           0.183\n6 Afghanistan AFG    1987                           0.179\n\n\nOften when there’s a time component to data, one of the most obvious patterns to consider is how other variables change over time. Although line charts are probably most common for visualising time series data, a simple scatter plot can also indicate if there’s a general trend in the data. Sometimes scatter plots also look cleaner than line charts - a line for each region in this chart would very much look like a spaghetti chart as discussed in Chapter 2.\n\nplot(\n  x = doctors$year,\n  y = doctors$`Physicians (per 1,000 people)`,\n  xlab = \"Year\", ylab = \"Physicians per 1,000 people\")\n\n\n\n\n\n\nFigure 3.1: Simple non-styled scatterplot of number of physicians per 1,000 people over time showing an increasing trend, created in base R.\n\n\n\n\nThere seems to be a general increasing trend between 1960 and 2019. The other important component of this data that we may want to explore is the spatial aspect - is there a pattern over space as well as over time? The most common approach to visualising spatial data is, of course, to plot it on a map. If the aim is to show how a variable changes across different countries (or other defined regions), it’s very common to color the country based on the value of the variable. These are often termed choropleth maps.\n\n3.2.2 Exploratory sketches\n\n\n\n\n\nFigure 3.2: Initial sketch of a map of the world, showing title enclosed in a box and legend positioned horizontally in the bottom right\n\n\nAt this point, it’s also often a good time to start thinking about the orientation and aspect ratio of the plot you’ll create. This will depend a lot of where the plot is going to end up - for example, plots in a single column academic article will typically be landscape graphs. The choice of orientation and aspect ratio can also affect how clearly your data is displayed - choosing a very wide plot for time series data can stretch the series and obliterate any appearance of trend. With maps, you’re a little bit more constrained because there is already an underlying aspect ratio in the plot you’re creating. For this map, a landscape orientation with a 6x4 aspect ratio should work reasonably well.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Doctors in an ageing population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html#preparing-a-plot",
    "href": "doctors-ageing-population.html#preparing-a-plot",
    "title": "3  Doctors in an ageing population: making maps with {ggplot2}",
    "section": "\n3.3 Preparing a plot",
    "text": "3.3 Preparing a plot\nTo create the map sketched out in Figure 3.2, we need to do two things (i) decide which data to plot: which regions, and which years; and (ii) source some spatial data beyond just region names and country codes.\n\n3.3.1 Data wrangling\nSince this data is already fairly tidy, there isn’t too much data wrangling to be done. The only processing we really need to do is getting rid of the data we don’t need, and renaming a couple of columns to make them easier to work with. We can use the rename() function from {dplyr} to rename the entity column to region (for reasons that will become clear in the next paragraph!). We also rename the Physicians (per 1,000 people) column to doctors to make it easier to work with. The data has multiple entries for each country, spanning different years. We could make an animated map to show how the number of doctors is changing over time, but for now we’ll keep it simple with a static map showing a snapshot at one point in time. However, there’s a bit of a problem. If you inspect the data, you’ll see that not every country has an entry for each year - let’s use the most recent data available for each country. For each region, we keep the row with only the most recent year using a combination of group_by() and slice_max() from {dplyr}.\n\ndoctors &lt;- doctors |&gt;\n  dplyr::rename(\n    region = entity,\n    doctors = `Physicians (per 1,000 people)`) |&gt;\n  dplyr::select(region, year, doctors) |&gt;\n  dplyr::group_by(region) |&gt;\n  dplyr::slice_max(year) |&gt;\n  dplyr::ungroup()\n\nTo plot this data on a world map, we also need data for the country borders. Luckily, the map_data() function built into {ggplot2} can help us with that! This function takes data from the {maps} package and turns it into an object you can plot directly with {ggplot2}.\n\nlibrary(ggplot2)\nworld &lt;- map_data(\"world\")\n\nOf course, it’s never quite that straightforward. We need to join the world map data to our doctors data, and to do that we need a column in each data sets to join by - we’ll use the region column. If you try to join these two data sets using the region column, you’ll notice that you end up with some unexpected NA values. So what’s going on?\n\nYou don’t need to rename columns in your data to be able to join them, but for this example, I found it a little bit easier to work with the data after renaming entity to region.\n\nThere are two issues here. Firstly, there are more regions in the world data than there are in the doctors data:\n\nlength(unique(world$region))\n\n[1] 252\n\nlength(unique(doctors$region))\n\n[1] 221\n\n\nThis is partly due to the fact that the doctors data has implicitly missing values - if no data is available for a region, no rows exists in the data for that region. It isn’t listed with NA values. Note that there are also some regions in doctors which do not exist in world - for example, the entity \"Upper-middle-income countries\" is listed within doctors.\nSecondly, if you inspect the region names, you’ll see that for some countries, their names are encoded differently. For example, in the world data, the United States is listed as \"USA\" whilst in the doctors data, it’s listed as \"United States\". Here, the easiest thing to do is manually rename the values that differ in one of the datasets. We can use the recode() function from {dplyr} to do that. Note that recode() has the rather unusual (for the {tidyverse}) syntax of old_name = new_name:\n\nplot_data &lt;- doctors |&gt;\n  dplyr::mutate(\n    region =\n      dplyr::recode(region,\n        \"United Kingdom\" = \"UK\",\n        \"United States\" = \"USA\",\n        \"Democratic Republic of Congo\" = \"Democratic Republic of the Congo\",\n        \"Cote d'Ivoire\" = \"Ivory Coast\",\n        \"Congo\" = \"Republic of Congo\",\n        \"Czechia\" = \"Czech Republic\"\n      )\n  )\n\nThe entries in region column of doctors that don’t correspond to countries e.g. \"Upper-middle-income countries\" are not values that are required for the map. Therefore a left_join() can be performed, with world on the left - keeping all the countries listed in world and joining only those with a corresponding value in doctors. The remaining countries in world with no match in doctors are listed with NA values. The rows for \"Antarctica\" are filtered out - Antarctica is often given a disproportionate amount of space on world maps (at least those not centered on Antarctica) in the process of projecting a sphere onto a rectangle. \n\nmap_data &lt;- dplyr::left_join(world, plot_data, by = \"region\") |&gt;\n  dplyr::filter(region != \"Antarctica\")\n\nNow, we have everything we need to create a simple map.\n\n3.3.2 The first plot\nWe start, as almost always, with the ggplot() function, and pass in the data and aesthetic mappings that will apply to the whole plot. The longitude (long) and latitude (lat) are passed to the x and y axes; and we specify that the fill color of each country should be based on the doctors column. We also specify map_id - aesthetic mapping that isn’t seen as often as the others. This is used to tell geom_map() which column defines (not entirely unlike the group aesthetic discussed in previous chapters). \nBoth geom_sf() and geom_map() are used for creating maps within {ggplot2}. However, they expect different formats of data: geom_sf() expects an sf object, whereas geom_map() works with coordinates as columns in a data.frame or tibble. Here, we’ll use geom_map(). For examples of using geom_sf(), see Chapter ??. \n\nNote: you could also use geom_polygon() to plot map_data instead of geom_map().\n\n\nbase_plot &lt;- ggplot(\n  data = map_data,\n  mapping = aes(\n    x = long,\n    y = lat,\n    map_id = region,\n    fill = doctors\n  )\n) +\n  geom_map(map = map_data)\nbase_plot\n\n\n\n\n\n\nFigure 3.3: Map of the world with countries colored based on number of doctors per 1,000 people. The map looks stretched.\n\n\n\n\nSo we have a simple map that shows our data, but there are several problems with it:\n\nThe map looks as if someone was stretched in vertically, since there’s no map projection specified. Countries are still recognisable, but not quite the right shape.\nThe color palette is not ideal. It’s more intuitive for brighter or lighter colors to represent smaller values, and for darker colors to represent higher values - at least for light colored backgrounds (Schloss et al. 2019). The default gradient color scale in {ggplot2} is the opposite way around.\nThere are labels that don’t need to be there (lat and long), and missing labels that should be there (title and subtitle, for example).\n\nSo let’s fix those elements of the initial plot.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Doctors in an ageing population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html#advanced-styling",
    "href": "doctors-ageing-population.html#advanced-styling",
    "title": "3  Doctors in an ageing population: making maps with {ggplot2}",
    "section": "\n3.4 Advanced styling",
    "text": "3.4 Advanced styling\nWe’ll start by considering alternative color palettes, then think about text that should be added, before finalising the layout.\n\n3.4.1 Colors\nThere are many, many color palette R packages in existence, and even more outwith the R ecosystem. In fact, the {paletteer} package is designed give a common interface to a comprehensive collection of color palettes in R. One of my favourite is color palette R packages is (Mills 2022) - a collection of color palettes inspired by works of art at the Metropolitan Museum of Art in New York. It has many beautiful palettes, and many that work in traditional data visualisations. You can view all available palettes using MetBrewer::display_all(colorblind_only = TRUE). Since doctors is a continuous variable, we’ll look at the sequential palettes only.\n{MetBrewer} does have functions that interface directly with {ggplot2} (such as scale_fill_met_c()) but we’re going to use some of the colors in the palette to also define variables for the highlight and text colors. To get a good range of colors, we extract 20 colors from the \"Hokusai2\" palette. The text_col is the 18th color and highlight_col is the 15th color. A variable containing the background color, bg_col, is also defined.\n\nlibrary(MetBrewer)\ncol_palette &lt;- met.brewer(\"Hokusai2\", n = 20)\ntext_col &lt;- col_palette[18]\nhighlight_col &lt;- col_palette[15]\nbg_col &lt;- \"#EADEDA\"\n\nThese colors can then be passed into scale_fill_gradientn() from {ggplot2}. The limits of the color scale can also be set. Rather than adding labels for values on the legend, we can add text labels for Fewer doctors and More doctors. These are position 0.8 in from the limits of the color scale.\n\ncol_plot &lt;- base_plot +\n  scale_fill_gradientn(\n    colors = col_palette,\n    limits = c(0, 10),\n    breaks = c(0.8, 9.2),\n    labels = c(\"Fewer doctors\", \"More doctors\"))\ncol_plot\n\n\n\n\n\n\nFigure 3.4: Map of the world with countries colored based on number of doctors per 1,000 people, showing a different color scheme.\n\n\n\n\n\n3.4.2 Text and fonts\nNow, we can define some text for the title, subtitle, and caption. As in previous chapters, we’ll be using {ggtext} for formatting which means we can use markdown syntax to add bold font and line breaks.\n\ntitle &lt;- \"Doctors in an ageing population\"\nst &lt;- \"This map show the number of doctors per thousand people, revealing which countries* may be more likely to struggle in providing care for a population.&lt;br&gt;&lt;br&gt;*using the most recent available data for each country.\"\ncap &lt;- \"**Data**: Our World in Data | **Graphic**: N. Rennie\"\n\nThese text variables can then be passed into the labs() function in {ggplot2}:\n\ntext_plot &lt;- col_plot +\n  labs(title = title, subtitle = st, caption = cap)\n\nFonts can also be defined using the {sysfonts} and {showtext} packages. Here, the Roboto font is loaded through Google Fonts for the main font used, and Roboto Slab is loaded for use in the title. \n\nsysfonts::font_add_google(name = \"Roboto\", family = \"roboto\")\nsysfonts::font_add_google(name = \"Roboto Slab\", family = \"roboto_slab\")\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font &lt;- \"roboto\"\ntitle_font &lt;- \"roboto_slab\"\n\nTo apply these fonts to the plot, the theme elements need to be adjusted. \n\n3.4.3 Adjusting themes\nWe start by adding theme_void() from {ggplot2}. The theme_void function removes all theme elements - including grid lines, axis labels, and the background. The legend and specified titles and subtitles remain. This theme is especially useful for maps where it’s more common for axis lines, axis titles, and grid lines not to be displayed. Like other built-in theme options, we can still set the base_size and base_family to set the default size and font family for any text that is displayed. \nWe also set the plot.title, plot.subtitle, and plot.caption to use element_textbox_simple from {ggtext} to allow the markdown syntax and automatically wrap long subtitles as we’ve seen in previous chapters.\n\nlibrary(ggtext)\ntext_plot +\n  theme_void(base_size = 8, base_family = body_font) +\n  theme(\n    plot.margin = margin(10, 10, 10, 10),\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    plot.title = element_textbox_simple(\n      color = text_col,\n      family = title_font\n    ),\n    plot.subtitle = element_textbox_simple(\n      color = text_col\n    ),\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col\n    )\n  )\n\n\n\n\n\n\nFigure 3.5: Map of the world with countries colored based on number of doctors per 1,000 people. The map looks stretched, and the fonts in the title and subtitle are close together.\n\n\n\n\nOne of the aesthetic design choices we might want to make here, is to include the title within a banner with a different colored background. Although this might seem like a fairly straightforward thing to want, it’s actually not that easy with {ggplot2}. There are some solutions to the problem using packages like {cowplot} or {grid} to draw rectangles and text. But we can do this within {ggplot2}, but using facets in a way they were not designed to be used. Let’s start by adding an additional column called label to map_data that contains the title (for every row in the data): \n\nmap_data$label &lt;- title\n\n\nNote: this column does not need to be called label, you can use any name you choose as long as it’s not an existing column.\n\nThen we can use facet_wrap() and facet across the label column. Since there’s only one value of label in the data, this just adds the title as strip text at the top of the plot. While we’re here, let’s make the country outlines in the map the same color as the background, and make the lines a little bit thicker. \n\nstyled_plot &lt;- ggplot(\n  data = map_data,\n  mapping = aes(\n    long,\n    lat,\n    map_id = region,\n    fill = doctors\n  )\n) +\n  geom_map(\n    map = map_data,\n    color = bg_col,\n    linewidth = 0.3\n  ) +\n  scale_fill_gradientn(\n    colors = col_palette,\n    limits = c(0, 10),\n    breaks = c(0.8, 9.2),\n    labels = c(\"Fewer doctors\", \"More doctors\")\n  ) +\n  labs(title = title, subtitle = st, caption = cap) +\n  facet_wrap(~label) +\n  theme_void(base_size = 7, base_family = body_font) +\n  theme(\n    plot.margin = margin(10, 10, 10, 10),\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    plot.title = element_textbox_simple(\n      color = text_col,\n      family = title_font,\n      lineheight = 0.5\n    ),\n    plot.subtitle = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5\n    ),\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col,\n      lineheight = 0.5\n    ),\n    strip.background = element_rect(\n      fill = highlight_col, color = highlight_col\n    )\n  )\nstyled_plot\n\n\n\n\n\n\nFigure 3.6: Map of the world with duplicated title in the facet strip text, with dark text against a dark blue background.\n\n\n\n\nIt’s obvious that there are some issues with this plot now that the strip text contains the title:\n\nThere is a duplicate title set using labs(), and the strip.text title is too dark to read against the blue background.\nThe subtitle is above the title.\nThe map still appears stretched.\nThe legend is taking up quite a lot of space, and the white ticks in the colorbar are distracting.\n\nTo solve the first two problems, the title and subtitle arguments of labs() can be set to NULL to remove them from the plot. Instead, the tag argument in labs() can be used to set the subtitle. The nice thing about using tag is the plot.tag.position argument withing theme() which allows you to position the text anywhere on the plot. The strip.text and plot.tag arguments of theme should also be set using element_textbox_simple() from {ggtext} to allow the text to be styled as we wish. The top, left, and right margins of the plot should be set to 0 using plot.margin to make sure that the strip text banner goes to the edge of the plot. \nTo solve the third problem of the map looking stretched, we can apply coord_sf() which applies the World Geodetic System 1984 (WGS84) CRS (coordinate reference system). The upper limit of the y axis can also be extended beyond the range of the data to make room for the subtitle added using tag. \n\nstyled_plot2 &lt;- styled_plot +\n  labs(\n    title = NULL, subtitle = NULL, tag = st\n  ) +\n  # add space for the tag (subtitle) text\n  coord_sf(ylim = c(-60, 140)) +\n  theme(\n    # move and format the tag (subtitle) text\n    plot.margin = margin(0, 0, 5, 0),\n    plot.tag.position = c(0.015, 0.8),\n    plot.tag = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.6,\n      hjust = 0,\n      maxwidth = 0.98\n    ),\n    # add margin for caption\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col,\n      margin = margin(l = 5),\n      lineheight = 0.6\n    ),\n    # change title text color\n    strip.text = element_textbox_simple(\n      color = bg_col,\n      family = title_font,\n      margin = margin(7, 5, 7, 5),\n      lineheight = 0.6,\n      size = rel(1.7)\n    )\n  )\n\n\nNote: the values used in plot.tag.position = c(0.015, 0.8) and the strip.text argument margin = margin(7, 5, 7, 5) took a lot of trial and error to get just right. There’s no magic involved in choosing these values!\n\nTo solve the final problem of the legend appearance, we can edit the style elements in theme. The legend.title is removed by setting it to a blank element with element_blank(), and the legend text labels are styled with element_text(). \nThe placement of the legend is set through the legend.position, legend.justification.bottom, legend.margin, and legend.direction arguments.\n\n\n\n\n\n\nSince version 3.5.0 of {ggplot2}, you can also style the theme of individual legends from inside the guide_*() functions. Prior to version 3.5.0, legend.position was used to position the legend inside the plot before legend.position.inside and legend.justification.bottom were introduced to allow custom legend positions more easily. The other difference is that legend.ticks = element_blank() can be used to remove the white tick marks inside the colorbar legend. In older versions of {ggplot2}, guides(fill = guide_colorbar(ticks = FALSE)) could be used instead. \n\n\n\nThe size of the legend is controlled through the legend.key.width and legend.key.height arguments.\n\nstyled_plot2 +\n  theme(\n    # legend text\n    legend.title = element_blank(),\n    legend.text = element_text(\n      color = text_col,\n      lineheight = 0.5,\n      hjust = 0.5\n    ),\n    # legend size\n    legend.key.width = unit(1.5, \"cm\"),\n    legend.key.height = unit(0.3, \"cm\"),\n    # legend position\n    legend.position = \"bottom\",\n    legend.justification.bottom = \"right\",\n    legend.margin = margin(0, 5, -5, 0),\n    legend.direction = \"horizontal\",\n    legend.ticks = element_blank()\n  )\n\n\n\n\n\n\nFigure 3.7: Final styled plot showing a map of the world, with title inside a blue banner and a horizontal colorbar legend at the bottom right of the page.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Doctors in an ageing population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html#reflection",
    "href": "doctors-ageing-population.html#reflection",
    "title": "3  Doctors in an ageing population: making maps with {ggplot2}",
    "section": "\n3.5 Reflection",
    "text": "3.5 Reflection\nWhen the original plot of this data was created, it plotted the number of doctors per 1,000 people over the age of 70 and the colors were based on the log of this value - compare Figure 3.7 and Figure 3.8. The raw values on the color scale were hard to interpret, so the choice was made to use Fewer doctors and More doctors labels instead. For this version, where the underlying data is simpler and easier to interpret, having the values on the legend would add more useful information. The original title was also kept, but could probably be changed to something more informative.\n\n\n\n\n\nFigure 3.8\n\n\nWhen the data was processed, the choice was made to plot a map showing the values for the most recently available data. This means that for some countries the data is more recent (and therefore perhaps more reliable), whilst for others it’s much older. In fact, running range(doctors$year) shows that the most recent data in the plot is from 2019, whilst the oldest is from 1980 - a gap of almost 40 years! That makes it much harder to accurately compare between countries, and there’s no indication for each country on this map how recent the data is. Readers might end up drawing conclusions that show differences between countries, when actually the different is between times. Showing uncertainty on maps is tricky, and there’s no straightforward solution here. Perhaps setting the colors to a binary scale showing whether he value is above or below average, with the intensity of the color denoting the recentness of the data, is one approach. Or at least a more detailed explanation about the range of time the data relates to could be included within the subtitle.\nOne improvement to this map over the original is the use of coord_sf() to correctly scale the aspect ratio of the map. In the original map, using coord_map() (now deprecated in favour of coord_sf()) produced some odd looking results, and in the end, after applying the rest of the styling changes, the end result didn’t look too squashed. But coord_sf() made it much easier to achieve.\nEach plot created during the process of developing the original version of this visualisation was captured using {camcorder}, and is shown in the gif below. If you’d like to learn more about how {camcorder} can be used in the data visualisation process, see Chapter 5.\n\n\n\n\n\n\n\n\nComin, D., and Hohijn B. 2004. “Cross-Country Technological Adoption: Making the Theories Face the Facts.” Journal of Monetary Economics January 2004: 39–83.\n\n\ncontributors, PLDB. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for r. https://doi.org/10.5281/zenodo.4679423.\n\n\nHughes, Ellis. 2022a. Camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. Paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People, 2019.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. Patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. Sysfonts: Loading Fonts into r. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. Showtext: Using Fonts More Easily in r Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. Ggtext: Improved Text Rendering Support for ’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nYutani, Hiroaki. 2023. Gghighlight: Highlight Lines and Points in ’Ggplot2’. https://CRAN.R-project.org/package=gghighlight.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Doctors in an ageing population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "weird-wonderful.html",
    "href": "weird-wonderful.html",
    "title": "Weird and wonderful: completely custom charts",
    "section": "",
    "text": "Comin, D., and Hohijn B. 2004. “Cross-Country Technological Adoption: Making the Theories Face the Facts.” Journal of Monetary Economics January 2004: 39–83.\n\n\ncontributors, PLDB. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for r. https://doi.org/10.5281/zenodo.4679423.\n\n\nHughes, Ellis. 2022a. Camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. Paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People, 2019.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. Patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. Sysfonts: Loading Fonts into r. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. Showtext: Using Fonts More Easily in r Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. Ggtext: Improved Text Rendering Support for ’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nYutani, Hiroaki. 2023. Gghighlight: Highlight Lines and Points in ’Ggplot2’. https://CRAN.R-project.org/package=gghighlight.",
    "crumbs": [
      "Weird and wonderful: completely custom charts"
    ]
  },
  {
    "objectID": "technology-adoption.html",
    "href": "technology-adoption.html",
    "title": "4  Technology adoption: making gauge charts with {ggforce}",
    "section": "",
    "text": "4.1 Data\nThe technology adoption (Comin and B. 2004) data comes from\ntechnology &lt;- readr::read_csv(\"data/technology.csv\")\nThe technology data is reasonably large with 491636 rows and 7 columns. The data is in long format, and",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Technology adoption: making gauge charts with {ggforce}</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#exploratory-work",
    "href": "technology-adoption.html#exploratory-work",
    "title": "4  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n4.2 Exploratory work",
    "text": "4.2 Exploratory work\nWhat might be an interesting aspect of this data to visualize?\n\n4.2.1 Data exploration\nAs in other chapters in this book, we’ll start with some basic exploratory plots in base R. For example, we may look at the distribution of variables in each category using the barplot function:\n\nbarplot(\n  table(technology$category),\n  las = 2,\n  cex.axis = 0.5,\n  cex.names = 0.5\n)\n\n\n\n\n\n\n\nsome initial base R exploratory plots\nLet’s look at something more specific\nA list of all ISO3 country codes can be obtained by running unique(technology$iso3c), and from there we can choose a subset of countries we want to look at in more detail. Let’s look at Great Britain, USA, Sweden, Brazil, New Zealand, and Venezuela, and store these choices in a vector called countries. We also need to narrow down the data we want to consider - there are 194 different questions contained in the data. You can check by running length(unique(technology$label)). One variable we will consider further is the percentage of children who received a measles immunization - indicated by the \"pctimmunizmeas\" level in the variable column.\nAlthough including all years of data would better allow us to consider trends in the values, sometimes looking at a only a few snapshots can be more effective. For example, by considering only the years 1980 and 2010 as we’ll do here, readers get a Wow, look how much things have changed! message rather than the perhaps less impactful visual of a gradual trend. We can use the filter function from {dplyr} to filter our technology data set to consider only the rows showing data about percentage of children who received a measles immunization, in the years 1980 or 2010, and relating to countries in our specified vector of countries.\nWe no longer need the group, category, variable, or label columns, as these are constant for our data so we can remove these columns using select() from {dplyr}.\n\n# subset of countries to look at further\ncountries &lt;- c(\"GBR\", \"USA\", \"SWE\", \"BRA\", \"NZL\", \"VEN\")\n\n# subset data for specific topic, years, and countries\nmeasles_data &lt;- technology |&gt;\n  dplyr::filter(\n    label == \"% children who received a measles immunization\",\n    year %in% c(1980, 2010),\n    iso3c %in% countries\n  ) |&gt;\n  dplyr::select(-c(group, category, variable, label))\nhead(measles_data)\n\n# A tibble: 6 × 3\n  iso3c  year value\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 BRA    1980    57\n2 BRA    2010    99\n3 GBR    1980    53\n4 GBR    2010    89\n5 NZL    1980    80\n6 NZL    2010    91\n\n\nOur tidier data now shows just the percentage (value) of children who received a measles immunization in each country (iso3c), in each of 1980 and 2010 (year), How might we visualize this data?\nThere are a couple of obvious options that come to mind: a simple grouped bar chart, a slope chart, or indeed the (not often popular) pie chart Our choice of data visualization will depend on which aspects of the data we want to show. Do we want to compare 1980 to 2010? Do we want to compare countries to each other? Do we just want to show the range of values in the data? In this data, the most interesting example is a comparison between 1980 and 2010. Although a slope chart would likely work well for this data, we’re going a little bit more experimental with a gauge chart.\nAt the time of writing, there isn’t a built-in function in {ggplot2} to create gauge charts. If you’ve never heard of a gauge chart, this initial sketch might give you an idea of what we’re aiming for.\n\n4.2.2 Exploratory sketches\n\n\n\n\n\nFigure 4.1\n\n\nBefore …",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Technology adoption: making gauge charts with {ggforce}</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#preparing-a-plot",
    "href": "technology-adoption.html#preparing-a-plot",
    "title": "4  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n4.3 Preparing a plot",
    "text": "4.3 Preparing a plot\n\n4.3.1 Data wrangling\n\nplot_data &lt;- measles_data |&gt;\n  dplyr::mutate(no_value = 100 - value) |&gt;\n  tidyr::pivot_longer(\n    cols = c(value, no_value),\n    names_to = \"YN\",\n    values_to = \"perc\"\n  ) |&gt;\n  tidyr::pivot_wider(names_from = \"year\", values_from = \"perc\") |&gt;\n  dplyr::mutate(YN = factor(YN)) |&gt;\n  dplyr::mutate(\n    perc_1980 = `1980` / 100,\n    perc_2010 = `2010` / 100\n  ) |&gt;\n  dplyr::select(-c(`1980`, `2010`)) |&gt;\n  dplyr::group_by(iso3c) |&gt;\n  dplyr::mutate(\n    ymax_1980 = cumsum(perc_1980),\n    ymax_2010 = cumsum(perc_2010)\n  )\nhead(plot_data)\n\n# A tibble: 6 × 6\n# Groups:   iso3c [3]\n  iso3c YN       perc_1980 perc_2010 ymax_1980 ymax_2010\n  &lt;chr&gt; &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 BRA   value         0.57      0.99      0.57      0.99\n2 BRA   no_value      0.43      0.01      1         1   \n3 GBR   value         0.53      0.89      0.53      0.89\n4 GBR   no_value      0.47      0.11      1         1   \n5 NZL   value         0.8       0.91      0.8       0.91\n6 NZL   no_value      0.2       0.09      1         1   \n\n\n\n4.3.2 The {ggforce} extension package\nThe {ggforce} extension package (Pedersen 2022) contains many useful functions which extend the behavior of {ggplot2}, many of them aimed at exploratory data visualisation. We won’t cover many of it’s function in this chapter, and instead we’ll focus on how to use it to create gauge charts.\n{ggforce} is available on CRAN and can be installed with the usual install.packages(\"ggforce\") command.\n\n4.3.3 Gauge charts with {ggforce}\ngeom_arc_bar()\n\n4.3.4 Reformatting data\ngauge data\nthis changed from original mutate_at\n\ngauge_data &lt;- plot_data |&gt;\n  dplyr::ungroup() |&gt;\n  dplyr::mutate(\n    ymin_1980 = c(rbind(\n      rep(0, length(countries)),\n      (dplyr::slice_head(plot_data, n = -1) |&gt;\n        dplyr::pull(ymax_1980))\n    ))\n  ) |&gt;\n  dplyr::mutate(\n    ymin_2010 = c(rbind(\n      rep(0, length(countries)),\n      (dplyr::slice_head(plot_data, n = -1) |&gt;\n        dplyr::pull(ymax_2010))\n    ))\n  ) |&gt;\n  dplyr::group_by(iso3c) |&gt;\n  dplyr::mutate(\n    dplyr::across(\n      dplyr::starts_with(\"y\", ignore.case = FALSE),\n      ~ scales::rescale(.,\n        to = pi * c(-0.5, 0.5),\n        from = 0:1\n      )\n    )\n  )\n\n\n4.3.5 The first plot\nbasic plot\n\nlibrary(ggplot2)\nbasic_plot &lt;- ggplot(data = gauge_data) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010,\n      fill = YN\n    )\n  ) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980,\n      fill = YN\n    )\n  ) +\n  facet_wrap(~iso3c, nrow = 2)\nbasic_plot\n\n\n\n\n\n\nFigure 4.2: Initial plot created using geom_arc_bar() from {ggforce}, facetted by different countries.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Technology adoption: making gauge charts with {ggforce}</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#advanced-styling",
    "href": "technology-adoption.html#advanced-styling",
    "title": "4  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n4.4 Advanced styling",
    "text": "4.4 Advanced styling\n\n4.4.1 Colors\n\nhighlight_col &lt;- \"#990c58\"\nsecond_col &lt;- \"#949398\"\nbg_col &lt;- \"#dedede\"\n\nadd new colors to basic plot\n\nbasic_plot &lt;- ggplot(data = gauge_data) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010,\n      fill = YN\n    ),\n    color = second_col\n  ) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980,\n      fill = YN\n    ),\n    color = second_col\n  ) +\n  facet_wrap(~iso3c, nrow = 2)\n\nadd scale fill\n\ncolor_plot &lt;- basic_plot +\n  scale_fill_manual(\n    breaks = c(\"value\", \"no_value\"),\n    labels = c(\"Immunised\", \"Not Immunised\"),\n    values = c(highlight_col, second_col)\n  )\ncolor_plot\n\n\n\n\n\n\nFigure 4.3: Edited version of the previous plot with colors changed from defaults to grey and dark pink.\n\n\n\n\n\n4.4.2 Text and fonts\nAs we’ve seen in previous chapters, we can load in Google fonts using the {sysfonts} and {showtext} packages. Here, we’ll keep it clean and minimal by using the \"Ubuntu\" font for both the title and the body font.\n \n\nsysfonts::font_add_google(name = \"Ubuntu\", family = \"ubuntu\")\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font &lt;- \"ubuntu\"\n\nwrite text social to add\n\ntitle &lt;- \"Measles Vaccinations\"\nsubtitle &lt;- \"The inner bar represents the percentage of children who received a measles immunisation in 1980, whilst the outer bar represents the percentage in 2010. An increase in immunisation levels between 1980 and 2010 is seen across all countries.\\n\\nN. Rennie | Data: data.nber.org (10.3386/w15319)\"\n\nSince axis labels tend not to make too much sense for geom-arc_bar() plots, we’ll remove them later when using the theme functions. Instead, we can add our own labels using geom_text() to the end of the gauges. To make it easier, we can construct a small data.frame specifically for adding text labels. This includes the x, and y coordinates where the text should be positioned (you can read these of from the graph we already have since we haven’t yet deleted the axis label), as well as the label that should appear.\n\ntext_df &lt;- data.frame(\n  x = c(0.35, 0.85),\n  y = c(-0.1, -0.1),\n  label = c(1980, 2010)\n)\n\nWe can then add this to the existing plot by adding a layer with geom_text(), noting that we need to specify the data argument as using the text dataframe we just created. We also need to specify the font family and size directly within the geom_text() function, and can add the title and subtitle text created earlier using the labs() function from {ggplot2}.\n\ntext_plot &lt;- color_plot +\n  geom_text(\n    data = text_df,\n    mapping = aes(x = x, y = y, label = label),\n    family = body_font,\n    size = 3\n  ) +\n  labs(\n    title = title,\n    subtitle = subtitle\n  )\ntext_plot\n\n\n\n\n\n\nFigure 4.4: Previous plot with additional labels indicating the year on each gauge chart, as well as an added title and subtitle.\n\n\n\n\nYou’ll notice that the subtitle text runs off the page here. Let’s fix that using {ggplot2} themes and {ggtext} functions.\n\n4.4.3 Adjusting themes\nWe’ll start by removing all of the theme element such as the grey background, grid lines, axis labels. The easiest way to do this is using theme_void(). We can use the base_family argument of theme_void() to set the font family that will be used by default for any non-geom text elements that remain.\nYou may have noticed that the current gauge plots look a bit squashed and not exactly semi-circular. We can fix this by adding coord_fixed() which forces a 1:1 aspect ratio on the plot panel.\n\ntheme_plot1 &lt;- text_plot +\n  coord_fixed() +\n  theme_void(base_size = 8, base_family = body_font)\ntheme_plot1\n\n\n\n\n\n\nFigure 4.5: Edited version of previous plot with fixed coordinate system to prevent squashing, and all theme elements removed.\n\n\n\n\nThis looks better but it’s still not great. What do we still need to improve with styling? The title text doesn’t stand out and blends in to easily with the subtitle, similarly for the facet text. Perhaps a bold font would help? The subtitle text doesn’t fit onto the page but we can fix that with the help of the hopefully now familiar element_textbox_simple() function from {ggtext} .\nbg col remove legend\nLet’s fix the first three of these issues.\n\nmain_plot &lt;- theme_plot1 +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    strip.text = element_text(\n      face = \"bold\", size = rel(1.2)\n    ),\n    plot.title = element_text(\n      margin = margin(t = 10, b = 10),\n      face = \"bold\",\n      size = rel(1.5)\n    ),\n    plot.subtitle = ggtext::element_textbox_simple(\n      maxwidth = 0.8,\n      lineheight = 0.5,\n      hjust = 0.5,\n    ),\n    plot.margin = margin(5, 5, 5, 5)\n  )\nmain_plot\n\n\n\n\n\n\nFigure 4.6: Further styling of gauge chart to change background color, prevent overlapping in the subtitle text, and increase the size of the title.\n\n\n\n\n\n4.4.4 Adding a better legend\nAs we already saw in chapter …,\n\nlegend_plot &lt;- ggplot(\n  data = dplyr::filter(gauge_data, iso3c == \"USA\")\n) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010,\n      fill = YN\n    ),\n    color = second_col\n  ) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980,\n      fill = YN\n    ),\n    color = second_col\n  ) +\n  geom_text(\n    data = text_df,\n    mapping = aes(x = x, y = y, label = label),\n    family = body_font, size = 6\n  ) +\n  facet_wrap(~iso3c) +\n  scale_fill_manual(\n    breaks = c(\"value\", \"no_value\"),\n    labels = c(\"Immunised\", \"Not Immunised\"),\n    values = c(highlight_col, second_col)\n  ) +\n  labs(title = \"How do I read this plot?\") +\n  coord_fixed() +\n  theme_void(base_size = 8, base_family = body_font) +\n  theme(\n    legend.position = \"bottom\",\n    legend.title = element_blank(),\n    plot.background = element_rect(\n      fill = \"transparent\", color = \"transparent\"\n    ),\n    panel.background = element_rect(\n      fill = \"transparent\", color = \"transparent\"\n    ),\n    plot.title = element_text(\n      hjust = 0.5,\n      face = \"italic\",\n      margin = margin(t = 10, b = 10)\n    ),\n    plot.margin = margin(5, 5, 5, 5)\n  )\nlegend_plot\n\n\n\n\n\n\nFigure 4.7: Version of the gauge chart shown only for USA which will act as a legend.\n\n\n\n\n\n4.4.5 Combining legend with {patchwork}\nJoin with {patchwork}\n\nlibrary(patchwork)\nfinal_plot &lt;- main_plot +\n  inset_element(legend_plot, 0.5, 0.9, 1.1, 1.4) &\n  theme(\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    )\n  )\nfinal_plot\n\n\n\n\n\n\nFigure 4.8: Final gauge chart with overlaid legend in top right corner.\n\n\n\n\nAs with previous examples, don’t be fooled into thinking that the size of the legend and it’s positioning within the main plot is something that happened perfectly this first. The values are often picked through a series of trial and error, and with practice you’ll get better at choosing starting values.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Technology adoption: making gauge charts with {ggforce}</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#reflection",
    "href": "technology-adoption.html#reflection",
    "title": "4  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n4.5 Reflection",
    "text": "4.5 Reflection\nAre gauge charts the most effective method of visualising this data? No. Gauge charts have their own problems, some of which you can see here. Since the ring representing 2010 is on the outside, the radius is larger, and therefore the area . If you measure the change on arc length between 1980 and 2010, you’ll get different answers to if you measured the proportional change in area for the two.\n\n\n\n\nComin, D., and Hohijn B. 2004. “Cross-Country Technological Adoption: Making the Theories Face the Facts.” Journal of Monetary Economics January 2004: 39–83.\n\n\ncontributors, PLDB. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for r. https://doi.org/10.5281/zenodo.4679423.\n\n\nHughes, Ellis. 2022a. Camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. Paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People, 2019.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. Patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. Sysfonts: Loading Fonts into r. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. Showtext: Using Fonts More Easily in r Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. Ggtext: Improved Text Rendering Support for ’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nYutani, Hiroaki. 2023. Gghighlight: Highlight Lines and Points in ’Ggplot2’. https://CRAN.R-project.org/package=gghighlight.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Technology adoption: making gauge charts with {ggforce}</span>"
    ]
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "5  Conclusion: other tips and tricks",
    "section": "",
    "text": "5.1 Additional packages",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion: other tips and tricks</span>"
    ]
  },
  {
    "objectID": "conclusion.html#additional-packages",
    "href": "conclusion.html#additional-packages",
    "title": "5  Conclusion: other tips and tricks",
    "section": "",
    "text": "5.1.1 {camcorder} for recording gifs\n\n\n\n5.1.2 Sankey and alluvial charts with {ggsankey} and {ggalluvial}",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion: other tips and tricks</span>"
    ]
  },
  {
    "objectID": "conclusion.html#helper-functions",
    "href": "conclusion.html#helper-functions",
    "title": "5  Conclusion: other tips and tricks",
    "section": "5.2 Helper functions",
    "text": "5.2 Helper functions\n\n5.2.1 Font Awesome icons and HTML code\nLoad fonts Create HTML code\n\n\n5.2.2 Template files for #TidyTuesday\nYou may notice that each chapter of this book has followed a similar structure: load packages, read in some data, perform some exploratory analysis, load fonts and colors as variables, write relevant text, create a simple plot, add styling with {ggtext}, and save a png file. This means that for each plot, there’s a lot of overlap in the structure of the .R files and the code they contain.\nIf you visualise data using R on a regular basis, you’ll likely find yourself repeating similar steps. You might even find yourself copying and pasting code from a previous file to your new file.\n\n# Load packages -----------------------------------------------------------\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(patchwork)\nlibrary(camcorder)\nlibrary(ggtext)\nlibrary(glue)\n\n\n# Load data ---------------------------------------------------------------\n\ntuesdata &lt;- tidytuesdayR::tt_load(date_chr)\n\n\n# Load fonts --------------------------------------------------------------\n\nfont_add_google(\"Roboto\", \"roboto\")\nshowtext_auto()\n\n\n# Define colours and fonts-------------------------------------------------\n\nbg_col &lt;- \"\"\ntext_col &lt;- \"\"\nhighlight_col &lt;- \"\"\n\nbody_font &lt;- \"roboto\"\ntitle_font &lt;- \"roboto\"\n\n\n# Data wrangling ----------------------------------------------------------\n\n\n\n# Start recording ---------------------------------------------------------\n\ngg_record(\n  dir = file.path(yr, date_chr, \"recording\"),\n  device = \"png\",\n  width = 7,\n  height = 5,\n  units = \"in\",\n  dpi = 300\n)\n\n\n# Define text -------------------------------------------------------------\n\nsocial &lt;- social_caption(\n  bg_colour = bg_col,\n  icon_colour = highlight_col,\n  font_colour = text_col,\n  font_family = body_font\n)\ntitle &lt;- \"\"\nst &lt;- \"\"\ncap &lt;- paste0(\n  \"**Data**: &lt;br&gt;**Graphic**:\", social\n)\n\n\n# Plot --------------------------------------------------------------------\n\n\ntheme(\n  plot.margin = margin(5, 5, 5, 5),\n  plot.background = element_rect(fill = bg_col, colour = bg_col),\n  panel.background = element_rect(fill = bg_col, colour = bg_col),\n  plot.title = element_textbox_simple(\n    colour = text_col,\n    hjust = 0.5,\n    halign = 0.5,\n    margin = margin(b = 10, t = 5),\n    lineheight = 0.5,\n    family = title_font\n  ),\n  plot.subtitle = element_textbox_simple(\n    colour = text_col,\n    hjust = 0.5,\n    halign = 0.5,\n    margin = margin(b = 10, t = 5),\n    lineheight = 0.5,\n    family = body_font\n  ),\n  plot.caption = element_textbox_simple(\n    colour = text_col,\n    hjust = 0.5,\n    halign = 0.5,\n    margin = margin(b = 5, t = 10),\n    lineheight = 0.5,\n    family = body_font\n  )\n)\n\n\n# Save gif ----------------------------------------------------------------\n\ngg_playback(\n  name = file.path(yr, date_chr, paste0(date_strip, \".gif\")),\n  first_image_duration = 4,\n  last_image_duration = 20,\n  frame_duration = .25,\n  background = bg_col\n)\n\nnrennie.rbind.io/blog/script-templates-r/\n\n\n\n\n\nComin, D., and Hohijn B. 2004. “Cross-Country Technological Adoption: Making the Theories Face the Facts.” Journal of Monetary Economics January 2004: 39–83.\n\n\ncontributors, PLDB. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for r. https://doi.org/10.5281/zenodo.4679423.\n\n\nHughes, Ellis. 2022a. Camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. Paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People, 2019.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. Patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. Sysfonts: Loading Fonts into r. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. Showtext: Using Fonts More Easily in r Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. Ggtext: Improved Text Rendering Support for ’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nYutani, Hiroaki. 2023. Gghighlight: Highlight Lines and Points in ’Ggplot2’. https://CRAN.R-project.org/package=gghighlight.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion: other tips and tricks</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Bibliography",
    "section": "",
    "text": "Comin, D., and Hohijn B. 2004. “Cross-Country Technological\nAdoption: Making the Theories Face the Facts.” Journal of\nMonetary Economics January 2004: 39–83.\n\n\ncontributors, PLDB. 2022. “PLDB: A Programming Language\nDatabase.” PLDB.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024.\nviridis(Lite) - Colorblind-Friendly\nColor Maps for r. https://doi.org/10.5281/zenodo.4679423.\n\n\nHughes, Ellis. 2022a. Camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project\nDataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. Paletteer: Comprehensive Collection of Color\nPalettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by\nWorks at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data\nFrames. https://CRAN.R-project.org/package=tibble.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People,\n2019.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. Patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file\nAUTHORS for details. 2022. Sysfonts: Loading Fonts into r. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file\nAUTHORS for details. 2023. Showtext: Using Fonts More Easily in r\nGraphs. https://CRAN.R-project.org/package=showtext.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly\nSocial Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L.\nParker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in\nColormap Data Visualizations.” IEEE Transactions on\nVisualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data\nAnalysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023.\nR for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis\nVaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional\nProgramming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. Readr: Read\nRectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. Tidyr:\nTidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. Ggtext: Improved Text\nRendering Support for ’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nYutani, Hiroaki. 2023. Gghighlight: Highlight Lines and Points in\n’Ggplot2’. https://CRAN.R-project.org/package=gghighlight.",
    "crumbs": [
      "Bibliography"
    ]
  },
  {
    "objectID": "appendix.html",
    "href": "appendix.html",
    "title": "Appendix",
    "section": "",
    "text": "Software requirements\nThis book was built using R version 4.3.3. This book is built with Quarto, using version number 1.4.549. All R packages required to build this book can be found in the following table. Note that this table contains all packages required to create the book, not just those required for the examples.\nTable 1: R packages and version numbers\n\n\n\n\nPackage\nVersion\nPackage\nVersion\nPackage\nVersion\n\n\n\nBH\n1.84.0-0\nggforce\n0.4.2\nreadr\n2.1.5\n\n\nDBI\n1.2.2\ngghighlight\n0.4.1\nreadxl\n1.4.3\n\n\nKernSmooth\n2.23-22\nggplot2\n3.5.0\nrematch\n2.0.0\n\n\nMASS\n7.3-60.0.1\nggrepel\n0.9.5\nrematch2\n2.1.2\n\n\nMatrix\n1.6-5\nggtext\n0.1.2\nrenv\n1.0.5\n\n\nMetBrewer\n0.2.0\ngh\n1.4.0\nreprex\n2.1.0\n\n\nR.cache\n0.16.0\ngifski\n1.12.0-2\nrlang\n1.1.3\n\n\nR.methodsS3\n1.8.2\ngitcreds\n0.1.2\nrmarkdown\n2.25\n\n\nR.oo\n1.26.0\nglue\n1.7.0\nrnaturalearth\n1.0.1\n\n\nR.utils\n2.12.3\ngoftest\n1.2-3\nrnaturalearthdata\n1.0.0\n\n\nR6\n2.5.1\ngoogledrive\n2.1.1\nrpart\n4.1.23\n\n\nRColorBrewer\n1.1-3\ngooglesheets4\n1.1.1\nrprojroot\n2.0.4\n\n\nRCurl\n1.98-1.14\ngridExtra\n2.3\nrstudioapi\n0.15.0\n\n\nRcpp\n1.0.12\ngridtext\n0.1.5\nrsvg\n2.6.0\n\n\nRcppArmadillo\n0.12.8.0.0\ngtable\n0.3.4\nrvest\n1.0.4\n\n\nRcppEigen\n0.3.4.0.0\nhaven\n2.5.4\ns2\n1.1.6\n\n\nRttf2pt1\n1.3.12\nhighr\n0.10\nsass\n0.4.8\n\n\nVoronoiPlus\n0.1.0\nhms\n1.1.3\nscales\n1.3.0\n\n\nabind\n1.4-5\nhtmltools\n0.5.7\nselectr\n0.4-2\n\n\nanytime\n0.3.9\nhttr\n1.4.7\nsf\n1.0-15\n\n\naskpass\n1.2.0\nhttr2\n1.0.0\nshowtext\n0.9-7\n\n\nbackports\n1.4.1\nids\n1.0.1\nshowtextdb\n3.0\n\n\nbase64enc\n0.1-3\nimguR\n1.0.3\nsp\n2.1-3\n\n\nbit\n4.0.5\nini\n0.3.1\nspatstat\n3.0-7\n\n\nbit64\n4.0.5\nisoband\n0.2.7\nspatstat.data\n3.0-4\n\n\nbitops\n1.0-7\njcolors\n0.0.5\nspatstat.explore\n3.2-6\n\n\nblob\n1.2.4\njpeg\n0.1-10\nspatstat.geom\n3.2-9\n\n\nbrio\n1.1.4\njquerylib\n0.1.4\nspatstat.linnet\n3.1-4\n\n\nbroom\n1.0.5\njsonlite\n1.8.8\nspatstat.model\n3.2-10\n\n\nbslib\n0.6.1\nkableExtra\n1.4.0\nspatstat.random\n3.2-3\n\n\ncachem\n1.0.8\nknitr\n1.45\nspatstat.sparse\n3.0-3\n\n\ncallr\n3.7.5\nlabeling\n0.4.3\nspatstat.utils\n3.0-4\n\n\ncamcorder\n0.1.0\nlater\n1.3.2\nstringi\n1.8.3\n\n\ncellranger\n1.1.0\nlattice\n0.22-5\nstringr\n1.5.1\n\n\nclass\n7.3-22\nlifecycle\n1.0.4\nstyler\n1.10.2\n\n\nclassInt\n0.4-10\nlubridate\n1.9.3\nsvglite\n2.1.3\n\n\ncli\n3.6.2\nmagick\n2.8.3\nsys\n3.4.2\n\n\nclipr\n0.8.0\nmagrittr\n2.0.3\nsysfonts\n0.8.9\n\n\ncolorspace\n2.1-0\nmaps\n3.4.2\nsystemfonts\n1.0.5\n\n\ncommonmark\n1.9.1\nmarkdown\n1.12\ntensor\n1.5\n\n\nconflicted\n1.2.0\nmemoise\n2.0.1\nterra\n1.7-71\n\n\ncowplot\n1.1.3\nmgcv\n1.9-1\ntextshaping\n0.3.7\n\n\ncpp11\n0.4.7\nmime\n0.12\ntibble\n3.2.1\n\n\ncrayon\n1.5.2\nmodelr\n0.1.11\ntidyr\n1.3.1\n\n\ncredentials\n2.0.1\nmonochromeR\n0.2.0\ntidyselect\n1.2.0\n\n\ncurl\n5.2.1\nmunsell\n0.5.0\ntidyterra\n0.5.2\n\n\ndata.table\n1.15.2\nnlme\n3.1-164\ntidytuesdayR\n1.0.3\n\n\ndbplyr\n2.4.0\nnrBrand\n0.0.13\ntidyverse\n2.0.0\n\n\ndeldir\n2.0-4\nopenssl\n2.1.1\ntimechange\n0.3.0\n\n\ndesc\n1.4.3\nowidR\n1.4.2\ntinytex\n0.49\n\n\ndigest\n0.6.34\npander\n0.6.5\ntsibble\n1.1.4\n\n\ndownlit\n0.4.3\npatchwork\n1.2.0\ntweenr\n2.0.3\n\n\ndplyr\n1.1.4\npillar\n1.9.0\ntzdb\n0.4.0\n\n\ndtplyr\n1.3.1\npkgconfig\n2.0.3\nunits\n0.8-5\n\n\ne1071\n1.7-14\nplotwidgets\n0.5.1\nusefunc\n1.1.3\n\n\nellipsis\n0.3.2\npng\n0.1-8\nusethis\n2.2.3\n\n\nemojifont\n0.5.5\npoissoned\n0.1.2\nutf8\n1.2.4\n\n\nevaluate\n0.23\npolyclip\n1.10-6\nuuid\n1.2-0\n\n\nextrafont\n0.19\nprettyunits\n1.2.0\nvctrs\n0.6.5\n\n\nextrafontdb\n1.0\nprocessx\n3.8.3\nviridis\n0.6.5\n\n\nfansi\n1.0.6\nprogress\n1.2.3\nviridisLite\n0.4.2\n\n\nfarver\n2.1.1\nproto\n1.0.0\nvroom\n1.6.5\n\n\nfastmap\n1.1.1\nproxy\n0.4-27\nwhisker\n0.4.1\n\n\nfontawesome\n0.5.2\nps\n1.7.6\nwithr\n3.0.0\n\n\nforcats\n1.0.0\npurrr\n1.0.2\nwk\n0.9.1\n\n\nfs\n1.6.3\nquarto\n1.4\nxfun\n0.42\n\n\ngargle\n1.5.2\nragg\n1.2.7\nxml2\n1.3.6\n\n\ngenerics\n0.1.3\nrappdirs\n0.3.3\nyaml\n2.3.8\n\n\ngeofacet\n0.2.1\nraster\n3.6-26\nzip\n2.3.1\n\n\ngeogrid\n0.1.2\nrcartocolor\n2.1.1\n\n\n\n\ngert\n2.0.1\nrd2list\n0.1.0",
    "crumbs": [
      "Appendix"
    ]
  },
  {
    "objectID": "appendix.html#data",
    "href": "appendix.html#data",
    "title": "Appendix",
    "section": "Data",
    "text": "Data\nAll data sets used in this book, and links to the relevant licenses:\n\n\nChapter 1\n\nProgramming Languages Database (contributors 2022)\n\nSource: pldb.com\n\nLicense: PLDB content is published to the public domain and you can use it freely.\n\n\n\n\nChapter 2\n\nHoney Bee Colonies NA\nSource: usda.library.cornell.edu/concern/publications/rn301137d\n\nLicense: All publication files are considered government works and licensed with U.S. Public Domain.\n\n\n\n\nChapter 3\n\nMapping Museums (Mapping Museums 2021)\n\nSource: museweb.dcs.bbk.ac.uk/allmus\n\nLicense: Licensed with Creative Commons Attribution 4.0 International.\n\n\n\n\nChapter 4\n\nNA NA\nSource: NA\n\nLicense: NA\n\n\n\n\nChapter 5\n\nTrash Wheels NA\nSource: docs.google.com/spreadsheets/d/1b8Lbe-z3PNb3H8nSsSjrwK2B0ReAblL2\n\nLicense: NA\n\n\n\n\nChapter 6\n\nNA NA\nSource: NA\n\nLicense: NA\n\n\n\n\nChapter 7\n\nThe small home ranges and large local ecological impacts of pet cats NA\nSource: www.datarepository.movebank.org/entities/datapackage/4ef43458-a0c0-4ff0-aed4-64b07cedf11c\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nChapter 8\n\nMedical doctors per 1,000 people, 2019 (Our World in Data 2019)\n\nSource: ourworldindata.org/grapher/physicians-per-1000-people\n\nLicense: Licensed with Creative Commons Attribution 4.0 International.\n\n\n\n\nChapter 9\n\nNA NA\nSource: NA\n\nLicense: NA\n\n\n\n\nChapter 10\n\nNA NA\nSource: NA\n\nLicense: NA\n\n\n\n\nChapter 11\n\nLemurs NA\nSource: lemur.duke.edu/duke-lemur-center-database\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nChapter 12\n\nR Vignettes NA\nSource: github.com/rmflight/vignette_analysis\n\nLicense: NA\n\n\n\n\nChapter 13\n\nRAM Legacy Stock Assessment Database NA\nSource: zenodo.org/records/4824192\n\nLicense: Licensed with Creative Commons Attribution 4.0 International.\n\n\n\n\nChapter 14\n\nHistorical Cross Country Technology Adoption Dataset (Comin and B. 2004)\n\nSource: www.nber.org/research/data/historical-cross-country-technology-adoption-hccta-dataset\n\nLicense: The authors have made this dataset available for anyone to use.\n\n\n\n\nChapter 15\n\nNA NA\nSource: NA\n\nLicense: NA\n\n\n\n\nChapter 16\n\nNA NA\nSource: NA\n\nLicense: NA\n\n\n\n\n\n\n\n\n\nComin, D., and Hohijn B. 2004. “Cross-Country Technological Adoption: Making the Theories Face the Facts.” Journal of Monetary Economics January 2004: 39–83.\n\n\ncontributors, PLDB. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for r. https://doi.org/10.5281/zenodo.4679423.\n\n\nHughes, Ellis. 2022a. Camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. Paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People, 2019.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. Patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. Sysfonts: Loading Fonts into r. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. Showtext: Using Fonts More Easily in r Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. Ggtext: Improved Text Rendering Support for ’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nYutani, Hiroaki. 2023. Gghighlight: Highlight Lines and Points in ’Ggplot2’. https://CRAN.R-project.org/package=gghighlight.",
    "crumbs": [
      "Appendix"
    ]
  }
]