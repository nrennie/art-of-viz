[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The #TidyTuesday Cookbook",
    "section": "",
    "text": "Preface\nWelcome to The #TidyTuesday Cookbook. #TidyTuesday is a weekly social data project which aims to make learning to work with data easier, by providing real-world datasets. Participants are encouraged to explore the data shared via GitHub each week, create an output such as a data visualization, and share their output alongside their code, with the community.\nAfter three years of weekly contributions, I’ve worked with around 150 datasets and created over 150 data visualizations. Each chapter of this book will cover a different data visualisation, showing: the data exploration process; the choice of data visualisation type; the initial design ideas with hand-drawn sketches; the first build of a plot; and the iterative process of styling plots. For each plot, full R code is be provided and explained for each step of the creative process. None of the visualizations you’ll see were created specifically for this book - each one is an original data visualization created using real #TidyTuesday datasets over a series of years. Think of each chapter as a case study starting with a new data set you’ve never seen before, and working through a process to get to an insightful, artistic visualization. This book is all about that process. Sometimes the data is messy. Sometimes the code is hacky. Sometimes, upon reflection, the data could be visualized better.\nData visualization can be a very effective and efficient means of communicating information. Visualizing your data typically serves one of two purposes: (i) as part of exploratory analysis to help uncover discrepancies in data and identify interesting relationships to measure; or (ii) to communicate key insights and messages to a broader audience. The case-study nature of this book means that we’ll talk about both of these aspects, though we ’ll focus mostly on the second. Choosing an appropriate type of visualization and making careful choice about design can clarify the message you are trying to convey to a reader. That does not necessarily mean that every chart must follow a set of rules and stick to a rigid format. Instead, data visualization is a blend of science and creativity - many of the key landmark data visualizations held up as excellent examples don’t fit into the standard categories of bar charts, scatter plots, or line graphs.\nThat being said, the visualizations in this book are not necessarily always the most effective choice of visualization for the data and relationship shown. Rather, this book aims to show you examples of the end-to-end process of creating data visualizations, with a focus on the technical details of building them in R. You’ll see some non-standard solutions and unusual ideas that you can use to transform your data visualizations.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#who-is-this-book-aimed-at",
    "href": "index.html#who-is-this-book-aimed-at",
    "title": "The #TidyTuesday Cookbook",
    "section": "Who is this book aimed at?",
    "text": "Who is this book aimed at?\nThis book is primarily aimed at those who wish to develop their data visualization skills in R. Readers of this book may find a basic knowledge of R, more specifically of the {tidyverse} ecosystem, useful - although all code used in examples is fully explained. Readers do not need to be experienced in {ggplot2}, though this book will also be of interest to those who are. This book will also be of interest to those who are already familiar with R (including {ggplot2}), and wish to develop their skills in designing data visualizations further. It will also interest those who already design data visualizations using other tools, and want to learn how to do the equivalent in R.\nThere are many different versions of R, many different packages in R, and many different styles of writing code - and there isn’t a single best way of doing things. You may write code differently from the way you see it written in this book, and that’s perfectly fine. Throughout the book, a few choices have been made to keep code consistent:\n\nIn R, the pipe operator takes the thing on its left and passes it along to the function on its right (Wickham, Çetinkaya-Rundel, and Grolemund 2023). You can find a full description of the pipe operator in R for Data Science. The pipe (%&gt;%) was first introduced to R via the {magrittr} package. Since version 4.1.0 of R, a version of the pipe (|&gt;) has existed in base R. The base R version of the pipe is used throughout the book. Although there are some difference between the two version of the pipe, in this book, they can be used interchangeably.\nNamespacing (the pre-fixing of functions with the package name and ::) is used for all packages except {ggplot2} and base R packages. Namespacing is useful for two reasons (i) from a learning perspective, it makes it easier to recognise where functions come from and how they connect together, and (ii) from a programming perspective, it reduces conflicts and errors - something we all want less of!\nIn this book, we’ll primarily use base R for initial exploration and visualization, and then {ggplot2} and it’s associated extension packages to create our final graphic in each chapter.\nAll software requirements, including a complete list of package versions, can be found in the Appendix.\n\nYou may also notice that some of the final images differ slightly from those initially created and published on social media. You might also find some small differences in the code used to produce them if you compare the contents of this book to original scripts in the GitHub repository. These differences are likely due to one of four reasons:\n\nPackages have since been updated and code has been changed to use newer syntax. Many of the code changes relate to changes in {ggplot2} version 3.5.0;\nSome aspects have been omitted from a visualization to avoid explaining everything in Chapter 1 - but those aspects are all covered and linked to in later chapters;\nAfter many years of practice, there may be more efficient ways of re-writing code from some of the earlier plots. Any changes are clearly labelled and discussed;\nSome images may be different due to copyright reasons.\n\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "author.html",
    "href": "author.html",
    "title": "Author",
    "section": "",
    "text": "Nicola Rennie is a Lecturer in Health Data Science within the Centre for Health Informatics, Computing, and Statistics at Lancaster University. She holds a PhD in Statistics and Operational Research, which focused on analysing and visualising transport demand. Her current research is focused on applications of statistics and machine learning to health-related data, communicating statistics, and the effective teaching of data science. She has experience of teaching at both undergraduate and postgraduate level, in courses covering fundamentals of data science, population health, and statistical programming. Nicola has also previously worked in data science consultancy, and delivered training courses covering topics including advanced data visualisation with R, statistical modelling, and reproducible reporting. She is the author and maintainer of several R packages, including multiple {ggplot2} extension packages. Nicola is a regular speaker at R and data science meetups, is the current chapter organiser of R-Ladies Lancaster, and is part of the R-Ladies Global Team. She is co-author of the Royal Statistical Society’s Best Practices for Data Visualisation Guide, and an active member of the Royal Statistical Society. Several of her data visualisations have been long-listed at the Information is Beautiful Awards.\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Author"
    ]
  },
  {
    "objectID": "programming-languages.html",
    "href": "programming-languages.html",
    "title": "1  Programming Languages: dumbbell charts with {ggplot2}",
    "section": "",
    "text": "1.1 Data\nIn this chapter, we’re going to explore the Programming Languages Database (PLDB) (PLDB contributors 2022). This database is an encyclopaedia of programming languages, containing information on rankings, when it was created, what type of language it is, and how many GitHub repositories use the language - to name just a few variables. Programming language creators can use the database to help design and improve programming languages, whilst programming language users can use the database to help make decisions about which languages to use or learn.\nThe PLDB is published to the public domain and can be found online at pldb.io, where you can make queries and view the data. You can also download the data in CSV or JSON format. The PLDB data was used as a #TidyTuesday dataset in March 2023, meaning we can also easily load the data into R using the {tidytuesdayR} R package (Hughes 2022b).\nThe {tidytuesdayR} R package has several functions for helping to get data and information about #TidyTusday data into R. One of the most commonly used functions is the tt_load() function, which loads the data from a specific week (specified by the data) into your R session. For a given week, there may be multiple datasets, and a specific one can be accessed using the $ notation:\ntuesdata &lt;- tidytuesdayR::tt_load(\"2023-03-21\")\nlanguages &lt;- tuesdata$languages\nYou can alternatively read the data in via {tidytuesdayR} using the year and week. For example languages &lt;- tidytuesdayR::tt_load(2023, week = 12), but personally I find remember the date much easier! You can also read the data in directly from the CSV file on GitHub using read.csv() or read_csv() from {readr}.\nWhat does the data look like? We can inspect the first six rows of the data using head():\nhead(languages)\n\n# A tibble: 6 × 49\n  pldb_id    title     description type \n  &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;       &lt;chr&gt;\n1 java       Java      &lt;NA&gt;        pl   \n2 javascript JavaScri… &lt;NA&gt;        pl   \n3 c          C         &lt;NA&gt;        pl   \n4 python     Python    &lt;NA&gt;        pl   \n5 sql        SQL       &lt;NA&gt;        quer…\n6 cpp        C++       &lt;NA&gt;        pl   \n# ℹ 45 more variables: appeared &lt;dbl&gt;,\n#   creators &lt;chr&gt;, website &lt;chr&gt;,\n#   domain_name &lt;chr&gt;,\n#   domain_name_registered &lt;dbl&gt;,\n#   reference &lt;chr&gt;, isbndb &lt;dbl&gt;,\n#   book_count &lt;dbl&gt;,\n#   semantic_scholar &lt;dbl&gt;, …\nYou can also use View() to open a new tab in RStudio to inspect the data in something that resembles a non-editable spreadsheet file - if you prefer a more human-readable format. Inspecting the data in this very basic way (simply looking at it with our eyes first) helps to ensure that the data has been read in correctly. This dataset has 4303 rows and 49 columns - giving us many options for variables to explore further. What variables do we have? The data description contained in the #TidyTuesday GitHub repository (github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-03-21/readme.md) is often a good plaece to start. A table containing the column names and what the data in each column means, can help give you some more context for the data you are looking at - especially since columns are not always named intuitively! For the PLDB dataset, you can also look at an even more in-depth description of the variables on the dataset’s website at pldb.io/csv.html. Here, you’ll also notice that the #TidyTuesday version of this dataset is a subset of a larger dataset which contains 356 variables - we’ll stick with the smaller version for this chapter!\nThere are many variables with missing (NA) values in the PLDB - few languages have an entry in the description column, github_ columns, reference column, or is_open_source column. Missing values are highly important - we don’t always want to simply discard rows or columns with missing values as they can often tells us a lot of important information about our data. For example, the many missing values in the github_ columns might be related to the fact that many programming languages precede GitHub’s creation in 2008. Discarding rows if they have any missing values in these columns might mean we bias any analysis to newer programming languages. There are many methods of dealing with missing data, and which method you use will depend on what you are trying to achieve. Having said that, this isn’t a statistics book, so for the purposes of visualization we’ll focus on columns that are mostly complete.\nSo which columns should we explore first? Often when we’re working with data, there is some outcome that we’re interested in. Depending on your field, you might instead hear this called the response variable or the dependent variable. You might have multiple outcomes of interest. For example, in the PLDB data, we might be interested in what affects the ranking and/or the number of GitHub stars for a programming language. These are often the variables we want to tell a story about. However, it’s also important to think about exploring relationships between other variables to make sure that the story you’re telling is the correct one. It might seem obvious that there could be a relationship between github_repo_stars and github_repo_forks, but what exactly is that relationship? What about a less obvious connection between last_activity and number_of_jobs - is there a relationship there?",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Programming Languages: dumbbell charts with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "programming-languages.html#exploratory-work",
    "href": "programming-languages.html#exploratory-work",
    "title": "1  Programming Languages: dumbbell charts with {ggplot2}",
    "section": "\n1.2 Exploratory work",
    "text": "1.2 Exploratory work\nBeyond looking at the data, counting the rows and columns, and inspecting the values in different columns, a key part of exploratory work is visualizing data. These initial visualizations can help you to check if there are any issues with your data (e.g. a misspelling Monday as Mnoday). They can also help to identify interesting relationships or patterns in the data, which can guide you to further avenues for exploration and appropriate modelling techniques.\nThere are many different types of plot, and when we’re creating . I hope you’ll see several examples of those in this book. But often, for those initial exploratory plots, the classic charts are where I start: scatter plots, bar charts, box plots, and line charts. Scatter plots are useful for exploring a relationship between two continuous variables; boxplots for exploring a relationship between a categorical and continuous variable; bar charts for exploring a relationship between multiple categorical variables; and line charts for how continuous variables how change over time.\n\n1.2.1 Data exploration\nWe can’t explore every column in this chapter, but I encourage you to do so at home. So we’ll start with language_rank - the most obvious outcome that we might want to consider. Note that, in this data, the rank starts at 0 (insert your own joke about indexing from 1 being better here…). We might want to look at the last_activity column in relation to the rank - are programming languages with more recent activity also more popular? Let’s start by making a scatter plot of last activity (on the x-axis) and language rank (on the y-axis).\n\nplot(\n  languages$last_activity, languages$language_rank\n)\n\n\n\n\n\n\nFigure 1.1: A basic scatter plot of how language rank varies based on last activity, showing some unusual date values.\n\n\n\n\nStraight away this highlights the role of data visualization in exploratory analysis. This scatter plot don’t look quite right - the last_activity data ranges from around -1000 to just over 2000, with most of the values close to the 2000 mark. If this is supposed to be a date column, we need to think about whether these values are correct.\n\nAre these simply incorrect entries?\nAre these missing values? It’s not uncommon for missing values to be encoded as -999 for example. This is especially true if data has been processed in some other software before it’s loaded into R. Just because you have NA values in your data, doesn’t mean you can’t also have these unusually coded missing values. Values can be missing for different reasons, and sometimes they are encoded in multiple ways to demonstrate this difference.\nAre these values transformed in some way we don’t expect? Dates can be encoded as integer values - often as number of dates since some origin time. The origin time used in R is often \"1970-01-01\", so it’s perfectly reasonable to have negative dates if you’re dealing with data pre-1970.\n\nIn this case, the dates are actually given as just a year (rather than a Date object) so the negative values are unlikely to be incorrectly transformed values. If we’re going to filter out these rows, which year do we use to filter them out? Before 1500? Before 1970? Let’s actually look at these rows:\n\nlanguages[order(languages$last_activity), ] |&gt; head()\n\n# A tibble: 6 × 49\n  pldb_id        title description type \n  &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;\n1 roman-numerals Roma…  &lt;NA&gt;       nume…\n2 etruscan-nume… Etru…  &lt;NA&gt;       nume…\n3 attic-numerals Atti…  &lt;NA&gt;       nume…\n4 greek-numerals Gree…  &lt;NA&gt;       nume…\n5 arezzo-notati… arez… \"The stave… musi…\n6 fibonacci-not… Libe… \"The Arabi… nota…\n# ℹ 45 more variables: appeared &lt;dbl&gt;,\n#   creators &lt;chr&gt;, website &lt;chr&gt;,\n#   domain_name &lt;chr&gt;,\n#   domain_name_registered &lt;dbl&gt;,\n#   reference &lt;chr&gt;, isbndb &lt;dbl&gt;,\n#   book_count &lt;dbl&gt;,\n#   semantic_scholar &lt;dbl&gt;, …\n\n\nThough the name of the Programming Languages Database may suggest that it focuses exclusively on programming languages, this isn’t true. It also includes information on query languages, stylesheet languages, and protocols, amongst other things. Including numeral systems as you can see here.\nLet’s look at the balance between these different types of languages in the data using a bar chart created using the barplot() function from the {graphics} package in base R. The barplot() function takes a (named) vector or matrix of counts for each category. We can create this vector of counts using the table() function from base R. Wrapping the vector inside sort() means that the bars will be plotted in ascending order. \n\nbarplot(\n  sort(table(languages$type))\n)\n\n\n\n\n\n\nFigure 1.2: A bar chart showing the number of different languages of each type, sorted in ascending in order from left to right.\n\n\n\n\nAlmost all of them are programming languages so let’s focus on them only, and recreate our last_activity against language_rank scatter plot. We can use the subset() function to extract only rows of the data where the type is \"pl\" and save this to a new object called pl_df. \n\npl_df &lt;- subset(languages, type == \"pl\")\nplot(\n  pl_df$last_activity, pl_df$language_rank\n)\n\n\n\n\n\n\nFigure 1.3: A basic scatter plot of how language rank varies based on last activity, showing clustering of languages with last activity before and after 2000.\n\n\n\n\nNow, our scatter plot looks much more reasonable - with the first entries in the early 1950’s. It also presents an interesting pattern where the programming languages are split into two different clusters. Languages with last_activity after 2000 are higher ranked (in the top 3000), and those with their last activity before the year 2000 mostly ranked below. Although this is interesting, remember we can’t really make any directional statements here. Do people prefer using languages that are more actively maintained? Or are languages more actively maintained because people prefer using them?\n\n\n\n\n\n\nTip 1.1: Subsetting data in R\n\n\n\nYou can also subset the data using the filter() function from {dplyr}, either with or without the use of the pipe operator: \n\npl_df &lt;- dplyr::filter(languages, type == \"pl\")\n\nBoth approaches are equally valid. For this book, if we’re plotting in {ggplot2}, we’ll prepare data using other {tidyverse} packages. But if we’re plotting in base R, we’ll prepare data using base R as well.\n\n\nWhich other columns might we explore? In R, we write comments using the # symbol. For personal curiosity, we might be interested in how common that is. Of these programming languages, which symbols are used to denote comments? We can create a bar chart of the different line_comment_tokens using the barplot() function again: \n\nbarplot(\n  sort(table(pl_df$line_comment_token))\n)\n\n\n\n\n\n\nFigure 1.4: A bar chart showing the number of different programming languages that each each comment symbol, sorted in ascending in order from left to right.\n\n\n\n\nUsing # for comments is the second most common symbol behind //. Is this a new trend?\n\n1.2.2 Exploratory sketches\nThe aspects of the data that we are interested in visualizing are:\n\nwhen the programme language has been used (the time between appeared and last_activity_date)\nwhat the comment symbol is\nthe ranking of the programming languages\n\nTo visualize the time between two things happening, e.g. time between appeared and last_activity_date, we could use a dumbbell chart. Essentially, a point at each of the time points and a (usually horizontal) line connecting the two - named for their resemblance to dumbbell weights. Dumbbell charts are also commonly used to show the difference between values for two categories e.g. heights for men and women, or blood pressure readings before and after a treatment.\nA dumbbell chart for the timelines of languages that use a # for comments might look something like this:\n\n\n\n\n\nFigure 1.5: Initial sketch of a dumbbell chart showing the time frame that different languages are active for a specific comment character.\n\n\nTo show how this differs between different comment symbols, we might create small multiples of this chart - essentially creating the same plot multiple times for different subsets of the data. In {ggplot2}, these are called facets, and might look something like this:\n\n\n\n\n\nFigure 1.6: Initial sketch of a dumbbell chart showing the time frame that different languages are active for a specific comment character.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Programming Languages: dumbbell charts with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "programming-languages.html#preparing-a-plot",
    "href": "programming-languages.html#preparing-a-plot",
    "title": "1  Programming Languages: dumbbell charts with {ggplot2}",
    "section": "\n1.3 Preparing a plot",
    "text": "1.3 Preparing a plot\nDumbbell charts are essentially a combination of two things: lines and points. Although there isn’t a built-in function for creating dumbbell charts in {ggplot2}, there are built-in functions for creating lines and points so we have everything we need to make a dumbbell chart.\nThere are a few extensions packages that can help you to make dumbbell chartsm without having to assemble the lines and points yourself. The {ggalt} package (Rudis, Bolker, and Schulz 2017) which provides additional coordinate systems, geoms, statistical transformations, and scales for {ggplot2}, includes the geom_dumbbell() function which, as the name suggests, provides a quick and easy way to create dumbbell charts. The {dumbbell} package (Cheung 2021) also provides functionality for creating dumbbell charts.\nIn this chapter, we’re not going to use either of those for a couple of reasons:\n\nExtension packages are perfect for making charts more quickly and easily, and I would encourage you to try them. But it’s also really useful to understand that, as long as you can break down the chart you want into lines, points, and polygons, then you can make it with {ggplot2}. That’s, at least in part, what this book is about.\nWe’re going to apply reasonably advanced customisations to our dumbbell chart, and it’s useful to see how these work in {ggplot2} first so that you can later apply them to other plot types more easily.\n\n\n1.3.1 Data wrangling\nWe’ll start by sub-setting the data to keep only the rows relating to languages that use one of the comment symbols that we’re interested in. If we want to look at only languages that use a //, #, or ; for comments, we can use the filter() function from {dplyr} in conjunction with the %in% operator. This keeps only rows where the value in the line_comment_token column is in the vector c(\"//\", \"#\", \";\"). We’ll be faceting by line_comment_token, and we want to make sure that the title of the facet is informative - not just a # symbol on its own. Although we could create a labelling function to do this, it’s even easier to just edit the text in the line_comment_token token. We use the paste() function to add the phrase \"Comment token:\" before each symbol and add this as a new column called label using mutate() from {dplyr}. \nTo keep our data tidy and manageable, we can drop the columns we no longer need using the select() function from {dplyr} to keep only the five columns we’ll be using in the visualization. We’ll also discard any rows that contain an NA value in any of these columns using drop_na() from {tidyr}. \n\ncomment_df &lt;- pl_df |&gt;\n  dplyr::filter(line_comment_token %in% c(\"//\", \"#\", \";\")) |&gt;\n  dplyr::mutate(\n    label = paste(\"Comment token:\", line_comment_token)\n  ) |&gt;\n  dplyr::select(\n    title, appeared, last_activity, label, language_rank\n  ) |&gt;\n  tidyr::drop_na()\n\nIn each facet, we could list all programming languages that use the comment symbol related to that facet. This would also display information about how much languages use each symbol. Alternatively, we may choose to use only the top 10 ranked languages for each symbol.\nWe can extract the top 10 using slice_min() from {dplyr} and select the 10 with the smallest values in language_rank. Alternatively, since the data is already sorted in rank order, we can use slice_head() from {dplyr} to extract the first 10 rows. Since we want the top 10 rows from each comment symbol category (not just the top 10 overall), we need to group() the data based on the label column. Before we ungroup() the data, we also want to create a new column that defines the within-group ranking as this will help with plotting. The row_number() function from {dplyr} identifies the row number within each group so is used to define this within-group ranking. We add it as a new column called n using mutate(). \nTo aid in plotting, we also want to reformat the data to put both year columns (appeared and last_activity) into one column. We can do this using pivot_longer() from {tidyr}. \n\nplot_data &lt;- comment_df |&gt;\n  dplyr::group_by(label) |&gt;\n  dplyr::slice_head(n = 10) |&gt;\n  dplyr::mutate(\n    n = factor(dplyr::row_number(), levels = 1:10)\n  ) |&gt;\n  dplyr::ungroup() |&gt;\n  tidyr::pivot_longer(\n    cols = c(appeared, last_activity),\n    names_to = \"type\",\n    values_to = \"year\"\n  )\n\nOur plot_data looks like this:\n\nhead(plot_data)\n\n# A tibble: 6 × 6\n  title  label language_rank n     type \n  &lt;chr&gt;  &lt;chr&gt;         &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt;\n1 Python Comm…             3 1     appe…\n2 Python Comm…             3 1     last…\n3 Perl   Comm…             9 2     appe…\n4 Perl   Comm…             9 2     last…\n5 Ruby   Comm…            12 3     appe…\n6 Ruby   Comm…            12 3     last…\n# ℹ 1 more variable: year &lt;dbl&gt;\n\n\nNow we’re ready to start plotting!\n\n1.3.2 The first plot\nOne of the especially nice features of {ggplot2} is the ability to save plots as variables, and iteratively add (using +) layers to it. To make the code a little bit clearer, we’ll be creating each aspect of our plot in stages, and gradually adding more complex styling to it. We’ll save the first plot we create as basic_plot. Let’s start by loading {ggplot2} using the library() command.\nAs with most plots created with {ggplot2}, we’ll start by calling the ggplot() function. In {ggplot2} we can define which data and aesthetic mapping we want to use either globally (in the ggplot() function) or in each individual layer. We’ll be using the same data (plot_data) for all layers, so we pass it into the data argument of ggplot(). \nNext, we start adding geometries: lines and points. The order we add the geometries is important here. We want the points to be plotted on top of the lines so that we don’t see the lines overlapping with the points. This means we need to plot the lines first, then the points. We add geometries using the different geom_* functions. To add lines, we use geom_line(). Although {ggplot2} is smart, it’s not smart enough to guess which variables will be plotted on each axis. We need to specify an aesthetic mapping using the aes() function - to define which columns from the data are going on the x and y axes. We want to draw horizontal lines for our dumbbell chart, meaning that year goes on the x-axis, and the rank category, n, goes on the y-axis. By default, geom_line() draws lines between the co-ordinates in the order of the variable on the x-axis. That’s not really what we want here. We want a separate line drawn for each language, i.e. each rank, n. So we pass this into the group argument as well. This will still draw lines between co-ordinates in order of the variable of the x-axis, but separately for each rank category. To add points at each end of the dumbbell, we add geom_point() - specifying the aesthetic mapping to put the year on the x-axis and the rank on the y-axis again. We don’t need to specify a group here, although it won’t make any difference if we do. \nFinally, we also add facet_wrap() to create a small multiple plot (facet) for each category in the label column. Note the ~ required before the name of the column we wish to facet by. \n\nlibrary(ggplot2)\nbasic_plot &lt;- ggplot(data = plot_data) +\n  geom_line(mapping = aes(x = year, y = n, group = n)) +\n  geom_point(mapping = aes(x = year, y = n)) +\n  facet_wrap(~label)\nbasic_plot\n\n\n\n\n\n\nFigure 1.7: A facetted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol.\n\n\n\n\nIn {ggplot2} (and most other plotting software) the y-axis starts with 0 at the bottom with increasing values going upwards. However, when we visualize rankings, we usually want to put the smallest number (highest rank) at the top. So we want to reverse the y-axis here. In {ggplot2}, for a discrete axes, we do this by passing the rev() (short for reverse) function to the limits argument of scale_y_discrete(). \nThe current y-axis labels are not especially informative - it would be more useful to add in the names of the languages or the overall ranking rather than simply the numbers 1 to 10. Later, we’re going to add some labels in each facet to provide this information, so we’ll expand the left hand side of the x-axis to leave some space for those labels. By setting expand = expansion(0, 0) we remove the extra space that’s automatically added by {ggplot2} at either side of the axis.\n\nbasic_plot +\n  scale_y_discrete(limits = rev) +\n  scale_x_continuous(\n    breaks = c(1970, 1990, 2010, 2030),\n    limits = c(1930, 2030),\n    expand = expansion(0, 0)\n  )\n\n\n\n\n\n\nFigure 1.8: A facetted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol. High ranked languages are at the top of the chart, and the x-axis extends from 1930 to 2030.\n\n\n\n\nWe now have a basic plot that looks a little bit like the sketch in Figure 1.6. But it doesn’t look great yet. It needs a bit more work to improve both the aesthetics and the clarity of the visualization.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Programming Languages: dumbbell charts with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "programming-languages.html#advanced-styling",
    "href": "programming-languages.html#advanced-styling",
    "title": "1  Programming Languages: dumbbell charts with {ggplot2}",
    "section": "\n1.4 Advanced styling",
    "text": "1.4 Advanced styling\nThere are lots of different elements of applying more advanced styling to charts, and we’ll cover a few of them in this section: colors, fonts, and themes.\n\n1.4.1 Colors\nLet’s start with colors. How do you decide which colors to use? The more complex case is where color represents a variable in the data - either through a color gradient for continuous variables, or a set of distinct colors for discrete, categorical data. We’ll come back to choosing colors for this setting in Chapter 2 and Chapter 3. Here, it’s a little bit easier since we only need to think about a few colors: the background color(s), the text color(s), and the colors for the different geometric elements.\nTo make visualizations that are more aesthetically pleasing, it’s often useful to think about whether you can match your color choices to the theme of the data. For example, if you’re creating a bar chart of pumpkin sizes, you might want to use orange for the bar color. Here, we’re creating a chart about programming languages. What color do you associate with programming languages? Personally, I think of green. Specifically, the green used in green screens - monochrome monitors that use a green phosphor screen, typically in the early days of computing.\nWe can define some variables to store our colors in: a variable called bg_col that’s dark grey color we’ll use for the background; and a variable called main_col that’s a hex code for a bright green color we’ll use for the text and other geometric elements.\n\n\n\n\n\n\nTip 1.2: Colors in R\n\n\n\nThe dark grey, \"gray5\", is a pre-defined color in R. Run colors() to see the list of all 657 pre-defined colors available.\n\n\nIt’s useful to save colors as variables because it makes it much easier to edit colors later on. We could just use the hex code directly in each argument where we want to use the color. But as you’ll see when we start applying the colors to our chart, this can be many different arguments. If we decided we actually want to use a slightly different shade of green, we’d have to manually change all of them. By using a variable, we only need to change it once.\n\nbg_col &lt;- \"grey5\"\nmain_col &lt;- \"#66FF00\"\n\nAlthough you can use update_geom_defaults() to change the default colors used for lines, points, and text, I’m not a fan of this approach since it changes the colors for all plots in your R session and it’s quite tricky to return to the previous defaults. Instead, we can simply rewrite the code we already have and add in the additional colors. Note that these colors are added outside of the aes() function since they are not mapped to variables in the data. \nThe point character (pch) for geom_point() is also set to 22 - a square which allows you to color the square and its outline different colors. The outline color is set to our green main_col and the square fill color is set to the dark grey bg_col.\n\nbasic_plot &lt;- ggplot(data = plot_data) +\n  geom_line(\n    mapping = aes(x = year, y = n, group = n),\n    color = main_col\n  ) +\n  geom_point(\n    mapping = aes(x = year, y = n),\n    color = main_col,\n    fill = bg_col,\n    pch = 22\n  ) +\n  facet_wrap(~label) +\n  # add scales back in\n  scale_y_discrete(limits = rev) +\n  scale_x_continuous(\n    breaks = c(1970, 1990, 2010, 2030),\n    limits = c(1930, 2030),\n    expand = c(0, 0)\n  )\nbasic_plot\n\n\n\n\n\n\nFigure 1.9: A facetted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol with green lines and green-outlined dark grey points.\n\n\n\n\n\n1.4.2 Text and fonts\nAdding text to a visualization is important - a title, subtitle, and perhaps caption can add information to make it easier for a reader to understand what’s going on. A title quickly explains what the chart is about. Though more informative titles may be viewed as more aesthetically pleasing, there’s no evidence that they are more effective for conveying information (Wanzer et al. 2021). A subtitle might give some more information about the underlying data, explain how to interpret more complex charts, or state the conclusions a reader should come to. Captions are a good place to put information such as who made the graphic, what the source of the data is, or other important conditions on the data.\nAs with colors, we’ll define text as variables. This helps to keep the plotting code looking a little bit cleaner. It’s often easier to write the text after you’ve made the plot, and defining variables make it easy to add placeholder text while you’re working on the plot.\n\ntitle &lt;- \"Programming Languages\"\ncaption &lt;- \"Data: Programming Language DataBase | Graphic: N. Rennie\"\n\nSince our visualization doesn’t give information on how many languages use each comment symbol and just focuses on the top 10, we might want to instead present this information in the subtitle instead:\n\nsubtitle &lt;- \"Of the 4,303 programming languages listed in the Programming Language DataBase, 205 use //, 101 use #, and 64 use ; to define which lines are comments. 3,831 languages do not have a comment token listed.\"\n\nThe problem with writing out the values into a text string like this is that it’s hard to update. The snapshot of data we’re working with here is from March 2023. If we updated the data to a more recent version, we’d have to recalculate these values manually then copy and paste them into the text string. A better approach is to use data-driven text - combine calculation with text.\nThe {glue} package (Hester and Bryan 2024) makes it easy to combine text with variable values. The glue() function evaluates R code inside curly brackets {} and inserts it into the string. Alternatively, you can use paste() as we did earlier for the facet labels, or sprintf() in base R.\n\n\n\n\n\n\nTip 1.3: Opening and closing brackets in glue()\n\n\n\nIf you need to use a curly bracket inside the string text, you can change the .open and .close arguments of glue() to a different delimiter.\n\n\nSince the values are going into a sentence we can make use of the format() function to add commas into the number formatting - showing 4,303 instead of 4303: \n\nsubtitle &lt;- glue::glue(\"Of the {format(nrow(languages), big.mark = ',')} programming languages listed in the Programming Language DataBase, {sum(languages$line_comment_token == '//', na.rm = TRUE)} use //, {sum(languages$line_comment_token == '#', na.rm = TRUE)} use #, and sum(languages$line_comment_token == ';', na.rm = TRUE) use ; to define which lines are comments. {format(sum(is.na(languages$line_comment_token)), big.mark = ',')} languages do not have a comment token listed.\")\n\nLet’s add the title, subtitle, and caption to the plot using the labs() function from {ggplot2}: \n\ntext_plot &lt;- basic_plot +\n  labs(\n    title = title,\n    subtitle = subtitle,\n    caption = caption\n  )\ntext_plot\n\n\n\n\n\n\nFigure 1.10: A facetted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol. An unformatted title, subtitle, and caption have been added.\n\n\n\n\nYou’ll notice that the subtitle text runs off the edge of the plot here - we’ll deal with that a little bit later. Let’s first decide on a font to use in the plot. As with choosing colors, when choosing fonts it’s useful to think about choosing a font that fits with the theme. Think about the fonts used in horror films posters. Isn’t it quite different to the font used in marketing childrens’ toys? Since we’re going with a monochrome monitor theme for the colors, we can extend that to the font choice by choosing a monospace font reminiscent of early computers.\nWorking with fonts in R isn’t always easy. When it comes to using a different font for text in R, you can use fonts that come installed with your operating system or download font files from elsewhere and load them into R. An easy way to use external fonts is through the font_add_google() function from {sysfonts} (Qiu and See file AUTHORS for details. 2022). This function allows you to load Google Fonts in R without worrying about downloading or installing font files. You can browse Google Fonts at fonts.google.com. The VT323 and Share Tech Mono fonts both look like they’ll fit in with our theme. The font_add_google() function looks through the Google Fonts database for the specified font name (e.g. \"VT323\") and loads the font files you’ll need. The second argument, family is how we’ll refer to the font when using it to plot in R. By default it’s the same as the name but it’s often useful to change it to something else (e.g. \"vt\"), especially for long font names. \nWe also need to make sure that whichever graphics device we are using, is able to make use of these fonts. This is where the {showtext} package (Qiu and See file AUTHORS for details. 2023) comes in. By running showtext_auto(), this means that the {showtext} package is automatically used to render text. We can also set showtext_opts(dpi = 300) to use fonts in the resolution we plan to save our image in later - see Section 1.4.4 for more details on image resolution. \n\nsysfonts::font_add_google(name = \"VT323\", family = \"vt\")\nsysfonts::font_add_google(name = \"Share Tech Mono\", family = \"share\")\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\n\n\n\n\n\n\n\nTip 1.4: Alternatives to {showtext}\n\n\n\nThere are several alternatives to {showtext} for working with fonts in R. Depending on what you’re creating, you might find one of these works better for you:\n\nThe {ragg} package (Pedersen and Shemanarev 2023) uses a different graphics device, and allows to use any fonts installed on your system. You can usually install additional fonts by downloading the relevant font files, then right clicking and choosing the install option.\nThe {extrafont} package (Chang 2023) which focuses on using TrueType fonts in PDF formats.\n\n\n\nExactly, as we did with colors, we’ll save font names as variables to make it easier to see how our plots look with different fonts. We’ll save two variables: title_font that store the font for the title (and other important elements), and body_font for all other text.\n\nbody_font &lt;- \"share\"\ntitle_font &lt;- \"vt\"\n\nWhen it comes to styling to all of the non-geom elements of your plot (such as the background color, the font family used for the title, or how the caption is aligned) this is handled by the theme() function in {ggplot2}. There are several built-in themes which pre-set some of the arguments such as theme_classic(), theme_minimal(), or theme_gray(). The default theme is theme_gray() - this is where the default gray background comes from. \nNormally, we want the title text to appear larger than other text. Similarly, we might want the axis text to be smaller than other text. In {ggplot2}, all text is defined relative to some baseline text size. If we want to increase (or decrease) the size of all text used in the plot, changing the base_size argument in the built-in themes sets the baseline text size used for all elements. This means you don’t have to individually increase the size of every single text element. Similarly, the base_family changes the default font family used for all (non-geom) text elements.\nHere, we might start with theme_minimal() and set the base_size to 8. This is quite a small font size (smaller than the default size of 11) to make sure the plot fits within the width of the printed version of this book.\nWe can also set the base_family equal to body_font - the variable we defined earlier to store the name of the font we want to use for the text. \n\ntheme_plot1 &lt;- text_plot +\n  theme_minimal(\n    base_size = 8,\n    base_family = body_font\n  )\ntheme_plot1\n\n\n\nA facetted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol. The default font has been changed, and the font made slightly smaller.\n\n\n\n\n1.4.3 Adjusting themes\nWe can make some further adjustments to the styling by editing individual arguments in the theme() function. When editing theme() arguments in {ggplot2}, many arguments are specified as a type of element: element_text(), element_line(), element_rect(), element_grob(), element_render(), or element_blank().\n\n1.4.3.1 Background color\nWe can edit the background color using the panel.background and plot.background arguments. The panel.background refers to the area within the plot e.g. the area that is gray by default. The plot.background refers to area outside of this. Both of these are specified using element_rect() since they are effectively just rectangles. We want to change both the fill (inner color of the rectangle) and color (outline color of the rectangle to our chosen background color.)\n\n1.4.3.2 Grid lines\nGrid lines in {ggplot2} fall into two categories: major and minor. Major grid lines are usually slightly bolder and correspond to the axis text labels. Minor grid lines are usually lighter and unlabelled. They can be controlled using the panel.grid.major and panel.grid.minor arguments, with finer control possible for x- and y-axis gridlines. They are all defined using element_line(). We can change the color of the major x-axis gridlines using the color element. To ensure the bright green color doesn’t become distracting as a background element, we can make it semi-transparent using the alpha() function from {ggplot2} - 0 means fully transparent and 1 means fully opaque. The linewidth controls the width of the lines. We remove all the y-axis grid lines and all minor grid lines by setting both panel.grid.major.y and panel.grid.minor to element_blank() which removes the elements completely. We can also remove all axis ticks using axis.ticks = element_blank().\n\n1.4.3.3 Text elements\nUnfortunately, there is no base_color argument that allows us to change the color of all text elements in the same way as the base_size and base_family arguments. Instead, we need to edit the color of all text elements and change them to the green main_col color. This includes the strip.text (the facet title text) and axis.text (axis value labels), as well as the plot.title, plot.subtitle, and plot.caption. For the x-axis text, we also adjust the vjust argument to move the text slightly higher up closer to the plot area. For the y-axis text, we’ll remove it using element_blank() as well add our own labels later. The family of the title text can also be adjusted to the title_font variable we defined earlier to change the font family. We may also want to make the title font even larger by adjusting the size element. Instead of specifying a number directly in the size argument, we instead use the rel() function. The rel() function defines the font size relative to the base size - meaning that if you change the base size, the title will also rescale accordingly. \n\n1.4.3.4 Margins\nTo add a little bit of space around the outside edge of the plot, we can define the plot.margin argument. This is specified using the margin() function (instead of one of the element_*() functions) which takes four arguments: the top, right, bottom, and left margins. A little bit of trial and error can help you to find values that look good.\n\ntheme_plot1 +\n  theme(\n    # Background color\n    plot.background = element_rect(\n      fill = bg_col,\n      color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col,\n      color = alpha(main_col, 0.5),\n      linewidth = 0.4\n    ),\n    # Grid lines\n    panel.grid.major.x = element_line(\n      color = alpha(main_col, 0.5),\n      linewidth = 0.2\n    ),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.ticks = element_blank(),\n    # Text elements\n    strip.text = element_text(\n      color = main_col\n    ),\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(\n      color = main_col,\n      vjust = 2\n    ),\n    plot.title = element_text(\n      color = main_col,\n      family = title_font,\n      size = rel(2),\n    ),\n    plot.subtitle = element_text(\n      color = main_col,\n      margin = margin(b = 5)\n    ),\n    plot.caption = element_text(\n      color = main_col,\n      margin = margin(b = 5),\n      hjust = 0\n    ),\n    # Margins\n    plot.margin = margin(10, 15, 5, 0)\n  )\n\n\n\n\n\n\nFigure 1.11: A facetted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol, with a dark gray background and green text.\n\n\n\n\nWe also need to deal with the fact that the subtitle text is too long and is running off the side of the page. There are a few options for this:\n\nWe can manually add line breaks by adding in \"\\n\" to the subtitle string where we want the line to break. This is very much a manual approach that requires a lot of trial and error.\nWe can use str_wrap() from {stringr} to split the text with a specified number of characters per line. This still involves a bit of trial and error to find the best line length. It also means you need to re-optimise the line length if you change the text size.\nOne of the best solutions I’ve found is to use element_textbox_simple() from the {ggtext} package (C. O. Wilke and Wiernik 2022). The {ggtext} package provides improved text rendering support for {ggplot2}, including support for using Markdown and HTML text which you’ll see several examples of in later chapters. The element_textbox_simple() function enables you to places text in a box, with word wrapping.\n\n \nWe can replace element_text() with element_textbox_simple() in the theme() argument for plot.subtitle to wrap the subtitle text at any font size:\n\ntheme_plot2 &lt;- theme_plot1 +\n  theme(\n    plot.background = element_rect(\n      fill = bg_col,\n      color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col,\n      color = alpha(main_col, 0.5),\n      linewidth = 0.4\n    ),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_line(\n      color = alpha(main_col, 0.5),\n      linewidth = 0.2\n    ),\n    panel.grid.major.y = element_blank(),\n    strip.text = element_text(\n      color = main_col\n    ),\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(\n      color = main_col,\n      vjust = 2\n    ),\n    plot.title = element_text(\n      color = main_col,\n      family = title_font,\n      size = rel(2)\n    ),\n    plot.subtitle = ggtext::element_textbox_simple(\n      color = main_col,\n      margin = margin(b = 5),\n      lineheight = 0.5\n    ),\n    plot.caption = element_text(\n      color = main_col,\n      margin = margin(b = 5),\n      hjust = 0\n    ),\n    axis.ticks = element_blank(),\n    plot.margin = margin(10, 15, 5, 0)\n  )\ntheme_plot2\n\n\n\n\n\n\nFigure 1.12: A facetted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol. The subtitle text now wraps to the width of the page.\n\n\n\n\nFinally, since we’ve removed the y-axis labels, we need to add in some labels using geom_text(). The geom_text() function has three required aesthetics: the x and y co-ordinates of where the label should be placed, and label which defines what text is written. Here, we use the language title as the label, and put a label in each rank category, n, on the y-axis. We override the x aesthetic to place all labels in the same horizontal alignment - the exact value will take a little bit of trial and error to get right.\nWe also need to edit the appearance of the text, since its styling is separate from the theme elements. We pass out body_font variable into the family argument to set the font family for the labels, and set hjust = 0 to left-align the text. The size and color arguments can also be adjusted.\n\n\n\n\n\n\nTip 1.5: Default font sizes in geom_text()\n\n\n\nThe default font size of geom_text() is 3.88. This is slightly confusing because the size in geom_text() is defined in mm whereas the size in theme() elements is defined in pt. To match the font size in geom_text() to the theme’s font size, specify size.unit = \"pt\" in geom_text(). This argument is available from version 3.5.0 of {ggplot2}.\n\n\n\ntheme_plot2 +\n  geom_text(\n    mapping = aes(x = 1932, y = n, label = title),\n    family = body_font,\n    hjust = 0,\n    size = 3,\n    color = main_col\n  )\n\n\n\n\n\n\nFigure 1.13: A facetted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol, with labels added to denote the langauge.\n\n\n\n\nAlthough these labels are an improvement on not having any language label, they’re still not as informative as they could be. There’s no information about the overall rank included in the plot. There’s no way to tell if the top ranked language that uses # as a comment symbol is also the top ranked language overall or ranked as low as 1000! Let’s create a more informative label using the {glue} package again. We can create a new rank_label column using mutate() which combines the language name from the title column, the text \"Rank:, and the rank from the language_rank column. The \\n adds a line break between the language name and rank text. \n\nplot_data &lt;- plot_data |&gt;\n  dplyr::mutate(\n    rank_label = glue::glue(\"{title}\\nRank: {language_rank}\")\n  )\n\nLet’s add these new and improved labels to our plot using geom_text(). Note that since we’ve updated the plot_data object, we need to pass the data in again: \n\ntheme_plot2 +\n  geom_text(\n    data = plot_data,\n    mapping = aes(x = 1932, y = n, label = rank_label),\n    family = body_font,\n    vjust = 0.5,\n    lineheight = 0.7,\n    hjust = 0,\n    size = 2.5,\n    color = main_col\n  )\n\n\n\n\n\n\nFigure 1.14: A facetted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol, with labels added to denote the langauge and rank.\n\n\n\n\nAnd we’re finished!\n\n1.4.4 Saving to an image file\nThere are many different options available for saving plots created with R to a file you can later use in presentations, on social media, in publications, or anywhere else you might need to: \n\nYou can use the interactive interface in RStudio by going to the Plots tab, then clicking Export and Save as Image. This creates a pop-up window where you can choose your desired file type, set the size, and choose a location to save the file in. However, this approach doesn’t allow you to set the resolution (image quality) of the file you save.\nThe base R {grDevices} package provides several functions for saving to different file types. For example, the png() function enables you to save PNG files with a specific height, width, and resolution. You can also set other arguments such as the background color in the png() function. The {ragg} package (Pedersen and Shemanarev 2023) provides a similar set of functions. For example, the agg_png() function.\nIf you are using {ggplot2} to create your plots, the ggsave() function is the easiest way to save your visualizations to a file. As detailed in the help file it defaults to saving the last plot that you displayed, using the size of the current graphics device. It also guesses the type of graphics device from the extension.\n\n\nI would always recommend saving your images in a specific size, rather than using the size of the current graphics device in RStudio - it makes it much easier to reproduce the same image again!\nYou can set the width and height in ggsave(): \n\nggsave(\"plot_file.png\", width = 6, height = 4)\n\nBy default, the width and height is given in inches (though you can change this with the unit argument) and the resolution (set with the dpi argument) is 300. If you’ve saved your final plot to a variable in R, you can pass this directly to ggsave() instead of printing the object first:\n\nggsave(\"plot_file.png\", final_plot, width = 6, height = 4)\n\nIf you’re creating plots with other R packages, some of those packages will also come with their own built-in save functions.\nIf you’re saving images at a different size or resolution (e.g. 300 dpi) to the resolution that you preview images in (e.g. 96 dpi), then your saved image might not look quite how you expect. The lines and text might appear much thinner or thicker than you expect. The scale argument in ggsave() or the scaling argument in the {ragg} family of functions is one option for dealing with this. These arguments apply a scaling factor to line and text sizes allowing you to scale up (or down) your plot if it appears too small (or large) at your desired size and resolution. An even easier way to deal with this problem is to make sure you are previewing your plot at the same size and resolution as you’d like your final image to be. The {camcorder} (Hughes 2022a) package provides a solution to this issue, and you can read more about how to use it in Chapter 14.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Programming Languages: dumbbell charts with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "programming-languages.html#reflection",
    "href": "programming-languages.html#reflection",
    "title": "1  Programming Languages: dumbbell charts with {ggplot2}",
    "section": "\n1.5 Reflection",
    "text": "1.5 Reflection\nEven though we’re essentially finished with this visualization, it’s useful to get some feedback on how effective it is. You could share your visualization with a colleague or friend and ask for them to critique it. Alternatively, you can reflect on your own work with a critical eye. Reflecting on your own work is often more successful if you leave your visualization alone for a little while first. When you come back to it, think about whether your choice of plot was the best one, whether the fonts need re-sizing, or if you should use a different color scheme. So, which elements of this visualization could still be improved?\nThere are two immediate aspects that jump out:\n\nWhen using dumbbell charts to show timeframes like this, the dots at each end are often taken as start and end time points. In this chart, that doesn’t quite make sense. Imagine a programming language that was last active twenty years ago and is officially no longer maintained. Then imagine a different language that was last updated last week. The end time point (showing last_activity) is represented the same way in these two cases. Using an open-ended dumbbell for languages that are still actively being maintained might be more representative of what’s actually happening in the data.\nThe labels showing the name and rank of the programming languages are a little bit hard to read. Each label isn’t distinct enough from the labels above or below it. One option would be to change the size of the image - making the image taller would allow more space between each label. A second option would be to make the language name a slightly larger bold font, with the rank in a slightly smaller font below. This would make it clearer that there are ten labels rather than 20! We’ll discuss how to add more complex formatting to text labels in Chapter 5, using the {ggtext} package.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Programming Languages: dumbbell charts with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "programming-languages.html#the-making-of",
    "href": "programming-languages.html#the-making-of",
    "title": "1  Programming Languages: dumbbell charts with {ggplot2}",
    "section": "\n1.6 The making of…",
    "text": "1.6 The making of…\nEach plot created during the process of developing the original version of this visualization was captured using {camcorder}, and is shown in the gif below. If you’d like to learn more about how {camcorder} can be used in the data visualization process, see Section 14.1.\n\n\n\n\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Programming Languages: dumbbell charts with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "uk-museums.html",
    "href": "uk-museums.html",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "",
    "text": "2.1 Data\nThe Mapping Museums project (Mapping Museums 2021) has collected data relating to over 4,000 museums in the UK, covering museums from 1960 onward. The data can be downloaded from the Mapping Museums website at museweb.dcs.bbk.ac.uk. It was also used as a #TidyTuesday (R4DS Online Learning Community 2023) data set in November 2022, and we’ll use that version for this chapter.\nLet’s start by reading in the data using the tidytuesdayR R package (Hughes 2022b) and looking at the definitions of the variables:\ntuesdata &lt;- tidytuesdayR::tt_load(\"2022-11-22\")\nmuseums &lt;- tuesdata$museums\nThe data contains information for 35 different variables on 4191 museums. After the first museum_id columns, the next 8 columns provide information on the location of the museum - including address and co-ordinates. The next set of columns provides information about the museums such as whether it’s an accredited museum, how it’s governed, what types of items it has, and when it was open. Since this is a collated data set, information is also provided on the original source of the data for some of these variables. The remaining columns provide information on the area in which the museum is located, including information about different deprivation indices and geo-demographic group (type of area e.g. \"University Towns and Cities\"). A full glossary of the terms used can be found on the Mapping Museums website at museweb.dcs.bbk.ac.uk/glossary.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "uk-museums.html#exploratory-work",
    "href": "uk-museums.html#exploratory-work",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "\n2.2 Exploratory work",
    "text": "2.2 Exploratory work\nLet’s start exploring what these variables look like!\n\n\n\n\n\n\nTip 2.1: Inspecting data\n\n\n\nRemember that you can use View(museums) to inspect the data in a more human-readable format.\n\n\n\n2.2.1 Data exploration\nThere are many different aspects of this data we could inspect:\n\nHow are museums spread out across the UK? Is there a higher concentration of museums in more affluent areas?\nWhat types of museums are most prevalent in the UK? Does this vary based on whether the museum is accredited?\nHow is the number of open museums changing over time? Are more museums opening than closing?\n\nSome of the variables, such as DOMUS_Subject_Matter have quite a lot of missing values which makes it more difficult to visualise and interpret them. Although these columns definitely warrant further exploration, we’ll ignore them for now.\nGiven the wealth of information around deprivation indices (8 different variables), that’s the first aspect of the data that jumps out. How does the number of museums vary by index of deprivation?\n\nbarplot(\n  table(museums$Area_Deprivation_index),\n  cex.axis = 0.5,\n  cex.names = 0.5\n)\n\n\n\n\n\n\nFigure 2.1: Bar chart of number of museums per level of deprivation, with higher numbers of museums shown in levels 5 and 6.\n\n\n\n\nHere, 1 is the most deprived, and 10 is the least deprived. This is quite an interesting relationship - there have been more museums in places with a moderate level of deprivation compared to higher or lower level. This might feel a little bit counter-intuitive, we might expect there to be more museums in more affluent areas. But looking at the total number of museums in the data per index of deprivation doesn’t tell us the whole story. How many of these museums were open at once? How many are still open today?\nTo get a better understanding of the relationship between deprivation and the number of museums, we could look at how the number of museums changed for each index of deprivation has changed since 1960 (the earliest date in the data set). Then we might be able to tell whether more are opening or closing, and how this varies across the different levels of deprivation.\n\n2.2.2 Exploratory sketches\nWe have 10 deciles of deprivation, so we’ll have 10 time series that we want to plot that show the number of museums over time. There are different options for plotting time series like this. We need to think about some different choices:\n\nWhat type of geometry will we use? Lines, points, shaded areas? Lines are the most common approach for time series data.\nDo we plot all 10 lines on the same chart and use color to denote the different levels of deprivation?\nOr do we use faceting to split it into multiple smaller plots by deprivation index?\n\nIf we go with line charts, and faceting by deprivation index, that might look something like this:\n\n\n\n\n\nFigure 2.2: Initial sketch of a faceted line chart showing change over time for each level of deprivation.\n\n\nWe could achieve something this type of plot using geom_line() and facet_wrap() from {ggplot2} . We’ve talked about faceting before in Chapter 1 but we haven’t really thought much about the layouts of those facets. In Chapter 1, we used faceting with only 3 categories, where the layout choice is fairly obvious: either one column or one row. Here, we have a little bit more flexibility and we might want to think about controlling that layout.\nIf we leave it to the default options, {ggplot2} usually tries to coerce it into something square-ish. Here, it would likely give us a 3x4 grid filled with 10 plots (for the 10 levels of deprivation) and 2 blank spaces. It’s not always possible, but plots without those blank spaces often look a lot cleaner and tidier. We could do either a 5x2 (or 2x5) grid, or a 10x1 (or 1x10) grid to fit our small multiple plots into a perfect rectangle. A 5x2 grid works better here since we don’t want to make a very wide but very short plot.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "uk-museums.html#preparing-a-plot",
    "href": "uk-museums.html#preparing-a-plot",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "\n2.3 Preparing a plot",
    "text": "2.3 Preparing a plot\nSo let’s get started on preparing the data to create this plot!\n\n2.3.1 Data wrangling\nThis is one of those very real datasets - the data wrangling is not straightforward for the data. In fact, the two columns relating to opening and closing dates are the two that will require the most attention.\nFirst, let’s drop any columns that we don’t actually need using the select() function from {dplyr} - we only need the Year_opened, Year_closed, and Area_Deprivation_index columns to calculate the number of museums open each year. There are a few NA values in the Area_Deprivation_index column so we’ll drop those rows using drop_na() from {tidyr}.\nNow let’s start dealing with the year columns. If you look at the values, you’ll notice that they’re not exactly what you’d expect in a year column:\n\nhead(museums$Year_opened, 4)\n\n[1] \"2012:2012\" \"1971:1971\" \"1984:1984\"\n[4] \"1971:1971\"\n\nhead(museums$Year_closed, 4)\n\n[1] \"9999:9999\" \"2007:2017\" \"9999:9999\"\n[4] \"2012:2012\"\n\n\nEach entry is in fact two years, separated by a :. According to the Mapping Museums glossary, this is because these are actually date ranges. For some museums, it wasn’t possible to establish an exact opening or closing date, and instead a date range is given based on partial information. For example, a value of \"2007:2017\" means the museum opened (or closed) sometime between 2007 and 2017.\nLet’s separate out these year values into four columns instead of two using the separate_wider_delim() function from {tidyr} . We separate based on the :, and create two new columns, opened1 and opened2 from the Year_opened column. We do the same thing for the Year_closed closed column. We also want to make sure that these new columns are numeric rather than character columns, so we use mutate() and across() from {dplyr} to convert them using as.numeric() . We can also convert the Area_Deprivation_index to a factor rather than a numeric and make sure the order is correct.\n\nmuseum_subset &lt;- museums |&gt;\n  dplyr::select(\n    Year_opened, Year_closed, Area_Deprivation_index\n  ) |&gt;\n  tidyr::drop_na() |&gt;\n  tidyr::separate_wider_delim(\n    Year_opened,\n    delim = \":\",\n    names = c(\"opened1\", \"opened2\")\n  ) |&gt;\n  tidyr::separate_wider_delim(\n    Year_closed,\n    delim = \":\",\n    names = c(\"closed1\", \"closed2\")\n  ) |&gt;\n  dplyr::mutate(\n    dplyr::across(\n      c(opened1, opened2, closed1, closed2), as.numeric\n    ),\n    Area_Deprivation_index = factor(Area_Deprivation_index, levels = 1:10)\n  )\n\n\n\n\n\n\n\nTip 2.2: Using separate() from {tidyr}\n\n\n\nIn older versions of {tidyr} (including when this plot was originally made), the separate() function would have been used instead of separate_wider_delim(). The separate() function has now been superseded. \n\n\nNow we need to think about how to deal with all of these year columns:\n\nIf the date before the : and the date after the : are the same, we want to treat it as an exact year and only keep one value.\nIf the dates do not match, we need to decide a way of choosing which year to use. The simplest approach is to take the midpoint of the date range.\nIf the value in the Year_closed column is \"9999:9999\", this means that the museum is still open.\n\nLet’s start with the last of these issues first. For the closed1 and closed2 columns, if the value is \"9999\", we’ll convert it to an NA_real_ value. We can do this using a combination of mutate(), across(), and if_else() from {dplyr} .\nThe remaining two issues can be dealt with at the same time using case_when() from {dplyr} . We can create a new column called closed which:\n\nif closed1 and closed2 are equal, takes this equal value;\nif closed1 and closed2 are not equal, takes the value in the middle (rounded so that we work only with whole year values).\n\nThe same approach is then applied to create another new column called opened. There are no instances in the data where one of the closing dates is NA but the other is not, so we don’t need to worry about that. We can also tidy up the output by dropping any columns we don’t need, renaming the Area_Deprivation_index to something a little bit shorter and easier to work with, and arranging the data by level of deprivation. \n\nmuseum_data &lt;- museum_subset |&gt;\n  dplyr::mutate(dplyr::across(\n    c(closed1, closed2),\n    ~ dplyr::if_else(.x == 9999, NA_real_, .x)\n  )) |&gt;\n  dplyr::mutate(closed = dplyr::case_when(\n    closed1 == closed2 ~ closed1,\n    closed1 != closed2 ~ round((closed2 + closed1) / 2)\n  )) |&gt;\n  dplyr::mutate(opened = dplyr::case_when(\n    opened1 == opened2 ~ opened1,\n    opened1 != opened2 ~ round((opened2 + opened1) / 2)\n  )) |&gt;\n  dplyr::select(Area_Deprivation_index, opened, closed) |&gt;\n  dplyr::rename(deprivation = Area_Deprivation_index) |&gt;\n  dplyr::arrange(deprivation)\n\nThis gives us data that looks like this:\n\nhead(museum_data)\n\n# A tibble: 6 × 3\n  deprivation opened closed\n  &lt;fct&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 1             1988     NA\n2 1             1984   2007\n3 1             1983     NA\n4 1             1969     NA\n5 1             1989     NA\n6 1             1995     NA\n\n\nThe first entry in museums_data is a museum in the most deprived decile which opened in (approximately) 1988 and is still open.\nWhat we want to know is how many museums were open in a given year for each level of deprivation. Let’s create a function that takes three inputs: a year of interest, a level of deprivation, and the museum_data. Inside the function, we can then filter() the data to only the level of deprivation we’re interested in. Then we can count how many museums opened before or in the year we’re interested in. We can then do the same for how many museums closed (remembering to deal with the NA values for museums that are still open). The difference between the two will be how many were open in that year. \n\nnum_year &lt;- function(year, dep, data = museum_data) {\n  df &lt;- dplyr::filter(data, deprivation == dep)\n  num_open &lt;- sum(df$opened &lt;= year)\n  num_closed &lt;- sum(df$closed &lt;= year, na.rm = TRUE)\n  diff &lt;- num_open - num_closed\n  return(diff)\n}\n\nLet’s test it works:\n\nnum_year(1980, 3)\n\n[1] 186\n\n\nThere were 186 museums open in 1980, in an area in the third deprivation decile. Now, we need to run this function for every combination of year (from 1960 to 2021) and deprivation level (from 1 to 10). There are many different ways of doing this in R, and we’re going to use the {purrr} package (Wickham and Henry 2023). We start by creating two variables with sequences of years and levels of deprivation - this is useful for testing if the code works because we can easily change it to a smaller number of years. Then we use expand.grid to create a data.frame with all of the combinations and pass this in as the first argument to pmap_vec from {purrr}. The second argument to pmap_vec is the function we want to apply (num_year()) that we defined above), where the first argument of num_year() comes from the first column of the grid of values, and the second argument from the second column. We can then convert the output into a matrix where each column is a level of deprivation, and each row is a year. \n\nall_years &lt;- 1960:2021\ndeps &lt;- 1:10\noutput &lt;- purrr::pmap_vec(\n  expand.grid(all_years, deps),\n  ~ num_year(year = .x, dep = .y)\n)\nresults &lt;- matrix(output,\n  nrow = length(all_years),\n  byrow = FALSE\n)\ncolnames(results) &lt;- 1:10\n\nNow, our data looks like this:\n\nhead(results)\n\n       1  2   3   4   5   6   7   8  9\n[1,] 103 78 110 125 125 124 122 110 76\n[2,] 103 78 112 132 125 131 126 113 77\n[3,] 104 78 113 138 129 135 129 117 83\n[4,] 105 79 118 140 136 140 130 123 85\n[5,] 105 79 122 144 139 145 135 126 86\n[6,] 106 80 123 148 143 147 137 128 89\n     10\n[1,] 51\n[2,] 53\n[3,] 58\n[4,] 60\n[5,] 64\n[6,] 67\n\n\nWe’re almost ready to start plotting our data! We just need to convert this into a tibble() (or data.frame), add the year column using mutate(), and put the data into a long format using pivot_longer from {tidyr} . We want to end up with a 3 column data set, where the 3 columns are: year, deprivation, and museums (number of open museums).\n\nplot_data &lt;- results |&gt;\n  tibble::as_tibble() |&gt;\n  dplyr::mutate(year = all_years) |&gt;\n  tidyr::pivot_longer(\n    -year,\n    names_to = \"deprivation\",\n    values_to = \"museums\"\n  ) |&gt;\n  dplyr::mutate(\n    deprivation = factor(deprivation, levels = 1:10)\n  )\n\n\n2.3.2 The first plot\nOne of most common approaches to visualising multiple time series, is to plot multiple lines on the same plot. Although we’re already thinking about facets, it’s still worth seeing what those line charts look like. It can help us to understand the overall variability of the data. We can create the initial plot using ggplot() to define the data and the aesthetic mapping with the aes() function. We have year on the x-axis, museums on the y-axis, and each line will have a different color based on deprivation. The actual lines are then added with geom_line(). \n\nlibrary(ggplot2)\nggplot(\n  data = plot_data,\n  mapping = aes(x = year, y = museums, color = deprivation)\n) +\n  geom_line()\n\n\n\n\n\n\nFigure 2.3: A line chart of total number of museums open per year for each level of deprivation, with the overlapping lines resembling spaghetti!\n\n\n\n\nThere are a few things that jump out immediately about this plot:\n\nThe variability is increasing over time: in 1960 the gap between the highest and lowest values is much smaller than the gap between the highest and lowest values in 2020.\nIt’s difficult to tell which line belongs to which level of deprivation: some of the colors are quite similar, many of the lines intersect, and the order of the legend is generally in reverse to the order of the lines.\nIt’s what we might call a spaghetti plot: it shows the overall trend across all levels, but it’s hard to tell the difference between different levels of deprivation.\n\nLet’s go back to our previous idea, and try separating out the deprivation levels into different facets. We can do this using facet_wrap(~deprivation, nrow = 2) , with the nrow argument used to create that 5x2 grid we talked about earlier. Let’s also try changing geom_line() to geom_area(). Although line charts and area charts can both show the same data, line charts often cause us to focus more on the trend over time. In contrast, area charts often cause us to focus on the total volume over time - helping to highlight differences in total number of open museums over time rather than just increases and decreases. Remember to also change color to fill in the aesthetic mapping! \n\nggplot(\n  data = plot_data,\n  mapping = aes(x = year, y = museums, fill = deprivation)\n) +\n  geom_area() +\n  facet_wrap(~deprivation, nrow = 2)\n\n\n\n\n\n\nFigure 2.4: An area chart of total number of museums open per year for each level of deprivation, with the each deprivation level in a different facet.\n\n\n\n\nThis tells a similar story to the initial bar chart in Figure 2.1 - there are more museums open in the areas with moderate levels of deprivation. This plot still isn’t ideal, for a couple of reasons:\n\nThe number of open museums in 1960 is different in each faceted plot: since they all start at different levels, it makes it more difficult to compare the relative increases or decreases.\nIt’s hard to directly compare one facet to another since each facet only contains one trend line: we have to imagine overlaying the lines in our head to compare one trend line to another.\n\nWe could solve these problems by making two changes:\n\nRescale the data based on the number of museums open in 1960; and\nShow all 10 lines on each faceted plot but highlight only one relating to each level of deprivation.\n\n2.3.3 Highlighting with {gghighlight}\nThe second change can be implemented easily using the {gghighlight} package (Yutani 2023). {gghighlight} is a {ggplot2} extension package, specifically designed for highlighting points and lines based on some conditions. Let’s switch back to geom_line() and add gghighlight::gghighlight(). We set use_direct_label = FALSE because {gghighlight} will otherwise add a label to each highlighted line - unnecessary since each line is labelled by it’s facet label already. \n\nggplot(\n  data = plot_data,\n  mapping = aes(x = year, y = museums, color = deprivation)\n) +\n  geom_line() +\n  facet_wrap(~deprivation, nrow = 2) +\n  gghighlight::gghighlight(use_direct_label = FALSE)\n\n\n\n\n\n\nFigure 2.5: A line chart of total number of museums open per year for each level of deprivation, with the each deprivation level in a different facet and individual lines highlighted.\n\n\n\n\nWe can also perform an additional bit of data wrangling to rescale the values by their 1960 levels. We start by filtering the data to only include data from the year 1960 and keeping only the deprivation and museums columns . Then, we join this baseline data back to our original data based on the deprivation level, and for each year calculate the percentage change since 1960 and save it in a new column called change. \n\nlookup &lt;- plot_data |&gt;\n  dplyr::filter(year == 1960) |&gt;\n  dplyr::select(deprivation, museums)\n\nnew_plot_data &lt;- plot_data |&gt;\n  dplyr::left_join(lookup, by = \"deprivation\") |&gt;\n  dplyr::rename(\n    museums = museums.x,\n    museums_1960 = museums.y\n  ) |&gt;\n  dplyr::mutate(\n    change = (100 * (museums - museums_1960) / museums_1960)\n  ) |&gt;\n  dplyr::select(year, deprivation, change)\n\nWe can then re-do our line chart using the rescaled change data on the y-axis instead:\n\nbase_plot &lt;- ggplot(\n  data = new_plot_data,\n  mapping = aes(x = year, y = change, color = deprivation)\n) +\n  geom_line() +\n  facet_wrap(~deprivation, nrow = 2) +\n  gghighlight::gghighlight(use_direct_label = FALSE)\nbase_plot\n\n\n\n\n\n\nFigure 2.6: A line chart of percentage increase in museums (compared to 1960) for each level of deprivation, with the each deprivation level in a different facet and individual lines highlighted.\n\n\n\n\nThis is starting to look promising, but there are still ways that we can style our chart to improve it.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "uk-museums.html#advanced-styling",
    "href": "uk-museums.html#advanced-styling",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "\n2.4 Advanced styling",
    "text": "2.4 Advanced styling\nSo what can we do to make this chart better?\n\nWe can get rid of the legend. The colors are based on the levels of deprivation, which are already labelled on the facet titles.\nThe default choice of color isn’t great - they’re not grayscale printing friendly, and they’re not colorblind friendly either.\nIt’s not immediately clear what this chart shows: it could do with some text to explain what’s going on.\n\n\n2.4.1 Colors\nLet’s get started with choosing some colors. As discussed in Chapter 1, we’ll save color codes as variables: either using hex codes or color names. Let’s use \"black\" for text, and \"#fafafa\" for the background color. The use of a light gray rather than white for the background is primarily personal preference - it’s less glaringly bright on a screen. Although, you do have to be a bit more careful around contrast of text against the background - hence the black text.\n\nbg_col &lt;- \"#fafafa\"\ntext_col &lt;- \"black\"\n\nFor the colors of the lines, we can use the {viridis} package (Garnier et al. 2024). The {viridis} package provides multiple different color palettes which are designed to be visually pleasing, perceptually-uniform ,and colorblind friendly. The default viridis palette includes purples, blues, greens, then yellows. Viridis color palettes are most commonly used with continuous data, rather than categorical data. However, since the categories that we wish to color (levels of deprivation) are ordered, they will work well here too. The {viridis} package includes functions to add the colors to plots made with {ggplot2}. Here, we use the scale_color_viridis() function, specify that we want a discrete palette and that the lowest values should have the yellow colors with direction = -1 .\n\ncol_plot &lt;- base_plot +\n  viridis::scale_color_viridis(discrete = TRUE, direction = -1)\ncol_plot\n\n\n\n\n\n\nFigure 2.7: An updated version of the previous chart with colors chosen from the {viridis} R package.\n\n\n\n\n\n2.4.2 Text and fonts\nLet’s start by loading in a different font using font_add_google() from {sysfonts} and setting font options with {showtext} . The Raleway font is a minimalist, sans serif font, and we’ll use it for both body text and title text. We can save it as a single variable, body_font.\n\nsysfonts::font_add_google(\"Raleway\", \"raleway\")\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font &lt;- \"raleway\"\n\nWe also need to define a title, subtitle, and caption. Adding a question as a title can help guide readers towards what you want them to see, but also force them to look for themselves. Here, we ask Are there fewer museums opening in more deprived areas? in the title - telling readers to look at changes across the levels of deprivation, but not giving them the answer straight away.\nThe subtitle then goes onto explain what the answer is, and exactly what is shown in the chart. The caption is more extended here than you may see in many charts because it explains more about the source of the data and what the variables actually are. Understanding definitions of variables isn’t something we should ever take for granted. Unless you are already familiar with indices of deprivation, it may not be clear that 1 means higher levels of deprivation.\n\ntitle &lt;- \"Are there fewer museums opening in more deprived areas?\"\nst &lt;- \"The change in the estimated number of open museums since 1960 is significantly lower in areas with higher levels of deprivation. *Since around 2000, the number of open museums has stagnated across all areas, regardless of deprivation index. However, the rate of growth prior to this stagnation is lower in more deprived areas.\"\ncap &lt;- \"*The Index of Multiple Deprivation (IMD) measures the relative deprivation of geographic areas in the UK, aggregating different dimensions (income, employment, education, health, crime, housing, and living environment). The index ranges from 1 (most deprived) to 10 (least deprived).&lt;br&gt;&lt;br&gt;**In some instances it has been impossible to establish an exact opening or closing date for a museum. In these cases, museums’ opening and closing dates are taken to be the mid point of a specified range of possible dates.&lt;br&gt;&lt;br&gt;N. Rennie | Data: museweb.dcs.bbk.ac.uk\"\n\n\n\n\n\n\n\nTip 2.3: Adding line breaks using &lt;br&gt;\n\n\n\nThe caption includes HTML line breaks, &lt;br&gt;, since we’ll be using element_textbox_simple() from {ggtext} for processing the text elements as we’ve done in previous chapters. \n\n\nLet’s add the title, subtitle, caption, and a y-axis label in using the labs() function. We can also remove the default column name label on the x-axis as it’s very clear that the x-axis shows years. \n\ntext_plot &lt;- col_plot +\n  labs(\n    title = title, subtitle = st, caption = cap,\n    x = \"\",\n    y = \"% change in estimated number of\\nopen museums since 1960**\"\n  )\n\n\n2.4.3 Adjusting themes\nNow we need to edit the theme() elements to apply the text fonts and styles, edit the background colors, and remove the legend. \nIn {ggplot2}, the axis limits are chosen automatically based on the range of the data. It’s often useful to chose limits (and breaks) that are nice - it makes it easier to calculate where other values are. We can set scale_y_continuous(limits = c(0, 300)) to make the range of the y-axis between 0 and 300. We can also set coord_cartesian(expand = FALSE) to remove the extra space around the plot area that is added by default - giving a slightly cleaner look. Using theme_minimal() as a base, we can set the default font size and family using base_size = 7 and base_family = body_font. \nSetting legend.position = \"none\" removes the legend on the right hand side. The plot.title.position = \"plot\" and plot.caption.position = \"plot\" arguments make sure that the title, subtitle, and caption text are all aligned with the left side of the plot area. The default is to align with the edge of the panel area (the area shaded grey by default), which doesn’t look good when you have long axis labels, or a multi-line axis title on the y-axis.\nThe panel.spacing argument controls how close the facets are to each other - this can help to stop the year labels on side-by-side plots from overlapping. Setting plot.margin = margin(10, 15, 10, 10) adds some extra space around the outside of the plot, with the higher value on the right hand side compensating and balancing out the space from the axis title on the left hand side. The plot.background and panel.background arguments set the background color of the plot and panel areas to be the bg_col variable previously defined.\nFor the plot.title, plot.subtitle, and plot.caption, arguments, we use element_textbox_simple() from {ggtext} to make sure that any Markdown or HTML syntax is processed, and to automatically wrap the text in the subtitle and caption. The text is all left-aligned, with a lineheight of 0.5, and set to use the text_col variable for the color. The title font is made slightly larger and in bold. The axis.text is also set to be text_col colored with a lineheight of 0.5 using element_text(). \nNow, we have our final plot:\n\nlibrary(ggtext)\ntext_plot +\n  scale_y_continuous(limits = c(0, 300)) +\n  coord_cartesian(expand = FALSE) +\n  theme_minimal(base_size = 7, base_family = body_font) +\n  theme(\n    legend.position = \"none\",\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    panel.spacing = unit(1, \"lines\"),\n    plot.margin = margin(10, 15, 10, 10),\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    plot.title = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5,\n      size = rel(1.2),\n      face = \"bold\",\n      margin = margin(b = 5)\n    ),\n    plot.subtitle = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5\n    ),\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col,\n      lineheight = 0.5\n    ),\n    axis.text = element_text(\n      color = text_col,\n      lineheight = 0.5\n    )\n  )\n\n\n\n\n\n\nFigure 2.8: A styled version of the previous plot - with a custom font, colored background, and better spacing.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "uk-museums.html#reflection",
    "href": "uk-museums.html#reflection",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "\n2.5 Reflection",
    "text": "2.5 Reflection\nIs there anything that could still be improved about this plot? There are two main elements that jump out:\n\nThe axis text denoting the years only appears on the bottom row of faceted plots. This makes it a little bit tricky to see what’s going on in the first row without first looking at the years in the row below. It’s a fairly minor point, but adding year labels to the top row would just make it easier for a reader.\nWe removed the legend from the plot with the reason that the colors are based on the levels of deprivation, which are already labelled on the facet titles. This same argument could be used to remove the colors altogether. There’s no need to use color here to denote the deprivation levels when the deprivation levels are given by the facet titles. Especially since the yellow color is harder to see against the pale background color. Using a stronger color e.g. red for all highlighted lines, would be better for making the lines stand out, and reduce confusion about what the colors mean.\n\nEach plot created during the process of developing the original version of this visualisation was captured using {camcorder}, and is shown in the gif below. If you’d like to learn more about how {camcorder} can be used in the data visualisation process, see Section 14.1.\n\n\n\n\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "lemurs.html",
    "href": "lemurs.html",
    "title": "3  Lemurs: combining plots with {patchwork}",
    "section": "",
    "text": "Caution\n\n\n\nThis chapter is coming soon!\n\n\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Lemurs: combining plots with {patchwork}</span>"
    ]
  },
  {
    "objectID": "canadian-wind-turbines.html",
    "href": "canadian-wind-turbines.html",
    "title": "4  Canadian Wind Turbines: waffle plots, pictograms, and icons",
    "section": "",
    "text": "4.1 Data\nhttps://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070\n(Wickham and Bryan 2023) (Schauberger and Walker 2023)\nwind_turbines &lt;- openxlsx::read.xlsx(\"https://ftp.cartes.canada.ca/pub/nrcan_rncan/Wind-energy_Energie-eolienne/wind_turbines_database/Wind_Turbine_Database_FGP.xlsx\", sheet = 1)\nwrite.csv(wind_turbines, \"data/wind_turbines.csv\", row.names = FALSE)\nwind_turbines &lt;- readr::read_csv(\"data/wind_turbines.csv\")",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Canadian Wind Turbines: waffle plots, pictograms, and icons</span>"
    ]
  },
  {
    "objectID": "canadian-wind-turbines.html#exploratory-work",
    "href": "canadian-wind-turbines.html#exploratory-work",
    "title": "4  Canadian Wind Turbines: waffle plots, pictograms, and icons",
    "section": "\n4.2 Exploratory work",
    "text": "4.2 Exploratory work\n\n4.2.1 Data exploration\n\n4.2.2 Exploratory sketches",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Canadian Wind Turbines: waffle plots, pictograms, and icons</span>"
    ]
  },
  {
    "objectID": "canadian-wind-turbines.html#preparing-a-plot",
    "href": "canadian-wind-turbines.html#preparing-a-plot",
    "title": "4  Canadian Wind Turbines: waffle plots, pictograms, and icons",
    "section": "\n4.3 Preparing a plot",
    "text": "4.3 Preparing a plot\n\n4.3.1 Data wrangling\n\nextract_after_last_slash &lt;- function(texts) {\n  has_slash &lt;- stringr::str_detect(texts, \"/\")\n  extracted &lt;- stringr::str_match(texts, \".*/(.*)$\")[, 2]\n  output &lt;- dplyr::if_else(has_slash, extracted, texts)\n  return(output)\n}\n\n\nturbines_year &lt;- wind_turbines |&gt;\n  dplyr::select(`Province/Territory`, Commissioning.date) |&gt;\n  dplyr::mutate(\n    Year = extract_after_last_slash(Commissioning.date),\n    Year = as.numeric(Year)\n  )\n\n\nplot_data &lt;- turbines_year |&gt;\n  dplyr::filter(Year &gt;= 2001 & Year &lt;= 2020) |&gt;\n  dplyr::mutate(\n    Year_Group = dplyr::case_when(\n      Year %in% seq(2001, 2005) ~ \"2001 - 2005\",\n      Year %in% seq(2006, 2010) ~ \"2006 - 2010\",\n      Year %in% seq(2011, 2015) ~ \"2011 - 2015\",\n      Year %in% seq(2016, 2020) ~ \"2016 - 2020\"\n    )\n  ) |&gt;\n  dplyr::mutate(\n    Year_Group = factor(Year_Group, levels = c(\n      \"2001 - 2005\", \"2006 - 2010\", \"2011 - 2015\", \"2016 - 2020\"\n    ))\n  ) |&gt;\n  dplyr::rename(Area = `Province/Territory`) |&gt;\n  dplyr::mutate(\n    Area = dplyr::case_when(\n      Area %in% c(\n        \"Northwest Territories\",\n        \"Newfoundland and Labrador\",\n        \"Prince Edward Island\",\n        \"New Brunswick\",\n        \"Manitoba\",\n        \"Saskatchewan\"\n      ) ~ \"other\",\n      TRUE ~ Area\n    )\n  ) |&gt;\n  dplyr::count(Area, Year_Group) |&gt;\n  dplyr::mutate(n = round(n / 20)) |&gt;\n  dplyr::filter(n != 0)\n\narea_levels &lt;- c(plot_data |&gt;\n  dplyr::summarise(n = sum(n), .by = Area) |&gt;\n  dplyr::arrange(-n) |&gt;\n  dplyr::filter(Area != \"other\") |&gt;\n  dplyr::pull(Area), \"other\")\nplot_data$Area &lt;- factor(plot_data$Area, levels = area_levels)\n\n\n4.3.2 Packages and functions\nfont awesome ref\nadd instructions about installing system through waffle, where to download\n\nsysfonts::font_add(\n  family = \"Font Awesome 6\",\n  regular = \"fonts/Font-Awesome-6-Free-Solid-900.otf\"\n)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\n\n\n4.3.3 The first plot\n(Rudis and Gandy 2023)\n\nlibrary(ggplot2)\nbase_plot &lt;- ggplot(data = plot_data) +\n  waffle::geom_pictogram(\n    mapping = aes(\n      label = Area,\n      colour = Area,\n      values = n\n    ),\n    flip = TRUE,\n    n_rows = 10,\n    size = 3,\n    family = \"Font Awesome 6\"\n  ) +\n  facet_wrap(~Year_Group, nrow = 1, strip.position = \"bottom\")\nbase_plot\n\n\n\n\n\n\n\nturbine icons not free\n\nicons_plot &lt;- base_plot +\n  waffle::scale_label_pictogram(\n    name = NULL,\n    values = c(\"fan\", \"fan\", \"fan\", \"fan\", \"fan\", \"fan\"),\n    guide = \"none\"\n  )\nicons_plot",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Canadian Wind Turbines: waffle plots, pictograms, and icons</span>"
    ]
  },
  {
    "objectID": "canadian-wind-turbines.html#advanced-styling",
    "href": "canadian-wind-turbines.html#advanced-styling",
    "title": "4  Canadian Wind Turbines: waffle plots, pictograms, and icons",
    "section": "\n4.4 Advanced styling",
    "text": "4.4 Advanced styling\n\n4.4.1 Colors\ncopy bit from r-packages section on racrtocolor\n\nbg_col &lt;- \"#fafafa\"\ntext_col &lt;- \"black\"\ncol_palette &lt;- rcartocolor::carto_pal(length(unique(plot_data$Area)) + 1, \"Vivid\")[1:length(unique(plot_data$Area))]\nnames(col_palette) &lt;- levels(plot_data$Area)\nhighlight_col &lt;- col_palette[1]\n\n\ncol_plot &lt;- icons_plot +\n  scale_color_manual(\n    values = col_palette,\n    guide = \"none\"\n  )\n\n\n4.4.2 Text and fonts\n(Pedersen and Mitáš 2024)\n\ntitle &lt;- \"**Canadian wind turbines are mostly found in Ontario**\"\nst &lt;- glue::glue(\n  \"The Canadian Wind Turbine Database contains the geographic location\n  and key technology details for wind turbines installed in Canada. It includes\n  information about turbines installed in {.[col_palette[[1]]] [names(col_palette)[[1]]]},\n  {.[col_palette[[2]]] [names(col_palette)[[2]]]}, {.[col_palette[[3]]] [names(col_palette)[[3]]]},\n  {.[col_palette[[4]]] [names(col_palette)[[4]]]}, {.[col_palette[[5]]] [names(col_palette)[[5]]]},\n  and {.[col_palette[[6]]] [names(col_palette)[[6]]]} regions.\",\n  .open = \"[\",\n  .close = \"]\"\n)\ncap &lt;- \"**Data**: Natural Resources Canada | **Graphic**: N. Rennie\"\n\n\ntext_plot &lt;- col_plot +\n  labs(\n    title = title,\n    subtitle = st,\n    caption = cap\n  )\ntext_plot\n\n\n\n\n\n\n\n\n4.4.3 Adjusting scales and themes\n\nscale_plot &lt;- text_plot +\n  scale_x_discrete(\n    expand = c(0, 0, 0, 0)\n  ) +\n  scale_y_continuous(\n    labels = function(x) format(x * 10 * 20, big.mark = \",\"),\n    expand = c(0, 0),\n    breaks = c(0, 5, 10, 15, 20),\n    limits = c(0, 20),\n    minor_breaks = NULL\n  ) +\n  coord_fixed()\n\n\nscale_plot +\n  theme_minimal(\n    base_size = 8\n  ) +\n  theme(\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.margin = margin(5, 10, 5, 10),\n    plot.background = element_rect(fill = bg_col, colour = bg_col),\n    panel.background = element_rect(fill = bg_col, colour = bg_col),\n    panel.grid.major = element_line(\n      linewidth = 0.4\n    ),\n    plot.title = marquee::element_marquee(\n      colour = text_col,\n      width = 1,\n      size = 12,\n      margin = margin(b = -10)\n    ),\n    plot.subtitle = marquee::element_marquee(\n      colour = text_col,\n      width = 1,\n      size = 9\n    ),\n    plot.caption = marquee::element_marquee(\n      hjust = 0,\n      lineheight = 0.5,\n      size = 8,\n      margin = margin(t = 5)\n    )\n  )\n\n\n\n\n\n\n\nfix order colors are plotted in",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Canadian Wind Turbines: waffle plots, pictograms, and icons</span>"
    ]
  },
  {
    "objectID": "canadian-wind-turbines.html#reflection",
    "href": "canadian-wind-turbines.html#reflection",
    "title": "4  Canadian Wind Turbines: waffle plots, pictograms, and icons",
    "section": "\n4.5 Reflection",
    "text": "4.5 Reflection\n\nturbines icon\n\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Canadian Wind Turbines: waffle plots, pictograms, and icons</span>"
    ]
  },
  {
    "objectID": "cats.html",
    "href": "cats.html",
    "title": "5  Cats: data-driven annotations with {ggtext}",
    "section": "",
    "text": "Caution\n\n\n\nThis chapter is coming soon!\n\n\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Cats: data-driven annotations with {ggtext}</span>"
    ]
  },
  {
    "objectID": "r-packages.html",
    "href": "r-packages.html",
    "title": "6  R Packages: using images for custom facet labels",
    "section": "",
    "text": "6.1 Data\nIn July 2024, TidyTuesday (R4DS Online Learning Community 2023) featured some examples of using the {funspotr} package (Shalloway 2023) as datasets. The {funspotr} package was designed to help identify which R functions and packages are used in files and projects. Let’s try to identify which R functions and packages have been used in this GitHub repository of TidyTuesday visualisations: github.com/nrennie/tidytuesday.\nLet’s start by getting a list of all the files that exist in the GitHub repository. We can use the list_files_github_repo() function from {funspotr} to get this list of files - specifying which GitHub repository we want the list for (in the form of \"username/repository\"), and which branch of the repository we want to look at. The list_files_github_repo() function returns a data frame with two columns: relative_paths (file path relative to the root of the git repository) and absolute_paths (URL of each file).\nAll of the files in this repository are named and organised based on dates in the following structure: yyyy/yyyy-mm-dd/yyyymmdd.R (Rennie 2023c). Since the code to extract used functions takes a while to run, let’s filter this list of files to only include files dated 2023. We can use str_detect() from {stringr} to find any values in the relative_paths column that contain \"2023\" and then filter() from {dplyr} to keep only those rows.\nfiles_to_check &lt;- funspotr::list_files_github_repo(\n  repo = \"nrennie/tidytuesday\",\n  branch = \"main\"\n) |&gt;\n  dplyr::filter(stringr::str_detect(relative_paths, \"2023\"))\nWe then pass the files_to_check data frame into spot_funs_files() from {funspotr} to get the list of functions and packages uses in each file. Since we want to look at total package use, we set show_each_use = TRUE to make sure that individual rows are returned each time a function is used (rather than just once for an entire file).\nr_funs &lt;- files_to_check |&gt;\n  funspotr::spot_funs_files(\n    show_each_use = TRUE\n  )\nWe then use the unnest_results() function from {funspotr} to get a row in the data for each use of a function. Since the code above takes a while to run, it’s also important that we save the data in a format that means we can use it later (rather than having to re-download it). We’ll save it as a CSV file using write.csv(), choosing an appropriate file name and removing the row names.\nr_pkgs &lt;- rfuns |&gt;\n  funspotr::unnest_results()\nwrite.csv(r_pkgs, \"data/r_pkgs.csv\", row.names = FALSE)\nWe can then read the CSV back in using read_csv() from {readr} (or read.csv() if you prefer!)\nr_pkgs &lt;- readr::read_csv(\"data/r_pkgs.csv\")\nThe r_pkgs data has 4059 rows and 4 columns. The funs column contains names of each function used, and pkgs has the name of the package that function comes from. The remaining two columns are the relative_paths and absolute_paths columns that identify which file the function was found in. Let’s have a quick look at the data using head():\nhead(r_pkgs)\n\n# A tibble: 6 × 4\n  funs            pkgs    relative_paths\n  &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;         \n1 library         base    2023/2023-01-…\n2 library         base    2023/2023-01-…\n3 library         base    2023/2023-01-…\n4 library         base    2023/2023-01-…\n5 font_add_google sysfon… 2023/2023-01-…\n6 font_add_google sysfon… 2023/2023-01-…\n# ℹ 1 more variable:\n#   absolute_paths &lt;chr&gt;",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R Packages: using images for custom facet labels</span>"
    ]
  },
  {
    "objectID": "r-packages.html#exploratory-work",
    "href": "r-packages.html#exploratory-work",
    "title": "6  R Packages: using images for custom facet labels",
    "section": "\n6.2 Exploratory work",
    "text": "6.2 Exploratory work\nThe obvious question to start with here is: which packages are used most often?\n\n6.2.1 Data exploration\nLet’s start by counting the number of package uses with the table() function, and using sort() to arrange packages from least to most used. \nWe can then pass this into the barplot() function to obtain an ordered bar chart of package use - setting horiz = TRUE to make a horizontal bar chart. Since there is a large number of bars, we also adjust the labels to be a little smaller. We can see that ggplot comes out on top, closely followed by base!\n\nAs an aside, this highlights that combining base R and {tidyverse} packages can be incredibly effective since they each have different strengths. There’s no need to choose a side on the base R versus {tidyverse} argument - use both!\n\n\nbarplot(\n  sort(table(r_pkgs$pkgs)),\n  # make labels smaller so they fit on the page\n  cex.axis = 0.5,\n  cex.names = 0.5,\n  las = 1,\n  horiz = TRUE\n)\n\n\n\n\n\n\nFigure 6.1: Ordered bar chart showing the number of times each package was used in 2023. The ‘ggplot2’ package is used most.\n\n\n\n\nOne thing that you may have noticed is that, for some reason, in the data the package is listed as \"ggplot\" rather than \"ggplot2\". So let’s fix that using mutate() and the if_else() function from {dplyr}. We can overwrite the existing pkgs column, where (i) if the value is currently \"ggplot\", we replace it with \"ggplot2\"; (ii) otherwise, we leave the existing value in the pkgs column. \n\nr_pkgs &lt;- r_pkgs |&gt;\n  dplyr::mutate(\n    pkgs = dplyr::if_else(\n      pkgs == \"ggplot\",\n      \"ggplot2\",\n      pkgs\n    )\n  )\n\n\n\n\n\n\n\nTip 6.1: Comparing if_else() and ifelse()\n\n\n\nIf you’ve used the ifelse() function in base R before, you might be wondering why there’s a very similarly named function in {dplyr} and what’s different about it.\nThe main difference is that if_else() is a bit more strict about checking whether you’re doing what you think you’re doing. For example, let’s say we have a vector x of length 4 and we want to replace the values in x that are equal to 0 with something else. If that replacement is of length 3, that doesn’t really make sense. Which value in the vector of length 3 should it use? The if_else() function highlights this issue with an error, the ifelse() function quietly uses the value in the same position.\n\nx &lt;- c(1, 0, 2, 3)\ndplyr::if_else(x == 0, c(4, 5, 3), x)\n\nError in `dplyr::if_else()`:\n! `true` must have size 4, not size 3.\n\nifelse(x == 0, c(4, 5, 3), x)\n\n[1] 1 5 2 3\n\n\nThe if_else() function from {dplyr} also preserves types. If you put a Date into if_else(), then a Date is what comes out. That’s not always true with ifelse(). \n\n\n\n6.2.2 Exploratory sketches\nThere are currently 38 packages listed in the data, many of them with one or two uses. That’s quite a lot of categories to visualize at once, so let’s narrow it down to only the core {tidyverse} packages (Wickham et al. 2019). We could visualise a simple bar chart (or variation of a bar chart) showing how often each core {tidyverse} package was used. But due to the structure of the file names, we also have information about when each package was used. So we could visualize usage over time, for each package.\nFor each package, we could create an area (or line) chart showing usage over time using facets as we did in Chapter 2. This time, the categories don’t really have a natural order, so instead we’ll order the facets from most to least used. It might look something like this:\n\n\n\n\n\nFigure 6.2: Initial sketch of a faceted area charts showing packages use over time\n\n\nOne of the most incredible things about the R community, is our adoration of hex stickers - package logos in the shape of a hexagon. All of the core {tidyverse} packages have their own hex sticker. Rather than simply using the package name as the facet label in our plot, we could replace the labels with images of hex stickers:\n\n\n\n\n\nFigure 6.3: Initial sketch of a faceted area charts showing packages use over time, with hex stickers instead of text labels",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R Packages: using images for custom facet labels</span>"
    ]
  },
  {
    "objectID": "r-packages.html#preparing-a-plot",
    "href": "r-packages.html#preparing-a-plot",
    "title": "6  R Packages: using images for custom facet labels",
    "section": "\n6.3 Preparing a plot",
    "text": "6.3 Preparing a plot\nTo prepare an initial draft of the plot in Figure 6.2, we need to wrangle the following information from the data:\n\nThe date each package use relates to (currently embedded in a file name);\nThe number of package uses per day for each core {tidyverse} package; and\nWhich package was used the most often?\n\n\n6.3.1 Data wrangling\nSince we’re going to focus on the core {tidyverse} packages, let’s start by making a vector of the package names:\n\ncore_tidyverse &lt;- c(\n  \"dplyr\", \"forcats\", \"ggplot2\", \"purrr\",\n  \"readr\", \"stringr\", \"tibble\", \"tidyr\"\n)\n\nWe can then use this vector to filter() the data and keep only rows where the pkgs column has a value in the core_tidyverse vector. \nThe relative_paths are currently of the form \"yyyy/yyyy-mm-dd/yyyymmdd.R\", and we want to extract the date from this file path. There are multiple ways of doing this - the easiest way is to extract the part of the file path that is between the two /. You could use functions from the {stringr} package (Wickham 2023), which is designed for processing character strings. But we can alternatively make use of separate_wider_delim() from {tidyr}. This function allows you to separate a character string in one column, into multiple columns based on some delimiter. In this case, the delimiter will be /. By default, this will create three new columns for each section of the string: yyyy, yyyy-mm-dd, and yyyymmdd.R. We only want to keep the middle one, so we can use the trick of setting the names of columns we don’t want to keep to NA. Instead, we’ll create only one new column called date. \nWe also convert the date which is currently still a character string into a date object using mutate() and the ymd() function from {lubridate} (since the dates are specified in year, month, day format). Finally, we count how many observations there are of each package, per date. \n\nr_pkgs_date &lt;- r_pkgs |&gt;\n  dplyr::filter(pkgs %in% core_tidyverse) |&gt;\n  tidyr::separate_wider_delim(\n    relative_paths,\n    delim = \"/\",\n    names = c(NA, \"date\", NA)\n  ) |&gt;\n  dplyr::mutate(date = lubridate::ymd(date)) |&gt;\n  dplyr::count(date, pkgs)\n\nWe want the facets in our plot to be ordered from most to least used package. so let’s calculate the total number of uses for each package. Here, we can use the summarise() function in {dplyr}, to add up the values in the n column, split by pkgs. Here, we’re using the .by argument in summarise() but you could alternatively use group_by(pkgs) instead. We then arrange the rows of the data based on the updated summary n column. By default arrange() sorts in ascending order, so to sort in descending order we simply sort by -n instead. You could alternatively use dplyr::desc(n). Finally, we extract the pkgs column as a vector using pull() from {dplyr}. \n\npkgs_ordered &lt;- r_pkgs_date |&gt;\n  dplyr::summarise(n = sum(n), .by = pkgs) |&gt;\n  dplyr::arrange(-n) |&gt;\n  dplyr::pull(pkgs)\npkgs_ordered\n\n[1] \"ggplot2\" \"dplyr\"   \"readr\"  \n[4] \"stringr\" \"tidyr\"   \"purrr\"  \n[7] \"forcats\"\n\n\nWhat might strike you about this vector of ordered packages is that there are only 7 packages listed. If you look closely, you’ll notice that \"tibble\" is missing. It’s missing because it’s never been used directly - that’s not that surprising, since it’s often used in the background of the other {tidyverse} packages. The question now is, should it still be included in the chart? Sometimes, it’s important to visualise zeroes. So how do we add it tibble into the data?\nThe first thing we want to do is include it in the ordered list of packages that we’ll later use to define a factor level. Since it’s only one package, we could just manually add it to the end of the vector with c(pkgs_ordered, \"tibble\"). However, this isn’t a very robust solution. If we had data for a different year and wanted to repeat this analysis, this code wouldn’t work if \"tibble\" wasn’t missing, or if another package was missing.\nLet’s find a generalisable way to figure out which core {tidyverse} packages are not included in the pkgs_ordered vector. We can use the setdiff() function from base R here. Running setdiff(x, y) tells you which elements of x are not in y (so it’s important to get the choices of x and y the right way around).\nThe difference in the two vectors (in this case \"tibble\") can then be appended to the end of the pkgs_ordered vector, to create a complete list of packages in order from most to least used, including zero usage:\n\npkgs_levels &lt;- c(\n  pkgs_ordered,\n  setdiff(core_tidyverse, pkgs_ordered)\n)\n\nThen, we use mutate() to convert the pkgs column of our data from a character string to a factor (ordered category) and set he levels equal to our new pkgs_levels vector: \n\nplot_data &lt;- r_pkgs_date |&gt;\n  dplyr::mutate(\n    pkgs = factor(pkgs, levels = pkgs_levels)\n  )\n\nNow we’re ready to create a first draft of Figure 6.2!\n\n6.3.2 The first plot\nWe start our plot by passing plot_data into ggplot() to use this data as the base for all elements in the plot. We then add geom_area() to create the geometry for the area chart, specifying the aesthetic mapping using aes() again. We put the date on the x-axis, n on the y-axis. and set the fill color of the area chart based on the category in pkgs. This is very similar to the initial plots created in Chapter 2. \nWe then add facet_wrap() to create small multiple plots, split by pkgs. We want our facet plots all in one line rather than arranged as a grid, so we set nrow = 1 inside facet_wrap(). Although \"tibble\" is a level in our pkgs factor column, no observations of that factor level exist. To make sure it still appears as an (empty) facet, we set drop = FALSE. Otherwise, only 7 faceted plots would be shown. \n\nlibrary(ggplot2)\nbase_plot &lt;- ggplot(plot_data) +\n  geom_area(\n    mapping = aes(\n      x = date,\n      y = n,\n      fill = pkgs\n    )\n  ) +\n  facet_wrap(~pkgs, nrow = 1, drop = FALSE)\nbase_plot\n\nWarning in min(diff(unique_loc)): no\nnon-missing arguments to min; returning\nInf\n\n\n\n\n\n\n\nFigure 6.4: Faceted area charts showing package use over time for each of the 8 core {tidyverse} packages, with facets ordered from most to least use. The ordering doesn’t quite look correct.\n\n\n\n\nYou might notice two things here:\n\nalongside the plot, a (slightly confusing) warning message is returned;\nthe ordering of the plot doesn’t look quite right.\n\nYou might also notice the large spike in the {ggplot2} facet which shows 141 uses of the {ggplot2} package in a single script and wonder if this is an error. It’s not an error - it was actually used that many times!\nLet’s start by thinking about the second one of these issues and see if we can figure out what’s happening. We’ve specified that the facets should be ordered from most to least used in total. But the area for the {stringr} package looks much larger than the area for the {readr} package - even though it should be smaller. It also looks as though there are no values in the {forcats} facet - but we know this isn’t true for {forcats}, only for {tibble}. Why is this happening?\nThe problem is that 0 is not included in the data. The areas are being drawn between only the strictly positive values, never going back down to 0. For packages that are used a lot but only in a few scripts, this makes their area larger than packages that are used once or twice in many scripts.\nIn our data set, if a package isn’t used in a script, there is no entry in the data. This makes sense since there are tens of thousands of packages and it would be much more difficult and time consuming to list every package that isn’t used, rather than just those that are. But in our case, these missing, unobserved values aren’t really missing values - they are 0 values.\nThe warning message returned from the plot is also trying to tell us about this problem (the warning just isn’t very clear!)\n\n\n\n\n\n\nTip 6.2: Don’t ignore the warning signs!\n\n\n\nThis is it a zero or is it missing? question has highlighted a few important aspects of plotting charts and data processing:\n\nDon’t simply ignore warning messages if you don’t understand them. It might be tempting to ignore the warning message because you ended up with a plot that looks kind of like what you expected, and the warning message isn’t very clear about what’s wrong. But here, the warning was telling us that something was wrong with our assumptions about the data.\nOrdering your data (sensibly) can help you to spot issues. If the facets hadn’t been ordered, it would have been harder to recognize that some area were overestimated, and some were underestimated.\nSometimes missing values are explicitly represented as NA values (or something else), and other times missing values are simply rows that do not exist in the data. We often think about missing values more when we see them as NA values. But just because you have no NA values in your data, doesn’t mean that you don’t have any missing values.\nWhen you have missing values (whether explicit or implicit), it’s important to think about why they are missing and whether they are really missing. Does a missing values mean 0? Or does it mean it’s actually missing? Or does it mean something else entirely? It’s important to understand the process of data collection to answer this question correctly.\n\n\n\nLet’s go ahead and add in zeros where they should be. We know that the date and pkgs columns are complete: there are no missing values in the date column and we’ve already addressed the issue with the missing \"tibble\" values. We need to make sure that every possible combination of date and pkgs exists in the data: any that do not already exist should be added and given a value of 0 in the n column.\nWe can use the complete() function from {tidyr} to complete the data. We pass in the date and pkgs columns to say which combinations of columns we need to make sure exist. By default, missing combinations are represented by NA, but we can override the fill argument to use 0 instead. \n\nnew_plot_data &lt;- plot_data |&gt;\n  tidyr::complete(\n    date, pkgs,\n    fill = list(n = 0)\n  )\n\nLet’s take a quick look at our updated data using head() to make sure this has worked: \n\nhead(new_plot_data, n = 8)\n\n# A tibble: 8 × 3\n  date       pkgs        n\n  &lt;date&gt;     &lt;fct&gt;   &lt;int&gt;\n1 2023-01-03 ggplot2    24\n2 2023-01-03 dplyr       9\n3 2023-01-03 readr       2\n4 2023-01-03 stringr     0\n5 2023-01-03 tidyr       3\n6 2023-01-03 purrr       0\n7 2023-01-03 forcats     0\n8 2023-01-03 tibble      0\n\n\nWe can see that there are now quite a few 0 values included in the n column. Notice that \"tibble\" is now explicitly included as well, with 0 in the n column for all observations. This is because, by default, complete() uses all levels of the factor even if they aren’t observed in the data.\nNow we need to update the data that is used in our base_plot. We could simply edit (or copy and paste) the code from above and substitute plot_data for new_plot_data. But we can alternatively use the %+% operator.\nThe %+% operator allows you to replace the current default data frame on an existing plot. We start with our existing base_plot, and then use %+% to set new_plot_data as the data used in the plot.\n\nbase_plot &lt;- base_plot %+% new_plot_data\nbase_plot\n\n\n\n\n\n\nFigure 6.5: Faceted area charts showing package use over time for each of the 8 core {tidyverse} packages, with facets ordered from most to least use. The ordering now looks correct.\n\n\n\n\nNotice that the warning message has now disappeared.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R Packages: using images for custom facet labels</span>"
    ]
  },
  {
    "objectID": "r-packages.html#advanced-styling",
    "href": "r-packages.html#advanced-styling",
    "title": "6  R Packages: using images for custom facet labels",
    "section": "\n6.4 Advanced styling",
    "text": "6.4 Advanced styling\nNow that we have a first draft of the plot, it’s time to work on polishing it. We’ll make some adjustments to the colors, fonts, text, scales, and themes - before we move on to editing the facets labels to create a visualisation like Figure 6.3.\n\n6.4.1 Colors\nLet’s go for a dark theme for our plot this time. We’ll choose a dark grey for the background color, and white for the text to ensure sufficient contrast.\n\nbg_col &lt;- \"#3A3B3C\"\ntext_col &lt;- \"white\"\n\nLet’s also define a color palette that we’ll use for the fill color of the area charts. We’re looking for 8 different colors - one for each core {tidyverse} package. The {rcartocolor} (Nowosad 2018) package provides access to the CARTOColors color palettes for maps designed by CARTO (CARTO 2016). Although these palettes were primarily designed for coloring maps, the color palettes are also very effective for other types of graphics.\nIn the {rcartocolor} package, categorical palettes are referred to as qualitative palettes. We can see all available qualitative palettes with a sufficient number of colors using display_carto_all(): \n\nrcartocolor::display_carto_all(\n  n = 8, type = \"qualitative\"\n)\n\n\n\n\n\n\nFigure 6.6: All qualitative color palettes with at least 8 colors in the {rcartocolor} package.\n\n\n\n\nAlthough the {rcartocolor} package has the scale_fill_carto_d() which we could use directly in our plots, we’ll still save the color palette as a vector of hex codes to allow us to re-use the colors more easily. As you can see in Figure 6.6, in the qualitative palettes in the {rcartocolor} package, the last color is often a grey color. That’s a great choice for representing missing data, but when we want different colors for categories it doesn’t work as well. The trick is to ask for one more color than we need, and then throw away the last element in the color palette. We have 8 categories in our plot, so we ask for 9 colors using the carto_pal() function and then extract only the first 8. \nTo keep a more consistent color theme in the plot, we define our highlight color variable, highlight_col, to be the first color in our chosen color palette.\n\ncol_palette &lt;- rcartocolor::carto_pal(9, \"Bold\")[1:8]\nhighlight_col &lt;- col_palette[1]\n\nWe can then pass this col_palette vector into scale_fill_manual() function to apply the colors to our plot: \n\ncol_plot &lt;- base_plot +\n  scale_fill_manual(\n    values = col_palette\n  )\ncol_plot\n\n\n\n\n\n\nFigure 6.7: Faceted area charts showing package use over time for each of the 8 core {tidyverse} packages. Each area chart is colored using a different color from the {rcartocolor} package.\n\n\n\n\n\n6.4.2 Fonts\nSimilar to Chapter 1, since code is the subject of the visualisation, we might want to choose a font that’s consistent with that theme. Here we’ll use Source Code Pro, a monospace font family originally designed specifically for coding environments. It’s loaded into R using font_add_google() from {sysfonts}.\nIn this chapter, we’ll use the same font for the title and body text so we only need to define one variable, body_font. \n\nsysfonts::font_add_google(\n  name = \"Source Code Pro\",\n  family = \"source\"\n)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font &lt;- \"source\"\n\n\n6.4.3 Adding text\nAs we’ve done in previous chapters, we’ll use the social_caption() function we defined in Chapter 5 to create a caption containing Font Awesome icons with social media handles: \n\nsocial &lt;- social_caption(\n  bg_color = bg_col,\n  icon_color = highlight_col,\n  font_color = text_col,\n  font_family = body_font\n)\n\nThe subtitle includes a quote from the {tidyverse} website, so we’ll format it in italics using *. We also use the source_caption() function we defined in Chapter 5 to create a caption with information about the data source, combined with the social icons to attribute the graphic. \n\ntitle &lt;- \"How many times did I use {tidyverse} packages for TidyTuesday?\"\nst &lt;- \"The tidyverse is a collection of open source R packages that *share an underlying design philosophy, grammar, and data structures*. Of the 8 core tidyverse packages, {ggplot2} was my most used package for TidyTuesday visualisations in 2023.\"\nsource_cap &lt;- source_caption(\n  source = \"github.com/nrennie/tidytuesday\",\n  graphic = social\n)\n\nWe also join together the subtitle text with the data and graphic source information using paste0() (although you could use glue() instead). \n\ncap &lt;- paste0(st, \"&lt;br&gt;\", source_cap)\n\nWe can then pass this text into the labs() function to apply it to our plot. We also set x = \"\" to remove the x-axis text, and define a more informative y-axis title. \n\ntext_plot &lt;- col_plot +\n  labs(\n    title = title,\n    subtitle = cap,\n    x = \"\",\n    y = \"Number of package calls\"\n  )\n\n\n\n\n\n\n\nTip 6.3: Removing axis titles\n\n\n\nThere are multiple different ways to remove the axis labels. You can set x = \"\" as we’ve done here, or x = NULL. You can also set axis.text.x = element_blank() inside theme() to remove the text. \n\n\n\n6.4.4 Adjusting scales and themes\nWe can adjust the x- and y- axes labeling to deal with the over-crowding of the labels. By default, labels have been added on each facet, at every three months. Although the data only covers 2023, {ggplot2} also extends the x-axis to cover the beginning of 2024. We can adjust the limits and breaks of the x-axis scale to show only 2023, and have fewer labels. Since the values on the x-axis are dates, we use scale_x_date() to make the adjustments. This also means that the values we pass into the breaks and limits arguments of scale_x_date() should be dates, and so we again make use of ymd() from {lubridate}. We set the x-axis limits to be from January 1 to December 31 of 2023, and add labels on the first of January and July. \nFor the y-axis, we choose nice limits and breaks - setting the limits to between 0 and 150, with breaks every 50. To remove the excess space around the edge of each facet plot, we also set expand = FALSE in coord_cartesian(). \n\nlimits_plot &lt;- text_plot +\n  scale_x_date(\n    limits = lubridate::ymd(c(\"20230101\", \"20231231\")),\n    breaks = lubridate::ymd(c(\"20230101\", \"20230701\")),\n    labels = c(\"Jan\", \"Jul\")\n  ) +\n  scale_y_continuous(\n    limits = c(0, 150),\n    breaks = c(0, 50, 100, 150)\n  ) +\n  coord_cartesian(expand = FALSE)\nlimits_plot\n\n\n\n\n\n\nFigure 6.8: Faceted area charts showing package use over time for each of the 8 core {tidyverse} packages. A title and subtitle has been added but runs of the page. However, the x-axis labels no longer overlap.\n\n\n\n\nLet’s edit the arguments of theme() to finalist out plot. There’s a fairly large number of adjustments to make, so we’ll do them in two stages. \nWe’ll start by setting the default font family and base font size in the text argument through element_text(). We also remove the legend and add a little bit of space around the edges of the plot using the margin() function. \nWe then edit the plot.background and panel.background to have the background color we defined earlier (as bg_col) by using the fill and color arguments in element_rect(). We also do the same for the facet label background which is controlled by the strip.background argument. Although we’re planning to replace the facet labels with images, for now we’ll format them with bold text in our preferred color. The spacing between the facets is controlled by the panel.spacing argument. \n\ninit_theme_plot &lt;- limits_plot +\n  theme(\n    text = element_text(family = body_font, size = 6),\n    legend.position = \"none\",\n    plot.margin = margin(5, 10, 5, 10),\n    # plot background\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    # facet strip text and background\n    strip.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    strip.text = element_text(\n      face = \"bold\",\n      color = text_col\n    ),\n    panel.spacing = unit(0.5, \"lines\")\n  )\n\nOur final adjustments include specifying that we’re using {ggtext} for the title and subtitle to allow the HTML and Markdown text to be processed correctly. We do this by using element_textbox_simple() from {ggtext} in the plot.title and plot.subtitle arguments, where we also set the font color, left-align it, and add a little padding around the edges. The title text is made slightly larger than normal by using the rel() function in size. Setting plot.title.position = \"plot\" means that the title and subtitle text is aligned with the edge of the whole plot, rather than the edge of the first facet plot. This gives a cleaner looker and avoids extra white created due to the width of the y-axis text. \nWe also make sure that the x- and y-axes labels and title are the correct color using element_text(). Finally, the grid lines are made thinner and semi-transparent using the color and linewidth arguments in element_line(). The minor grid lines are made a little bit more transparent than the major grid lines. \n\ntheme_plot &lt;- init_theme_plot +\n  theme(\n    # title and subtitle text\n    plot.title.position = \"plot\",\n    plot.title = ggtext::element_textbox_simple(\n      color = text_col,\n      hjust = 0,\n      halign = 0,\n      margin = margin(b = 5, t = 5),\n      face = \"bold\",\n      size = rel(1.4)\n    ),\n    plot.subtitle = ggtext::element_textbox_simple(\n      color = text_col,\n      hjust = 0,\n      halign = 0,\n      margin = margin(b = 5, t = 0)\n    ),\n    # axes styling and grid lines\n    axis.text = element_text(\n      color = text_col\n    ),\n    axis.title = element_text(\n      color = text_col\n    ),\n    axis.ticks = element_blank(),\n    panel.grid.major = element_line(\n      color = alpha(text_col, 0.3),\n      linewidth = 0.2\n    ),\n    panel.grid.minor = element_line(\n      color = alpha(text_col, 0.1),\n      linewidth = 0.2\n    )\n  )\ntheme_plot\n\n\n\n\n\n\nFigure 6.9: Faceted area charts showing package use over time for each of the 8 core {tidyverse} packages. The plot has a dark background, and white text (which no longer exceeds the plot area).\n\n\n\n\nThis visualisation is perfectly fine as it is, but we can still edit the facet labels to use hex stickers instead of text labels, as we proposed in Figure 6.3.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R Packages: using images for custom facet labels</span>"
    ]
  },
  {
    "objectID": "r-packages.html#using-images-as-facet-labels",
    "href": "r-packages.html#using-images-as-facet-labels",
    "title": "6  R Packages: using images for custom facet labels",
    "section": "\n6.5 Using images as facet labels",
    "text": "6.5 Using images as facet labels\nAs we saw in Chapter 3, packages such as {ggimage} (Yu 2023) can be used to plot images within the plotting area. Here, we want to use images outside of the plotting area in the facet labels. There are several options for overlaying images on existing plots (including outside of the main plot area). The inset_element() function from {patchwork} (Pedersen 2024) can add elements on top of existing plots (we’ll see an example in Chapter 9). Similarly, draw_image() function from {cowplot} (C. O. Wilke 2024) simplifies the process of combining plots and images. However, to edit the facet labels we don’t actually need any additional packages beyond the ones we’ve already used to make the plot.\nWe’ve used the {ggtext} package (C. O. Wilke and Wiernik 2022) many times already to add styling through the use of both Markdown and HTML syntax. For example, we added lines breaks using &lt;br&gt; and colored text using &lt;span&gt;&lt;/span&gt;. The &lt;img&gt; tag is used to add images in HTML. So let’s use that in combination with {ggtext} to format the facet labels!\nBefore we get started, we need to get some images! The hex stickers for many R packages can be found at github.com/rstudio/hex-stickers. For each of the 8 packages included in the plot, we can download the relevant hex sticker and save it somewhere sensible. Here, we’ll save each image as a PNG file and the name of the file is the same as the name of the package e.g. the hex sticker for {dplyr} is saved as dplyr.png (RStudio 2020a). To keep our directories looking clean and tidy, we might choose to save them in a folder. Here, we’ll save them in a nested folder: images/hex/. This means the (relative) file path for our {dplyr} hex sticker is images/hex/dplyr.png. This is what we want to pass in as the image source in the &lt;img&gt; HTML tag for the {dplyr} facet label.\nThis means we need to make two edits to our data:\n\nincluding &lt;img&gt; tags in the pkgs column that is used as the faceting variable.\nincluding &lt;img&gt; tags in the factor levels of the pkgs column to keep the correct ordering.\n\nLet’s start with the factor levels. Currently, the factor levels are just the package names. Luckily, we’ve been smart enough to save the images with the package name as the file name. This means we can use glue() from the {glue} package to stick together the package names with the HTML code. Let’s pass in the pkgs_levels vector we created earlier in to the end of the image file path, to create a new vector for the factor levels: \n\nnew_levels &lt;- glue::glue(\n  \"&lt;img src='images/hex/{pkgs_levels}.png'&gt;\"\n)\n\nWe can also control how the images appear within the &lt;img&gt; tag (to some extent). For example, we can set the width of the image (this will take a little bit of trial and error!). Unfortunately, the hjust and halign arguments don’t seem to fully center the image within the facet label area. Instead, we can use a slightly hacky solution and add some blank space to the left hand side. In HTML, &nbsp; can be used to add a (non-breaking) space. Again, a little bit of trial and error is needed to figure out how many spaces we need to add.\n\nnew_levels &lt;- glue::glue(\n  \"&nbsp;&nbsp;&nbsp;&nbsp;&lt;img src='images/hex/{pkgs_levels}.png' width='20'&gt;\"\n)\n\nNow we need to do the same thing to the pkgs column. It’s important that we overwrite the pkgs column here rather than making an entirely new column. This means that we can use the %+% operator to update the data and {ggplot2} will still be able to find the correct variable to facet by. We again use glue() to add the pkgs column into HTML &lt;img&gt; tags - being very careful to make sure that the new column values match exactly to the factor levels we defined in new_levels. This allows us to then apply these factor levels using mutate() to make sure the ordering of the packages from most to least used in retained. \n\nplot_img_data &lt;- new_plot_data |&gt;\n  dplyr::mutate(\n    pkgs = glue::glue(\"&nbsp;&nbsp;&nbsp;&nbsp;&lt;img src='images/hex/{pkgs}.png' width='20'&gt;\")\n  ) |&gt;\n  dplyr::mutate(\n    pkgs = factor(pkgs, levels = new_levels)\n  )\n\nAs we did earlier, let’s update the data to use our new plot_img_data using the %+% operator:\n\nimg_plot &lt;- theme_plot %+% plot_img_data\n\nWe also need to tell {ggplot2} that the facet labels are using HTML tags, just as we’ve done with the caption. We edit the theme() function further and update the styling for strip.text.x. We again use element_textbox_simple() from {ggtext}, and set hjust and halign both to 0.5. \n\nimg_plot +\n  theme(\n    strip.text.x = ggtext::element_textbox_simple(\n      hjust = 0.5,\n      halign = 0.5\n    )\n  )\n\n\n\n\n\n\nFigure 6.10: Faceted area charts showing package use over time for each of the 8 core {tidyverse} packages. Hex stickers have replaced the text labels on the facets.\n\n\n\n\n\n\n\n\n\n\nTip 6.4: Facet label images using {marquee}\n\n\n\nYou can do a very similar thing using the {marquee} package (Pedersen and Mitáš 2024) instead of {ggtext}. The images can be added to pkgs using standard Markdown syntax instead of HTML tags: \n\nplot_img_data &lt;- new_plot_data |&gt;\n  dplyr::mutate(\n    pkgs = glue::glue(\"![](images/hex/{pkgs}.png)\")\n  )\n\nRemember that you’d also need to update the factor levels and the data used in the plot. You’d then adjust the theme to use element_marquee() to process the Markdown syntax: \n\nimg_plot +\n  theme(\n    strip.text.x = marquee::element_marquee(\n      hjust = 0.5,\n      width = 1\n    )\n  )\n\nHowever, controlling the sizing and placement of the images is (at the time of writing) a little bit more difficult with {marquee}.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R Packages: using images for custom facet labels</span>"
    ]
  },
  {
    "objectID": "r-packages.html#reflection",
    "href": "r-packages.html#reflection",
    "title": "6  R Packages: using images for custom facet labels",
    "section": "\n6.6 Reflection",
    "text": "6.6 Reflection\nOverall, this plot is very effective - it clearly shows the differing levels of R package use whilst still being eye-catching. However, there are still a few improvements that can be made.\n\nOther then for {ggplot2} and {dplyr}, it’s quite hard to read the values as they are very small compared to the height of the y-axis. This is due to the high usage of {ggplot2} on a single occasions. Maybe using a log transformation of the y-axis would make it easier to see the very small values - although log transformations do have their own downsides in terms of interpretability.\nThe use of color could also be improved here. The colors are used to differentiate the different packages, and so don’t provide any further information not already given by the facet labels - similar to Chapter 2. A single color for all area plots would provide the same amount of information, but look a little bit less distracting. If we did still want to use different colors, we may consider matching them more closely to the colors in the hex sticker images. For example, the green in the {stringr} hex sticker image is quite similar to the green used in the {dplyr} area chart - this is currently a little bit distracting.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R Packages: using images for custom facet labels</span>"
    ]
  },
  {
    "objectID": "r-packages.html#the-making-of",
    "href": "r-packages.html#the-making-of",
    "title": "6  R Packages: using images for custom facet labels",
    "section": "\n6.7 The making of…",
    "text": "6.7 The making of…\nEach plot created during the process of developing the original version of this visualisation was captured using {camcorder}, and is shown in the gif below. If you’d like to learn more about how {camcorder} can be used in the data visualisation process, see Section 14.1.\n\n\n\n\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>R Packages: using images for custom facet labels</span>"
    ]
  },
  {
    "objectID": "global-seafood.html",
    "href": "global-seafood.html",
    "title": "7  Global Seafood: adding images, rectangles, and text with {grid}",
    "section": "",
    "text": "Caution\n\n\n\nThis chapter is coming soon!\n\n\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Global Seafood: adding images, rectangles, and text with {grid}</span>"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html",
    "href": "doctors-ageing-population.html",
    "title": "8  Doctors in an Ageing Population: making maps with {ggplot2}",
    "section": "",
    "text": "8.1 Data\nThere’s often a Bring Your Own Data week each year of #TidyTuesday (R4DS Online Learning Community 2023), where participants are encouraged to source their own data. Some use their own data - visualising how many times they’ve gone for a run over the past year, or recreating GitHub contributions graphs. Others choose to find and visualise other sources of data. So where do you find publicly available data?\nThere are many open sources of data, covering a wide range of topics, time frames, and regions across the world. Some government organisations have data portals, some compaies have APIs you can access, some academic papers have accompanying data, or the Google dataset search engine (datasetsearch.research.google.com) might also help you to identify data you’re interested in.\nOne fantastic source of data is the Our World in Data website (ourworldindata.org). The aim of Our World in Data, according to their website, is to publish the research and data to make progress against the world’s largest problems. There are datasets on everything from energy and environment, to poverty and education, to name a few. Their website also has many examples of beautiful, effective data visualisations if you’re ever looking for inspiration.\nFor this chapter, we’ll visualise data on Medical doctors per 1,000 people, a dataset which comes from the Our World in Data website (Our World in Data 2019). You can load the data using the {owidR} R package (York 2023):\nlibrary(owidR)\ndoctors &lt;- owid(\"physicians-per-1000-people\")",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Doctors in an Ageing Population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html#data",
    "href": "doctors-ageing-population.html#data",
    "title": "8  Doctors in an Ageing Population: making maps with {ggplot2}",
    "section": "",
    "text": "Tip 8.1: Saving data for later use\n\n\n\nYou may choose to save a copy of doctors as a CSV file for later use, which you can read in with read.csv or read_csv() from {readr}.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Doctors in an Ageing Population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html#exploratory-work",
    "href": "doctors-ageing-population.html#exploratory-work",
    "title": "8  Doctors in an Ageing Population: making maps with {ggplot2}",
    "section": "\n8.2 Exploratory work",
    "text": "8.2 Exploratory work\nLet’s start by exploring the data to see if there are interesting patterns that can be visualised.\n\n8.2.1 Data exploration\nThe data is reasonably small, containing only 4 columns: entity (denoting the country or a larger region), code (the country code), year (year the data relates to), and Physicians (per 1,000 people). The 4682 rows of data cover 221 different regions (some aggregates of others), with data covering 60 years.\n\nhead(doctors)\n\n# A tibble: 6 × 4\n  entity      code   year\n  &lt;chr&gt;       &lt;chr&gt; &lt;dbl&gt;\n1 Afghanistan AFG    1960\n2 Afghanistan AFG    1965\n3 Afghanistan AFG    1970\n4 Afghanistan AFG    1981\n5 Afghanistan AFG    1986\n6 Afghanistan AFG    1987\n# ℹ 1 more variable:\n#   `Physicians (per 1,000 people)` &lt;dbl&gt;\n\n\nOften when there’s a time component to data, one of the most obvious patterns to consider is how other variables change over time. Although line charts are probably most common for visualising time series data, a simple scatter plot can also indicate if there’s a general trend in the data. Sometimes scatter plots also look cleaner than line charts - a line for each region in this chart would very much look like a spaghetti chart as discussed in Chapter 2.\n\nplot(\n  x = doctors$year,\n  y = doctors$`Physicians (per 1,000 people)`,\n  xlab = \"Year\", ylab = \"Physicians per 1,000 people\"\n)\n\n\n\n\n\n\nFigure 8.1: Simple non-styled scatterplot of number of physicians per 1,000 people over time showing an increasing trend, created in base R.\n\n\n\n\nThere seems to be a general increasing trend between 1960 and 2019. The other important component of this data that we may want to explore is the spatial aspect - is there a pattern over space as well as over time?\n\n8.2.2 Exploratory sketches\nThe most common approach to visualising spatial data is, of course, to plot it on a map. If the aim is to show how a variable changes across different countries (or other defined regions), it’s very common to color the country based on the value of the variable. These are often termed choropleth maps.\n\n\n\n\n\nFigure 8.2: Initial sketch of a map of the world, showing title enclosed in a box and legend positioned horizontally in the bottom right\n\n\nAt this point, it’s also often a good time to start thinking about the orientation and aspect ratio of the plot you’ll create. This will depend a lot of where the plot is going to end up - for example, plots in a single column academic article will typically be landscape graphs. The choice of orientation and aspect ratio can also affect how clearly your data is displayed - choosing a very wide plot for time series data can stretch the series and obliterate any appearance of trend. With maps, you’re a little bit more constrained because there is already an underlying aspect ratio in the plot you’re creating. For this map, a landscape orientation with a 6x4 aspect ratio should work reasonably well.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Doctors in an Ageing Population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html#preparing-a-plot",
    "href": "doctors-ageing-population.html#preparing-a-plot",
    "title": "8  Doctors in an Ageing Population: making maps with {ggplot2}",
    "section": "\n8.3 Preparing a plot",
    "text": "8.3 Preparing a plot\nTo create the map sketched out in Figure 8.2, we need to do two things (i) decide which data to plot: which regions, and which years; and (ii) source some spatial data beyond just region names and country codes.\n\n8.3.1 Data wrangling\nSince this data is already fairly tidy, there isn’t too much data wrangling to be done. The only processing we really need to do is getting rid of the data we don’t need, and renaming a couple of columns to make them easier to work with. We can use the rename() function from {dplyr} to rename the entity column to region (for reasons that will become clear in the next paragraph!). We also rename the Physicians (per 1,000 people) column to doctors to make it easier to work with. The data has multiple entries for each country, spanning different years. We could make an animated map to show how the number of doctors is changing over time, but for now we’ll keep it simple with a static map showing a snapshot at one point in time. However, there’s a bit of a problem. If you inspect the data, you’ll see that not every country has an entry for each year - let’s use the most recent data available for each country. For each region, we keep the row with only the most recent year using a combination of group_by() and slice_max() from {dplyr}.\n\ndoctors &lt;- doctors |&gt;\n  dplyr::rename(\n    region = entity,\n    doctors = `Physicians (per 1,000 people)`\n  ) |&gt;\n  dplyr::select(region, year, doctors) |&gt;\n  dplyr::group_by(region) |&gt;\n  dplyr::slice_max(year) |&gt;\n  dplyr::ungroup()\n\nTo plot this data on a world map, we also need data for the country borders. Luckily, the map_data() function built into {ggplot2} can help us with that! This function takes data from the {maps} package and turns it into an object you can plot directly with {ggplot2}.\n\nlibrary(ggplot2)\nworld &lt;- map_data(\"world\")\n\nOf course, it’s never quite that straightforward. We need to join the world map data to our doctors data, and to do that we need a column in each data sets to join by - we’ll use the region column. If you try to join these two data sets using the region column, you’ll notice that you end up with some unexpected NA values. So what’s going on?\n\n\n\n\n\n\nTip 8.2: Renaming columns\n\n\n\nYou don’t need to rename columns in your data to be able to join them, but for this example, I found it a little bit easier to work with the data after renaming entity to region.\n\n\nThere are two issues here. Firstly, there are more regions in the world data than there are in the doctors data:\n\nlength(unique(world$region))\n\n[1] 252\n\nlength(unique(doctors$region))\n\n[1] 221\n\n\nThis is partly due to the fact that the doctors data has implicitly missing values - if no data is available for a region, no rows exists in the data for that region. It isn’t listed with NA values. Note that there are also some regions in doctors which do not exist in world - for example, the entity \"Upper-middle-income countries\" is listed within doctors.\nSecondly, if you inspect the region names, you’ll see that for some countries, their names are encoded differently. For example, in the world data, the United States is listed as \"USA\" whilst in the doctors data, it’s listed as \"United States\". Here, the easiest thing to do is manually rename the values that differ in one of the datasets. We can use the recode() function from {dplyr} to do that. Note that recode() has the rather unusual (for the {tidyverse}) syntax of old_name = new_name:\n\nplot_data &lt;- doctors |&gt;\n  dplyr::mutate(\n    region =\n      dplyr::recode(region,\n        \"United Kingdom\" = \"UK\",\n        \"United States\" = \"USA\",\n        \"Democratic Republic of Congo\" = \"Democratic Republic of the Congo\",\n        \"Cote d'Ivoire\" = \"Ivory Coast\",\n        \"Congo\" = \"Republic of Congo\",\n        \"Czechia\" = \"Czech Republic\"\n      )\n  )\n\nThe entries in the region column of doctors that don’t correspond to countries e.g. \"Upper-middle-income countries\" are not values that are required for the map. Therefore a left_join() can be performed, with world on the left - keeping all the countries listed in world and joining only those with a corresponding value in doctors. The remaining countries in world with no match in doctors are listed with NA values. The rows for \"Antarctica\" are filtered out - Antarctica is often given a disproportionate amount of space on world maps (at least those not centered on Antarctica) in the process of projecting a sphere onto a rectangle. \n\nmap_data &lt;- dplyr::left_join(world, plot_data, by = \"region\") |&gt;\n  dplyr::filter(region != \"Antarctica\")\n\nNow, we have everything we need to create a simple map.\n\n8.3.2 The first plot\nWe start, as almost always, with the ggplot() function, and pass in the data and aesthetic mappings that will apply to the whole plot. The longitude (long) and latitude (lat) are passed to the x and y axes; and we specify that the fill color of each country should be based on the doctors column. We also specify map_id - an aesthetic mapping that isn’t seen as often as the others. This is used to tell geom_map() which column defines each region polygon (not entirely unlike the group aesthetic discussed in previous chapters). \nBoth geom_sf() and geom_map() are used for creating maps within {ggplot2}. However, they expect different formats of data: geom_sf() expects an sf object, whereas geom_map() works with coordinates as columns in a data.frame or tibble. Here, we’ll use geom_map(). For examples of using geom_sf(), see Chapter 9. \n\n\n\n\n\n\nTip 8.3: Alternatives to geom_map()\n\n\n\nNote: you could also use geom_polygon() to plot map_data instead of geom_map(). \n\n\n\nbase_plot &lt;- ggplot(\n  data = map_data,\n  mapping = aes(\n    x = long,\n    y = lat,\n    map_id = region,\n    fill = doctors\n  )\n) +\n  geom_map(map = map_data)\nbase_plot\n\n\n\n\n\n\nFigure 8.3: Map of the world with countries colored based on number of doctors per 1,000 people. The map looks stretched.\n\n\n\n\nSo we have a simple map that shows our data, but there are several problems with it:\n\nThe map looks as if someone has stretched it vertically, since there’s no map projection specified. Countries are still recognizable, but not quite the right shape.\nThe color palette is not ideal. It’s more intuitive for brighter or lighter colors to represent smaller values, and for darker colors to represent higher values - at least for light colored backgrounds (Schloss et al. 2019). The default gradient color scale in {ggplot2} is the opposite way around.\nThere are labels that don’t need to be there (lat and long), and missing labels that should be there (title and subtitle, for example).\n\nSo let’s fix those elements of the initial plot.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Doctors in an Ageing Population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html#advanced-styling",
    "href": "doctors-ageing-population.html#advanced-styling",
    "title": "8  Doctors in an Ageing Population: making maps with {ggplot2}",
    "section": "\n8.4 Advanced styling",
    "text": "8.4 Advanced styling\nWe’ll start by considering alternative color palettes, then think about text that should be added, before finalising the layout.\n\n8.4.1 Colors\nThere are many, many color palette R packages in existence, and even more outwith the R ecosystem. In fact, the {paletteer} package is designed to give a common interface to a comprehensive collection of color palettes in R. One of my favourite is color palette R packages is {MetBrewer} (Mills 2022) - a collection of color palettes inspired by works of art at the Metropolitan Museum of Art in New York. It has many beautiful palettes, and many that work in traditional data visualisations. You can view all available palettes using MetBrewer::display_all(colorblind_only = TRUE). Since doctors is a continuous variable, we’ll look at the sequential palettes only.\n{MetBrewer} does have functions that interface directly with {ggplot2} (such as scale_fill_met_c()) but we’re going to use some of the colors in the palette to also define variables for the highlight and text colors. To get a good range of colors, we extract 20 colors from the \"Hokusai2\" palette. The text_col is the 18th color and highlight_col is the 15th color. A variable containing the background color, bg_col, is also defined.\n\nlibrary(MetBrewer)\ncol_palette &lt;- met.brewer(\"Hokusai2\", n = 20)\ntext_col &lt;- col_palette[18]\nhighlight_col &lt;- col_palette[15]\nbg_col &lt;- \"#EADEDA\"\n\nThese colors can then be passed into scale_fill_gradientn() from {ggplot2}. The limits of the color scale can also be set. Rather than adding labels for values on the legend, we can add text labels for Fewer doctors and More doctors. These are positioned 0.8 in from the limits of the color scale.\n\ncol_plot &lt;- base_plot +\n  scale_fill_gradientn(\n    colors = col_palette,\n    limits = c(0, 10),\n    breaks = c(0.8, 9.2),\n    labels = c(\"Fewer doctors\", \"More doctors\")\n  )\ncol_plot\n\n\n\n\n\n\nFigure 8.4: Map of the world with countries colored based on number of doctors per 1,000 people, showing a different color scheme.\n\n\n\n\n\n8.4.2 Text and fonts\nAs in previous chapters, fonts can be defined using the {sysfonts} and {showtext} packages. Here, the Roboto font is loaded through Google Fonts for the main font used, and Roboto Slab is loaded for use in the title. \n\nsysfonts::font_add_google(name = \"Roboto\", family = \"roboto\")\nsysfonts::font_add_google(name = \"Roboto Slab\", family = \"roboto_slab\")\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font &lt;- \"roboto\"\ntitle_font &lt;- \"roboto_slab\"\n\nNow, we can define some text for the title, subtitle, and caption. As in previous chapters, we’ll be using {ggtext} for formatting which means we can use markdown syntax to add bold font and line breaks.\n\ntitle &lt;- \"Doctors in an ageing population\"\nsubtitle &lt;- \"This map show the number of doctors per thousand people, revealing which countries* may be more likely to struggle in providing care for a population.&lt;br&gt;&lt;br&gt;*using the most recent available data for each country.\"\n\nLet’s create a custom caption that includes Font Awesome icons, as described in Chapter 5: \n\nsocial &lt;- social_caption(\n  icon_color = highlight_col,\n  font_color = text_col,\n  bg_color = bg_col,\n  font_family = body_font\n)\ncaption &lt;- glue::glue(\n  \"**Data**: Our World in Data&lt;br&gt;**Graphic**: {social}\"\n)\n\nThese text variables can then be passed into the labs() function in {ggplot2}:\n\ntext_plot &lt;- col_plot +\n  labs(\n    title = title,\n    subtitle = subtitle,\n    caption = caption\n  )\n\nTo apply our chosen fonts to the plot, the theme elements need to be adjusted. \n\n8.4.3 Adjusting themes\nWe start by adding theme_void() from {ggplot2}. The theme_void function removes all theme elements - including grid lines, axis labels, and the background. The legend and specified titles and subtitles remain. This theme is especially useful for maps where it’s more common for axis lines, axis titles, and grid lines not to be displayed. Like other built-in theme options, we can still set the base_size and base_family to set the default size and font family for any text that is displayed. \nWe also set the plot.title, plot.subtitle, and plot.caption to use element_textbox_simple from {ggtext} to allow the markdown syntax and automatically wrap long subtitles as we’ve seen in previous chapters.\n\nlibrary(ggtext)\ntext_plot +\n  theme_void(base_size = 8, base_family = body_font) +\n  theme(\n    plot.margin = margin(10, 10, 10, 10),\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    plot.title = element_textbox_simple(\n      color = text_col,\n      family = title_font\n    ),\n    plot.subtitle = element_textbox_simple(\n      color = text_col\n    ),\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col\n    )\n  )\n\n\n\n\n\n\nFigure 8.5: Map of the world with countries colored based on number of doctors per 1,000 people. The map looks stretched, and the fonts in the title and subtitle are close together.\n\n\n\n\nOne of the aesthetic design choices we might want to make here, is to include the title within a banner with a different colored background. Although this might seem like a fairly straightforward thing to want, it’s actually not that easy with {ggplot2}. There are some solutions to the problem using packages like {cowplot} (C. O. Wilke 2024) or {grid} (R Core Team 2024) to draw rectangles and text. But we can do this within {ggplot2} - by using facets in a way they were not designed to be used. Let’s start by adding an additional column called label to map_data that contains the title (for every row in the data): \n\nmap_data$label &lt;- title\n\n\n\n\n\n\n\nTip 8.4: Choosing a column name\n\n\n\nNote: this column does not need to be called label, you can use any name you choose as long as it’s not an existing column.\n\n\nThen we can use facet_wrap() and facet across the label column. Since there’s only one value of label in the data, this just adds the title as strip text at the top of the plot. While we’re here, let’s make the country outlines in the map the same color as the background, and make the lines a little bit thicker. \n\nstyled_plot &lt;- ggplot(\n  data = map_data,\n  mapping = aes(\n    long,\n    lat,\n    map_id = region,\n    fill = doctors\n  )\n) +\n  geom_map(\n    map = map_data,\n    color = bg_col,\n    linewidth = 0.3\n  ) +\n  scale_fill_gradientn(\n    colors = col_palette,\n    limits = c(0, 10),\n    breaks = c(0.8, 9.2),\n    labels = c(\"Fewer doctors\", \"More doctors\")\n  ) +\n  labs(\n    title = title,\n    subtitle = subtitle,\n    caption = caption\n  ) +\n  facet_wrap(~label) +\n  theme_void(base_size = 7, base_family = body_font) +\n  theme(\n    plot.margin = margin(10, 10, 10, 10),\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    plot.title = element_textbox_simple(\n      color = text_col,\n      family = title_font,\n      lineheight = 0.5\n    ),\n    plot.subtitle = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5\n    ),\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col,\n      lineheight = 0.5\n    ),\n    strip.background = element_rect(\n      fill = highlight_col, color = highlight_col\n    )\n  )\nstyled_plot\n\n\n\n\n\n\nFigure 8.6: Map of the world with duplicated title in the facet strip text, with dark text against a dark blue background.\n\n\n\n\nIt’s obvious that there are some issues with this plot now that the strip text contains the title:\n\nThere is a duplicate title set using labs(), and the strip.text title is too dark to read against the blue background.\nThe subtitle is above the title.\nThe map still appears stretched.\nThe legend is taking up quite a lot of space, and the white ticks in the colorbar are distracting.\n\nTo solve the first two problems, the title and subtitle arguments of labs() can be set to NULL to remove them from the plot. Instead, the tag argument in labs() can be used to set the subtitle. The nice thing about using tag is the plot.tag.position argument within theme() which allows you to position the text anywhere on the plot. The strip.text and plot.tag arguments of theme should also be set using element_textbox_simple() from {ggtext} to allow the text to be styled as we wish. The top, left, and right margins of the plot should be set to 0 using plot.margin to make sure that the strip text banner goes to the edge of the plot. \nTo solve the third problem of the map looking stretched, we can apply coord_sf() which applies the World Geodetic System 1984 (WGS84) CRS (coordinate reference system). The upper limit of the y axis can also be extended beyond the range of the data to make room for the subtitle added using tag. \n\nstyled_plot2 &lt;- styled_plot +\n  labs(\n    title = NULL, subtitle = NULL, tag = subtitle\n  ) +\n  # add space for the tag (subtitle) text\n  coord_sf(ylim = c(-60, 140)) +\n  theme(\n    # move and format the tag (subtitle) text\n    plot.margin = margin(0, 0, 5, 0),\n    plot.tag.position = c(0.015, 0.8),\n    plot.tag = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.6,\n      hjust = 0,\n      maxwidth = 0.98\n    ),\n    # add margin for caption\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col,\n      margin = margin(l = 5),\n      lineheight = 0.6\n    ),\n    # change title text color\n    strip.text = element_textbox_simple(\n      color = bg_col,\n      family = title_font,\n      margin = margin(7, 5, 7, 5),\n      lineheight = 0.6,\n      size = rel(1.7)\n    )\n  )\n\nNote that the values used in plot.tag.position = c(0.015, 0.8) and the strip.text argument margin = margin(7, 5, 7, 5) took a lot of trial and error to get just right. There’s no magic involved in choosing these values!\nTo solve the final problem of the legend appearance, we can edit the style elements in theme. The legend.title is removed by setting it to a blank element with element_blank(), and the legend text labels are styled with element_text(). \nThe placement of the legend is set through the legend.position, legend.justification.bottom, legend.margin, and legend.direction arguments.\n\n\n\n\n\n\nTip 8.5: Styling guides in {ggplot2}\n\n\n\nSince version 3.5.0 of {ggplot2}, you can also style the theme of individual legends from inside the guide_*() functions. Prior to version 3.5.0, legend.position was used to position the legend inside the plot before legend.position.inside and legend.justification.bottom were introduced to allow custom legend positions more easily.\nThe other difference is that legend.ticks = element_blank() can be used to remove the white tick marks inside the colorbar legend. In older versions of {ggplot2}, guides(fill = guide_colorbar(ticks = FALSE)) could be used instead. \n\n\nThe size of the legend is controlled through the legend.key.width and legend.key.height arguments.\n\nstyled_plot2 +\n  theme(\n    # legend text\n    legend.title = element_blank(),\n    legend.text = element_text(\n      color = text_col,\n      lineheight = 0.5,\n      hjust = 0.5\n    ),\n    # legend size\n    legend.key.width = unit(1.5, \"cm\"),\n    legend.key.height = unit(0.3, \"cm\"),\n    # legend position\n    legend.position = \"bottom\",\n    legend.justification.bottom = \"right\",\n    legend.margin = margin(-5, 5, 0, 0),\n    legend.direction = \"horizontal\",\n    legend.ticks = element_blank()\n  )\n\n\n\n\n\n\nFigure 8.7: Final styled plot showing a map of the world, with title inside a blue banner and a horizontal colorbar legend at the bottom right of the page.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Doctors in an Ageing Population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html#reflection",
    "href": "doctors-ageing-population.html#reflection",
    "title": "8  Doctors in an Ageing Population: making maps with {ggplot2}",
    "section": "\n8.5 Reflection",
    "text": "8.5 Reflection\nWhen the original plot of this data was created, it plotted the number of doctors per 1,000 people over the age of 70 and the colors were based on the log of this value - compare Figure 8.7 and Figure 8.8. The raw values on the color scale were hard to interpret, so the choice was made to use Fewer doctors and More doctors labels instead. For this version, where the underlying data is simpler and easier to interpret, having the values on the legend would add more useful information. The original title was also kept, but could probably be changed to something more informative.\n\n\n\n\n\nFigure 8.8: My original plot created for this data, with a slightly different underlying data set.\n\n\nWhen the data was processed, the choice was made to plot a map showing the values for the most recently available data. This means that for some countries the data is more recent (and therefore perhaps more reliable), whilst for others it’s much older. In fact, running range(doctors$year) shows that the most recent data in the plot is from 2019, whilst the oldest is from 1980 - a gap of almost 40 years! That makes it much harder to accurately compare between countries, and there’s no indication for each country on this map how recent the data is. Readers might end up drawing conclusions that show differences between countries, when actually the different is between times. Showing uncertainty on maps is tricky, and there’s no straightforward solution here. Perhaps setting the colors to a binary scale showing whether the value is above or below average, with the intensity of the color denoting the recentness of the data, is one approach. Or at least a more detailed explanation about the range of time the data relates to could be included within the subtitle.\nOne improvement to this map over the original is the use of coord_sf() to correctly scale the aspect ratio of the map. In the original map, using coord_map() (now deprecated in favour of coord_sf()) produced some odd looking results, and in the end, after applying the rest of the styling changes, the end result didn’t look too squashed. But coord_sf() made it much easier to achieve.\nEach plot created during the process of developing the original version of this visualisation was captured using {camcorder}, and is shown in the gif below. If you’d like to learn more about how {camcorder} can be used in the data visualisation process, see Section 14.1.\n\n\n\n\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Doctors in an Ageing Population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "time-zones.html",
    "href": "time-zones.html",
    "title": "9  Time Zones: spatial data and mapping with {sf}",
    "section": "",
    "text": "9.1 Data\nThe IANA (Interet Assigned Numbers Authority) tz database contains data on the history of local time for different locations around the world (Internet Assigned Numbers Authority 2023). The website states that “each main entry in the database represents a timezone for a set of civil-time clocks that have all agreed since 1970.” Many websites use the data in the IANA tz database to operate.\nThe time zones data was used as a #TidyTuesday dataset in March 2023, where the data wrangling code was adapted from code by Davis Vaughan. There are actually four data sets included but we’ll focus on the timezones data for now. We can load the data in using the tt_load() function from the {tidytuesdayR} package (Hughes 2022b):\ntuesdata &lt;- tidytuesdayR::tt_load(\"2023-03-28\")\ntimezones &lt;- tuesdata$timezones\nThe data contains information for 4 different variables on 337 time zones. The zone column contains the time zone name; the latitude and longitude columns contain coordinates for the time zones principal location e.g. biggest city; and the comments column contains comments from the original time zone definition file.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Time Zones: spatial data and mapping with {sf}</span>"
    ]
  },
  {
    "objectID": "time-zones.html#exploratory-work",
    "href": "time-zones.html#exploratory-work",
    "title": "9  Time Zones: spatial data and mapping with {sf}",
    "section": "\n9.2 Exploratory work",
    "text": "9.2 Exploratory work\nLet’s start by looking at what the timezones data looks like!\n\n9.2.1 Data exploration\nWhen we inspect the first few rows of the data:\n\nhead(timezones)\n\n# A tibble: 6 × 4\n  zone       latitude longitude comments\n  &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   \n1 Africa/Ab…     5.32     -4.03 &lt;NA&gt;    \n2 Africa/Al…    36.8       3.05 &lt;NA&gt;    \n3 Africa/Bi…    11.8     -15.6  &lt;NA&gt;    \n4 Africa/Ca…    30.0      31.2  &lt;NA&gt;    \n5 Africa/Ca…    33.6      -7.58 &lt;NA&gt;    \n6 Africa/Ce…    35.9      -5.32 Ceuta, …\n\n\nthe first thing that jumps out is the comments column which appears to have a lot of missing data. Let’s plot it to confirm, making use of the is.na() function to plot only the counts of missing and non-missing data: \n\nbarplot(\n  table(is.na(timezones$comments)),\n  cex.axis = 0.5,\n  cex.names = 0.5\n)\n\n\n\nA bar chart of the number of missing values in the comments column, where TRUE represents missing.\n\n\n\nAlmost 40% of the time zones have no comments associated with them. Inspecting the data further tells us that these comments typically offer clarification or an alternative for the timezone name. Although we could explore how the presence of these comments varies across the globe, we’ll use select() from {dplyr} to drop the comments column for now since it’s not the most interesting thing to plot in the data.\nThe first column, zone, contains information on the timezone name - it’s typically in the form of \"Continent/City\". To explore the spread of time zones across continents, we need to split this variable into two (or extract just the continent name from the timezone name). We can use separate_wider_delim() from {tidyr} to create two new columns from the zone column, splitting on the / character. Some of the timezone names have two / in their name e.g. \"America/North_Dakota/New_Salem\" meaning there are too many pieces for two columns. We can tell separate_wider_delim() to merge the last pieces since it still uniquely specifies the location. \n\ntimezones_data &lt;- timezones |&gt;\n  dplyr::select(-comments) |&gt; \n  tidyr::separate_wider_delim(\n    cols = zone,\n    delim = \"/\",\n    names = c(\"continent\", \"place\"),\n    too_many = \"merge\"\n  )\n\nNow, we can explore how many time zones there are per continent: \n\nbarplot(\n  table(timezones_data$continent),\n  cex.axis = 0.5,\n  cex.names = 0.5\n)\n\n\n\nA bar chart of the number of defined time zones in each of nine geographic regions.\n\n\n\nWe can see that, actually, the first part of the time zone names don’t quite map to continents since there are nine values - but they do map onto large geographic regions.\nOf course, when we have coordinate data, the most obvious thing to do is plot those coordinates on a map!\n\n9.2.2 Exploratory sketches\nGiven that we have a latitude and longitude data for the principal locations (usually largest cities) within each time zone, the first map idea that springs to mind is a world map with the time zone locations plotted as points:\n\n\n\n\n\nFigure 9.1: Initial sketch of time zone locations as points on a world map.\n\n\nWe could color the points based on the geographic region (continent) that they are within. as we’ve already seen, if we do this in {ggplot2}, coloring based on a variable automatically adds a legend to the chart. Instead of the traditional legend using colored squares next to the category label, we could add our own custom legend - using a bar chart. The bars will shown the number of time zones per region, and be colored in the same way as the points on the map. This bar chart legend below the map doesn’t take up any more space than a traditional legend, but it does add information (or at least makes the existing information quicker and easier to process).\n\n\n\n\n\nFigure 9.2: Initial sketch of points on a world map with text in the lower left corner, and a bar chart as a legend in the bottom right.\n\n\nA title and subtitle can be added below the map, next to the bar chart. Positioning the text in a more square layout (rather than a long string of text across the top of the chart) make sit easier to read, and helps to prevent the visualisation from becoming very wide and short.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Time Zones: spatial data and mapping with {sf}</span>"
    ]
  },
  {
    "objectID": "time-zones.html#preparing-a-plot",
    "href": "time-zones.html#preparing-a-plot",
    "title": "9  Time Zones: spatial data and mapping with {sf}",
    "section": "\n9.3 Preparing a plot",
    "text": "9.3 Preparing a plot\nTo make our plot, we need to get some background map data and understand how to work with multiple spatial data files at once.\n\n9.3.1 Maps with {rnaturalearth}\nBefore we start plotting points on a map, we need a map of the world that we can use as a background to show the underlying countries. In Chapter 8, we used map_data from {ggplot2}. Here, let’s look at an alternative using the {rnaturalearth} package (Massicotte and South 2023).\nThe {rnaturalearth} package allows you to interact with Natural Earth map data. You can download polygons for different geographic regions using the ne_countries() function. The default is to download data for all countries: \n\nworld &lt;- rnaturalearth::ne_countries()\n\n\n\n\n\n\n\nTip 9.1: Polygons for a specific country with {rnaturalearth}\n\n\n\nIf you wanted only the polygon(s) for a specific country or region, you can specify the country argument:\n\nuk &lt;- rnaturalearth::ne_countries(country = \"united kingdom\")\n\nFor specified countries, the ne_states() function provides administrative level 1 polygons e.g. major within-country regions such as states.\n\n\nThe default output from the ne_countries() function is an sf object - where sf stands for Simple Features. Simple Features is a standardised model for representing geometric objects such as points, lines, and polygons in spatial databases and geographic information systems (GIS). The {sf} package (Pebesma 2018) implements simple features in R, allowing simple features to be represented as a data.frame (or tibble). \nSince sf objects in R can be thought of as fancy data.frames, this means they can be plotted using {ggplot2}. In fact, {ggplot2} has built-in capabilities for plotting sf objects - through the geom_sf() function. That means that we can build maps from sf objects, in the same we we build other types of charts: by starting with the ggplot() function, and then layering on the geom_sf() geometry: \n\nlibrary(ggplot2)\nbg_map &lt;- ggplot() +\n  geom_sf(data = world)\nbg_map\n\n\n\n\n\n\nFigure 9.3: Map of the world showing country outlines, with the default gray background.\n\n\n\n\nYou’ll notice that there’s one key difference - there’s no aesthetic mapping using the aes() function. Since the spatial coordinates are embedded within the sf object, there’s no need to explicitly map the x and y variables. The geom_sf() function can directly extract and use the embedded coordinates for plotting.\n\n9.3.2 Spatial objects with {sf}\nThough you can combine geom_sf() with other geometries, such as geom_point(), it’s often easier to convert the other geometries to sf objects first. The main reason for this is to ensure the coordinate reference system (CRS) is the same for both geometries. Coordinate reference systems define how the three dimensional nature of the earth is mapped onto a two-dimensional projected map. There are many different coordinate reference systems, each commonly used for different areas of the world. If you’re combining multiple spatial objects, they may have different coordinate reference systems. For example, using the British National Grid (BNG) CRS, London has the following coordinates: X = 492983 and Y = 188837. Under the World Geodetic System 1984 (WGS84) CRS, London has the following coordinates: Longitude (X) = 1.200235W and Latitude (Y) = 53.870659N. You can imagine how these two coordinates cannot be plotted on the same map without transforming them first.\nIn R, you use the {sf} to set or transform between different coordinate reference systems. The easiest way is by using EPSG codes - numerical identifiers assigned to specific coordinate reference systems. The WGS84 uses EPSG code 4326. This is the coordinate reference system used in the world data that we’re using for the background map. You can check using the st_crs() function from {sf} which retrieves the CRS from an object: \n\nsf::st_crs(world)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nTo make sure the CRS of the timezones data matches the CRS of the world data, we can set the CRS of the timezones data as 4326. At the moment, the timezones data is not a spatial object - it’s just a simple data.frame that contains two columns with latitude and longitude information. First, we need to convert it into an sf object using the st_as_sf() function from {sf}, also specifying the column names that relate to the coordinates data. \nThe latitude and longitude coordinates given in the timezones data are given in the EPSG:4326 CRS, so we don’t need to convert the CRS - just set it. We know it’s in EPSG:4326 because this information is given to us with the data. We can use the st_set_crs() to set the coordinate reference system to EPSG:4326 .\n\ntimezones_sf &lt;- timezones_data |&gt;\n  sf::st_as_sf(coords = c(\"longitude\", \"latitude\")) |&gt;\n  sf::st_set_crs(4326)\n\n\n\n\n\n\n\nTip 9.2: Dealing with an unknown CRS\n\n\n\nIf you don’t know which CRS your coordinates are in, the best thing to do is go back to the source of the data to see if you can find that information. Otherwise, you may wish to try the guess_crs() function from {crsuggest} (Walker 2022) which will guess potential coordinate reference systems for data that are lacking a defined CRS. \n\n\n\n9.3.3 The first plot\nSince the time zones coordinates are now stored as an sf object, we can plot it in the same way as the world data. We pass in the timezones_sf object to the data argument, and specify that we want to color the points based on the continent column by passing this into the color argument inside the aes() function: \n\nbasic_map &lt;- bg_map +\n  geom_sf(\n    data = timezones_sf,\n    mapping = aes(color = continent)\n  )\nbasic_map\n\n\n\n\n\n\nFigure 9.4: Points representing different time zone locations on a world map, with points colored by continent and a legend indicating color mapping on the right of the map.\n\n\n\n\nWe now have a basic map with points colored by region, and the default legend added on the right hand side. Let’s get started on a better, custom legend.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Time Zones: spatial data and mapping with {sf}</span>"
    ]
  },
  {
    "objectID": "time-zones.html#creating-a-custom-legend",
    "href": "time-zones.html#creating-a-custom-legend",
    "title": "9  Time Zones: spatial data and mapping with {sf}",
    "section": "\n9.4 Creating a custom legend",
    "text": "9.4 Creating a custom legend\nBefore we create a new legend for the map, we need to define which colors will be used in the legend (and the rest of the plot).\n\n9.4.1 Colors\nAs we’ve done in previous chapters, we start by defining a text color, highlight color, and background color as variables.\n\ntext_col &lt;- \"#2F4F4F\"\nhighlight_col &lt;- \"#508080\"\nbg_col &lt;- \"#F0F5F5\"\n\nThen we define a named vector of colors, mapping the names of the regions to different hex codes. It can be difficult to find a qualitative color palette with enough colors (one for each of the nine regions) that remains colorblind safe. Paul Tol discusses several options for qualitative palettes in his Colour schemes and templates blog post (Tol 2021). Here, we use the muted qualitative color scheme palette (Tol 2021) which has 10 colors (including a pale grey for missing data) and is colorblind safe:\n\ncol_palette &lt;- c(\n  \"#CC6677\", \"#332288\", \"#DDCC77\",\n  \"#117733\", \"#88CCEE\", \"#882255\",\n  \"#44AA99\", \"#999933\", \"#AA4499\"\n)\nnames(col_palette) &lt;- unique(timezones_sf$continent)\n\n\n9.4.2 Fonts\nSimilarly, we also load any fonts we want to use. Again, for this visualisation we’re using Google Fonts, so we can make use of the font_add_google() function in {sysfonts}. For the title, we’ll use the Fraunces font - an old style serif font inspired by 20th century typefaces. For the body font, we’ll use Commissioner - a sans serif font. As we’ve done in previous chapters, we use showtext_auto() to use the {showtext} automatically for plotting fonts, and set the desired resolution using showtext_opts() to set the dpi. \n\nsysfonts::font_add_google(\"Commissioner\")\nsysfonts::font_add_google(\"Fraunces\")\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font &lt;- \"Commissioner\"\ntitle_font &lt;- \"Fraunces\"\n\n\n9.4.3 Bar chart legend\nThere are many ways to make a bar chart in {ggplot2} - the two most often used are geom_bar() and geom_col(). What’s the difference? Well, geom_bar() is essentially a special version of geom_col() that counts up how many observations are in each category for you. For this visualisation, we’re going to use the category counts for other purposes besides just defining the height of the bars so we’ll do the counting ourselves and use geom_col() instead. \nWe’ll use the count() function from {dplyr} to count how many observations of each geographical region are present in the continent column. We could use either the timezones_sf data or the timezones_data here as the input data. If you try both, you’ll notice that, as we expect, the count column (n) is the same in both cases, but that the two outputs are not identical! When you run dplyr::count(timezones_data, continent), you get a 2 column data.frame. When you run dplyr::count(timezones_sf, continent) you get an 3 column data.frame that remains an sf object. This is because the geometry column in sf can described as sticky - you often (though not always) want the sf class to be preserved after any operations. You can remove it using the st_drop_geometry() function from {sf}: \n\nbar_data &lt;- timezones_sf |&gt;\n  dplyr::count(continent) |&gt;\n  sf::st_drop_geometry()\n\nLet’s plot a basic bar chart, by starting (as we always do) with passing our new bar_data object into the ggplot() function. We also add the aesthetic mapping via the aes() function and place the continent on the x-axis and the count (n) on the y-axis. We then draw the columns of the bar chart using geom_col(): \n\nggplot(\n    data = bar_data,\n    mapping = aes(x = continent, y = n)\n  ) +\n  geom_col()\n\n\n\n\n\n\nFigure 9.5: Bar chart showing the number of time zone locations in each continent.\n\n\n\n\nTo make it work effectively as a legend, we need to do two things:\n\nColor the bars based on the continent column.\nAdd labels directly to the bars instead, and remove the x-axis labels and legend.\n\n\n\n\n\n\n\nTip 9.3: Adding color to bar charts\n\n\n\nIf you were just creating a normal bar chart (not to be used a legend) then adding colors to the bars might make your plot look brighter but it doesn’t add any additional information. The categories can already be distinguished by the labels on the x-axis.\n\n\nLet’s remake our bar chart, this time also mapping fill and label to the continent column in the aesthetic mapping. Adding label to the aesthetic mapping in ggplot() won’t affect our bar chart in any way since we aren’t (yet) adding geom_text() but there’s no harm in adding it as a global aesthetic mapping here anyway. We’ll also use scale_fill_manual() to set the colors used to those defined in the col_palette vector we created earlier. \n\nbar_plot &lt;-\n  ggplot(\n    data = bar_data,\n    mapping = aes(\n      x = continent, y = n,\n      fill = continent, label = continent\n    )\n  ) +\n  geom_col() +\n  scale_fill_manual(\n    values = col_palette\n  )\nbar_plot\n\n\n\n\n\n\nFigure 9.6: Bar chart showing the number of time zone locations in each geographical region, with different colors for each region.\n\n\n\n\nNow we can add the text labels directly to the bars. But where should they go? It’s quite common to add category labels in line with the end of the bar but that might not work well here. If we add labels within the bars, for regions with few time zones where the bars are short, the text will be very squashed. If we add labels outside the bars, for regions with many time zones where the bars are long, the text will run off the graph or extend the height of the visualisation. Neither is ideal. But maybe we could have the best of both worlds. We want to add labels under the following conditions:\nWhen the bars are long, text should:\n\nappear inside the bar and be right-aligned;\nbe light in color to contrast the dark bar backgrounds;\n\nAnd conversely, when the bars are short, text should:\n\nappear outside the bar and be left-aligned;\nbe dark in color to contrast the light plot background;\n\nIt might take a little bit of trial and error to find the value that defines a bar as being short or tall. Here, we’ll use 45. If a region has more than 45 time zones, it’s classed a tall bar. Otherwise, it’s short.\nWe want to map the alignment and color of the text to a (transformation of) the n column in the data set. This sounds like something that should go into an aesthetic mapping in the aes() function. We already know the color argument can be used to map the text color. The hjust and vjust arguments are used for horizontal and vertical positioning of text. Unfortunately, within the geom_text() function, neither hjust nor vjust can be used inside the aes() function. \nLuckily, the {ggtext} package once again comes to the rescue! We can use the geom_textbox() function from {ggtext} instead of geom_text(). It works very similarly to geom_text() but it allows us to map variables to hjust and vjust. \nWe’ll use case_when() from {dplyr} to specify the settings for the hjust argument, depending on the value of n. When n is greater than 45, hjust should be 1 to use right alignment, otherwise it should be 0 to use left alignment. If you wanted to, you could create a new column in the data instead of using case_when() directly inside the aes() function. \nWhen using geom_textbox(), we need to specify both hjust and halign. Since, the draws a box, we need to control both (i) the alignment of the box relative to the coordinates using hjust, and (ii) the alignment of the text within the box relative to the edges of the box using halign. Within geom_textbox() we also use orientation = \"left-rotated\" to rotate the text anti-clockwise by 90 degrees (similar to using angle = 90 in geom_text()). We can remove the background fill color and box outline by setting both fill = NA and box.color = NA, and set the size and font family options using the size and family arguments (where we pass in our body_font variable we defined earlier).\n\n\n\n\n\n\nTip 9.4: Alignment of text\n\n\n\nIn {ggplot2}, hjust (and halign) controls horizontal alignment and vjust (and valign) controls vertical alignment. When text is rotated, the non-rotated alignment arguments should be used. For example, although we’re moving the text up and down, we still use hjust to align the text.\n\n\nWe use a similar process for setting the color of the text - using case_when() to specify if the text should use the bg_col or text_col color based on whether or not it is greater than 45. Note that we wrap the bg_col and text_col variables inside the I() function to use these variables as is rather than treating them as a variable to map to. \nFinally, we can also use theme_void() to remove all existing theme elements, and theme(legend.position = \"none\") to remove the legend. \n\nlegend_plot &lt;- bar_plot +\n  ggtext::geom_textbox(\n    mapping = aes(\n      hjust = dplyr::case_when(\n        n &gt; 45 ~ 1,\n        TRUE ~ 0\n      ),\n      halign = dplyr::case_when(\n        n &gt; 45 ~ 1,\n        TRUE ~ 0\n      ),\n      color = dplyr::case_when(\n        n &gt; 45 ~ I(bg_col),\n        TRUE ~ I(text_col)\n      )\n    ),\n    family = body_font,\n    size = 2.5,\n    fill = NA,\n    box.color = NA,\n    orientation = \"left-rotated\"\n  ) +\n  theme_void() +\n  theme(\n    legend.position = \"none\"\n  )\nlegend_plot\n\n\n\n\n\n\nFigure 9.7: A minimalist bar chart showing the number of time zone locations in each continent, with labels on each bar naming the continent.\n\n\n\n\nNow we have a much nice looking custom legend. We can apply some nicer styling to our main map before we join the two together!",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Time Zones: spatial data and mapping with {sf}</span>"
    ]
  },
  {
    "objectID": "time-zones.html#advanced-styling",
    "href": "time-zones.html#advanced-styling",
    "title": "9  Time Zones: spatial data and mapping with {sf}",
    "section": "\n9.5 Advanced styling",
    "text": "9.5 Advanced styling\nWe have multiple elements of our plots that we need to improve:\n\nthe background map should use our defined colors rather than the defaults;\nthe points should also use our defined colors;\na title and subtitle should be added using our defined fonts;\n\n\n9.5.1 Applying colors\nLet’s start by re-drawing the background map but using our text_col for the border color and a semi-transparent version of our highlight_col for the fill color. We can use the alpha() function from {ggplot2} to set the transparency to 30% (0.3). \nWe’ll also re-draw the points again with a small adjustment - let’s change the shape that’s used for the points. You can set the shape using the pch (or shape) argument. There are 25 different options available for pch, which can be specified using the numbers 1 to 25. The shape we’ll use here is a circle with a dot in the middle. Unfortunately, this isn’t one of the 25 available options so we’ll have to make it ourselves. We can draw the dot in the middle using the default shape but making it a little smaller. We can add the circle by choosing pch = 21 (which allows you to control both the fill and color of the shape) and making it a little bit bigger with a transparent fill. \n\nbasic_map &lt;- ggplot() +\n  # Apply colors to background map  \n  geom_sf(\n    data = world,\n    color = text_col,\n    fill = alpha(highlight_col, 0.3)\n  ) +\n  # Draw points for time zone locations\n  geom_sf(\n    data = timezones_sf,\n    mapping = aes(color = continent),\n    size = 0.4,\n  ) +\n  # Draw outer circle \n  geom_sf(\n    data = timezones_sf,\n    mapping = aes(color = continent),\n    size = 1.6,\n    pch = 21,\n    fill = \"transparent\"\n  )\nbasic_map\n\n\n\n\n\n\nFigure 9.8: Points representing different time zone locations on a world map, with points colored by geographical region. The default legend is shown on the right hand side.\n\n\n\n\nWe also apply the same colors for (both of) the points as we did for the bar chart (remembering to use scale_color_manual() rather than scale_fill_manual() for points). \n\ncol_map &lt;- basic_map +\n  scale_color_manual(\n    values = col_palette\n  )\n\n\n9.5.2 Editing the axes\nBefore we add the title and subtitle text, we need to make some space for it (and the legend that we’ll add later). Let’s set the limits of the x- and y- axes using scale_x_continuous() and scale_y_continuous(). We extend the lower limit of the y-axis beyond the range of the data, leaving blank space at the bottom where we can overlay the text. We also adjust the breaks in the x-axis scale to make the grid lines closer together. The choice of grid lines every 15 x values might seem like an odd choice, but every fifteen degrees difference in longitude (x-axis) is approximately one hour of time difference (since Earth rotates 360 degrees in 24 hours, or 15 degrees per hour)! \nIt will take some (probably a lot of) trial and error to figure out exactly how much you need to extend the y-axis by. Here, we want the height of the blank space to be about half the height of the map area. Using sf::st_bbox(world) to return the bounding box of the world map data, you’ll see that the y-axis of the world map ranges between -90 to +83.6. This means extending the y-axis by around 80 or 90 is a good starting point. We also remove the extra padding around the sides by setting expand = FALSE inside coord_sf(). \n\naxes_map &lt;- col_map +\n  scale_x_continuous(\n    breaks = seq(-180, 180, by = 15),\n    limits = c(-190, 190)\n  ) +\n  scale_y_continuous(\n    limits = c(-170, 100)\n  ) +\n  coord_sf(expand = FALSE)\naxes_map\n\n\n\n\n\n\nFigure 9.9: Points representing different time zone locations on a world map, with points colored by geographical region. The default legend is shown on the right hand side, with a large blank space below the world map.\n\n\n\n\n\n9.5.3 Text\nWe can create our custom Font Awesome icon caption, as described in Chapter 5, which we’ll later add to the top of the visualisation: \n\nsocial &lt;- social_caption(\n  bg_color = bg_col,\n  icon_color = highlight_col,\n  font_color = text_col,\n  font_family = body_font\n)\n\nAs we did in Chapter 4 and Chapter 5, we can also add colored text within the subtitle to denote the categories. This might be unnecessary for this visualisation since we have our custom bar chart legend, but reinforcing the color mapping won’t hurt. Here, we’ll use {ggtext} as we did in Chapter 5 (although you can also use {marquee} as we did in Chapter 4 if you prefer). This means we’ll be writing HTML &lt;span&gt;&lt;/span&gt; tags and using glue() to pass in the colors from col_palette vector. Here, we’ll take a slightly different approach of calling the variables - using each vector element name instead of the index. This approach is a little more manual, but can be useful if you want the written text to be slightly different to the category name. It’s also often a little bit clearer code to read! \n\nsubtitle &lt;- glue::glue(\"Time zones tend to follow the boundaries between countries and their subdivisions instead of strictly following longitude. For every one-hour time, a point on the earth moves through 15 degrees of longitude. Each point relates to one of 337 time zones listed in the IANA time zone database. The colors show which time zones are in\n&lt;span style='color:{col_palette[\\\"Africa\\\"]};'&gt;Africa &lt;/span&gt;,\n&lt;span style='color:{col_palette[\\\"America\\\"]};'&gt;America &lt;/span&gt;,\n&lt;span style='color:{col_palette[\\\"Antarctica\\\"]};'&gt;Antarctica &lt;/span&gt;,\n&lt;span style='color:{col_palette[\\\"Asia\\\"]};'&gt;Asia &lt;/span&gt;,\n&lt;span style='color:{col_palette[\\\"Atlantic\\\"]};'&gt;Atlantic &lt;/span&gt;,\n&lt;span style='color:{col_palette[\\\"Australia\\\"]};'&gt;Australia &lt;/span&gt;,\n&lt;span style='color:{col_palette[\\\"Europe\\\"]};'&gt;Europe &lt;/span&gt;,\n&lt;span style='color:{col_palette[\\\"Indian\\\"]};'&gt;Indian &lt;/span&gt;, and\n&lt;span style='color:{col_palette[\\\"Pacific\\\"]};'&gt;Pacific &lt;/span&gt; zones.&lt;br&gt;**Data**: IANA tz database&lt;br&gt;\")\n\nWe also specify some text for the visualisation title. We’re going to join together the title and subtitle and plot them as one text object, so we also use HTML &lt;span&gt;&lt;/span&gt; tags to set the font size, family, and color of the title.\n\ntitle &lt;- glue::glue(\"&lt;span style='font-size:12pt; font-family:{title_font}; color:{text_col};'&gt;Time Zones of the World&lt;/span&gt;&lt;br&gt;\")\ntitle_text &lt;- glue::glue(\"{title}{subtitle}\")\n\nWe add the social caption to the map using the tag option in the labs() function - just as we did in Chapter 8. When we edit the theme elements in the final step, we’ll specify a position for the tag. \nUnfortunately, we can’t have two tags and since we also want a non-standard position for the title/subtitle text object, we’ll use geom_textbox() to add it instead. We specify the x- and y- coordinates of where we want the textbox to go (again, lots of trial and error!) and pass the social object in for the label. We also use the other arguments in geom_textbox() to set the font size and family as well as specify the alignment of the text and box (just as we did earlier when making the bar chart). The box fill and outline colors are removed by setting their arguments to NA. \n\ntext_map &lt;- axes_map +\n  # add social icons\n  ggtext::geom_textbox(\n    data = data.frame(x = 0, y = 93, label = social),\n    mapping = aes(x = x, y = y, label = label),\n    family = body_font,\n    size = 2.3,\n    fill = NA,\n    box.color = NA,\n    halign = 0.5,\n    hjust = 0.5,\n    valign = 0\n  ) +\n  # add title and subtitle\n  labs(tag = title_text)\n\n\n9.5.4 Adjusting themes\nThe final step is making a few small changes to the {ggplot2} theme. We start by removing all theme elements using theme_void() and setting the base_family and base_size for the text. Although we don’t have many text elements in our visualisation controlled by the theme() functions, this will still affect the tag text. \nUsing the theme() function, we make some further edit to remove the default legend, change the background color to out bg_col variable, and add the grid lines back in with an almost transparent text_col color. The position of the tag text can be set using the plot.tag.position argument to place it in the bottom left of the plot. We also use element_textbox_simple() from {ggtext} to format the text in the tag since it includes the HTML &lt;span&gt;&lt;/span&gt; tags. Within element_textbox_simple(), the maxwidth argument is used to set the width of the textbox, ensuring the only takes up the left hand side of the blank space at the bottom. The bar chart legend will go on the other side. \n\nstyled_map &lt;- text_map +\n  theme_void(base_size = 6, base_family = body_font) +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(\n      fill = bg_col,\n      color = bg_col,\n    ),\n    panel.grid.major = element_line(\n      color = alpha(text_col, 0.1)\n    ),\n    # add and position text\n    plot.tag.position = c(-0.01, 0.12),\n    plot.tag = ggtext::element_textbox_simple(\n      color = text_col,\n      hjust = 0,\n      maxwidth = grid::unit(200, \"pt\"),\n      margin = margin(\n        l = 15, t = 5, b = 10\n      )\n    )\n  )\nstyled_map\n\n\n\n\n\n\nFigure 9.10: Points representing different time zone locations on a world map, with points colored by geographical region. Title and subtitle are shown in the bottom left.\n\n\n\n\n\n9.5.5 Join with {patchwork}\nFinally, we need to join the legend bar chart to our main plot. For this, we’ll use the {patchwork} package (Pedersen 2024) - just as we did in Chapter 3 to assemble multiple plots into a grid.\nIn this visualisation, rather than arranging plots side by side, we instead want to position one plot (bar chart) on top of another (main map). We start with our styled_map and add the legend_plot on top using the inset_element() function. The four positions given in the inset_element() function are the left, bottom, right, and top outer bounds of the inset plot. The default unit is npc (normalised parent coordinates). In this setting the bottom left is (0, 0) and the top right is (1, 1). This means specifying the left outer bound as 0.55 tells {patchwork} to start the left hand side of the inset plot 55% of the way in from the left of the main plot. \nWe also remove the added margin from around the edge of the plot using the theme() function and setting all of the margins to zero. Remember that when combining a theme() with a patchwork object, it’s added using the & operator rather than +. \n\nlibrary(patchwork)\nstyled_map + inset_element(legend_plot, 0.55, 0, 1, 0.3) &\n  theme(plot.margin = margin(0, 0, 0, 0))\n\n\n\n\n\n\nFigure 9.11: Points representing different time zone locations on a world map, with points colored by geographical region. Title and subtitle are shown in the bottom left, with an inset bar chart shown on the bottom right being used as a legend.\n\n\n\n\nNow our map is finished!",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Time Zones: spatial data and mapping with {sf}</span>"
    ]
  },
  {
    "objectID": "time-zones.html#reflection",
    "href": "time-zones.html#reflection",
    "title": "9  Time Zones: spatial data and mapping with {sf}",
    "section": "\n9.6 Reflection",
    "text": "9.6 Reflection\nWhat could still be improved about this plot?\nAlthough the bar chart legend is an improvement on a boring, traditional legend, it could do with some further improvement. For example, it’s not immediately clear what the bar chart shows. With a little bit of time, readers probably put together the number of dots with the height of the bars but it could be more obvious. Adding numbers to the bar chart would also improve readability. Perhaps this could be with a traditional y-axis, or perhaps as more informative labels. For example, instead of a label that reads \"Africa\", it could read \"Africa (18 time zones)\".\nIf we’re talking about improving readability of bar charts, an easy action is to make the bars (and therefore text) horizontal - it’s much easier to read text that’s the right way up!\nEach plot created during the process of developing the original version of this visualisation was captured using {camcorder}, and is shown in the gif below. If you’d like to learn more about how {camcorder} can be used in the data visualisation process, see Section 14.1.\n\n\n\n\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Time Zones: spatial data and mapping with {sf}</span>"
    ]
  },
  {
    "objectID": "us-house-elections.html",
    "href": "us-house-elections.html",
    "title": "10  US House Elections: geography on a grid with {geofacet}",
    "section": "",
    "text": "Caution\n\n\n\nThis chapter is coming soon!\n\n\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>US House Elections: geography on a grid with {geofacet}</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html",
    "href": "technology-adoption.html",
    "title": "11  Technology Adoption: making gauge charts with {ggforce}",
    "section": "",
    "text": "11.1 Data\nThe Cross‐country Historical Adoption of Technology (CHAT) dataset (Comin and Hobijn 2009) contains information on the adoption of over 100 technologies in more than 150 countries, spanning over 200 years. Most of the data is annual data, and covers technology categories including, but not limited to, agriculture, communications, transport, and finance - encompassing as broad a definition of technology as possible (Comin and Hobijn 2009).\nThe CHAT dataset was used as a #TidyTuesday dataset in July 2022, so let’s start by reading in the data using the tidytuesdayR R package (Hughes 2022b) and looking at the definitions of the variables:\ntuesdata &lt;- tidytuesdayR::tt_load(\"2022-07-19\")\ntechnology &lt;- tuesdata$technology\nThe technology data is reasonably large with 491636 rows and 7 columns.\nhead(technology)\n\n# A tibble: 6 × 7\n  variable label       iso3c  year group\n  &lt;chr&gt;    &lt;chr&gt;       &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;\n1 BCG      % children… AFG    1982 Cons…\n2 BCG      % children… AFG    1983 Cons…\n3 BCG      % children… AFG    1984 Cons…\n4 BCG      % children… AFG    1985 Cons…\n5 BCG      % children… AFG    1986 Cons…\n6 BCG      % children… AFG    1987 Cons…\n# ℹ 2 more variables: category &lt;chr&gt;,\n#   value &lt;dbl&gt;\nThe data is in long format with the variable (and label) columns containing information on what variable the row relates to e.g. \"% children who received a BCG immunization\" or \"Land naturally regenerating forest area 1000 ha\". The iso3c column gives the ISO3 code for the country the row relates to, and similarly the year column relates to the relevant year. The group column details whether the variable is related to \"Consumption\", \"Production\", \"Non-Tech\" (such as GDP), or \"Creation\". The category column contains information about which category the variable falls into e.g. \"Vaccines\" or \"Agriculture\". Finally, the value column provides the value of the variable for the given year and country.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Technology Adoption: making gauge charts with {ggforce}</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#exploratory-work",
    "href": "technology-adoption.html#exploratory-work",
    "title": "11  Technology Adoption: making gauge charts with {ggforce}",
    "section": "\n11.2 Exploratory work",
    "text": "11.2 Exploratory work\nGiven the large scale of this data (in terms of time frame, spatially, and range of variables), there are many aspects we could look into further. What might be an interesting aspect of this data to visualize?\n\n11.2.1 Data exploration\nAs in other chapters in this book, we’ll start with some basic exploratory plots in base R. For example, we may look at the distribution of variables in each category using the barplot() function:\n\n# increase left margin\npar(mar = c(5.1, 8.1, 4.1, 2.1))\nbarplot(\n  table(technology$category),\n  # make labels smaller so they fit on the page\n  cex.axis = 0.5,\n  cex.names = 0.5,\n  las = 1,\n  horiz = TRUE\n)\n\n\n\n\n\n\nFigure 11.1: Bar chart of number of observations (all years, countries, and variables) in each category.\n\n\n\n\nWe have lots of observations relating to variables in the agriculture and transport categories. We could also look at how the number of values in these categories has changed over time, using the heatmap() function in base R: \n\nheatmap(\n  table(technology$category, technology$year),\n  # prevent re-ordering\n  Rowv = NA,\n  Colv = NA,\n  # make labels smaller so they fit on the page\n  margins = c(3, 6),\n  cexRow = 0.5,\n  cexCol = 0.5\n)\n\n\n\n\n\n\nFigure 11.2: Heatmap of number of observations (all countries and variables) in each category, each year. An increasing number of observations are seen in recent years.\n\n\n\n\nLet’s look into a specific variable in more detail. We need to narrow down the data we want to consider - there are 194 different questions (variables) contained in the data. You can check by running length(unique(technology$label)). One variable we could consider further is the percentage of children who received a measles immunization - indicated by the \"pctimmunizmeas\" level in the variable column. Let’s create a quick scatter plot of how this percentage has been changing over time: \n\npctimmunizmeas_df &lt;- subset(\n  technology, variable == \"pctimmunizmeas\"\n)\nplot(\n  x = pctimmunizmeas_df$year,\n  y = pctimmunizmeas_df$value,\n  xlab = \"\", ylab = \"\",\n  cex = 0.6,\n  main = \"Percentage of children who received\\na measles immunization\"\n)\n\n\n\n\n\n\nFigure 11.3: Scatter plot of percentage children who received a measles immunization between 1980 and 2019, hinting at an upward trend.\n\n\n\n\nFor obvious reasons (the timing of when the first measles vaccine was created and rolled out across the world), the data does not span for 200 years for this variable. Nonetheless, it looks like there is perhaps an increasing trend over time. It’s a little bit difficult to see because we have data from lots of countries on one plot, including some whose values were already high at the start of the time series.\nA list of all ISO3 country codes can be obtained by running unique(technology$iso3c), and from there we can choose a subset of countries we want to look at in more detail. Let’s look at Great Britain, USA, Sweden, Brazil, New Zealand, and Venezuela, and store these choices in a vector called countries.\nAlthough including all years of data would better allow us to consider trends in the values, sometimes looking at a only a few snapshots can be more effective. For example, by considering only the years 1980 and 2010 as we’ll do here, readers get a Wow, look how much things have changed! message rather than the perhaps less impactful visual of a gradual trend. We can use the filter function from {dplyr} to filter our technology data set to consider only the rows showing data about the percentage of children who received a measles immunization, in the years 1980 or 2010, and relating to countries in our specified vector of countries.\nWe no longer need the group, category, variable, or label columns, as these are constant for our data so we can remove these columns using select() from {dplyr}.\n\n# subset of countries to look at further\ncountries &lt;- c(\"GBR\", \"USA\", \"SWE\", \"BRA\", \"NZL\", \"VEN\")\n\n# subset data for specific topic, years, and countries\nmeasles_data &lt;- technology |&gt;\n  dplyr::filter(\n    label == \"% children who received a measles immunization\",\n    year %in% c(1980, 2010),\n    iso3c %in% countries\n  ) |&gt;\n  dplyr::select(-c(group, category, variable, label))\nhead(measles_data)\n\n# A tibble: 6 × 3\n  iso3c  year value\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 BRA    1980    57\n2 BRA    2010    99\n3 GBR    1980    53\n4 GBR    2010    89\n5 NZL    1980    80\n6 NZL    2010    91\n\n\nOur tidier data now shows just the percentage (value) of children who received a measles immunization in each country (iso3c), in each of 1980 and 2010 (year), How might we visualize this data?\nThere are a couple of obvious options that come to mind: a simple grouped bar chart, a slope chart, or indeed the (not often popular) pie chart. Our choice of data visualization will depend on which aspects of the data we want to show. Do we want to compare 1980 to 2010? Do we want to compare countries to each other? Do we just want to show the range of values in the data? In this data, the most interesting example is a comparison between 1980 and 2010. Although a slope chart would likely work well for this data, we’re going a little bit more experimental with a gauge chart.\nAt the time of writing, there isn’t a built-in function in {ggplot2} to create gauge charts. If you’ve never heard of a gauge chart, this initial sketch might give you an idea of what we’re aiming for.\n\n11.2.2 Exploratory sketches\nYou can think of a gauge chart as being a stacked bar chart with curved over a half circle. Here, rather than one stacked bar chart, we have two stacked bar charts.\n\n\n\n\n\nFigure 11.4: Initial sketches of a ideas for visualising data for a single country\n\n\nGauge charts often also include a dial (or needle) to highlight the value further, but that gets a little bit complicated when we have multiple gauges. So let’s leave that for now.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Technology Adoption: making gauge charts with {ggforce}</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#preparing-a-plot",
    "href": "technology-adoption.html#preparing-a-plot",
    "title": "11  Technology Adoption: making gauge charts with {ggforce}",
    "section": "\n11.3 Preparing a plot",
    "text": "11.3 Preparing a plot\nGauge charts are not a built-in feature of {ggplot2}, so we’re going to have to do a little bit of manual preparation before we start plotting.\n\n11.3.1 Data wrangling\nWe could use geom_col() and coord_polar() to try to make a gauge chart natively in {ggplot2}. However, the use of polar coordinates in {ggplot2} often makes it difficult to add elements such as annotations in the position you’d like them to be in. So let’s create a gauge chart a slightly different way! \nThe value in the data currently tells us the percentage of children who did have an immunization, we also need to calculate the percentage of children who did not - by subtracting value from 100. We can then pivot the data such that each country has two rows in the data: (i) one row for the did have immunization value in 1980 and 2010, and (ii) one row for the did not have immunization value in 1980 and 2010. We end up with something halfway in between wide and long format data. Let’s also make the YN column (indicating a did/did not have immunization row) into a factor.\n\nmeasles_YN &lt;- measles_data |&gt;\n  dplyr::mutate(no_value = 100 - value) |&gt;\n  tidyr::pivot_longer(\n    cols = c(value, no_value),\n    names_to = \"YN\",\n    values_to = \"perc\"\n  ) |&gt;\n  tidyr::pivot_wider(\n    names_from = \"year\",\n    values_from = \"perc\"\n  ) |&gt;\n  dplyr::mutate(YN = factor(YN))\n\nTo enable us to work with the percentages more easily, we can convert them into values between 0 and 1 by dividing by 100, and drop the original columns. If you think about creating a stacked bar chart, we need to know the end point of each bar (the maximum y-axis value for each bar). This isn’t the percentage of each group, it’s the cumulative percentage of each group and the ones stacked below it. We use the cumsum() function to calculate the cumulative sum of the percentages across each year and country: \n\nplot_data &lt;- measles_YN |&gt;\n  dplyr::mutate(\n    perc_1980 = `1980` / 100,\n    perc_2010 = `2010` / 100\n  ) |&gt;\n  dplyr::select(-c(`1980`, `2010`)) |&gt;\n  dplyr::group_by(iso3c) |&gt;\n  dplyr::mutate(\n    ymax_1980 = cumsum(perc_1980),\n    ymax_2010 = cumsum(perc_2010)\n  )\nhead(plot_data)\n\n# A tibble: 6 × 6\n# Groups:   iso3c [3]\n  iso3c YN       perc_1980 perc_2010\n  &lt;chr&gt; &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;\n1 BRA   value         0.57      0.99\n2 BRA   no_value      0.43      0.01\n3 GBR   value         0.53      0.89\n4 GBR   no_value      0.47      0.11\n5 NZL   value         0.8       0.91\n6 NZL   no_value      0.2       0.09\n# ℹ 2 more variables: ymax_1980 &lt;dbl&gt;,\n#   ymax_2010 &lt;dbl&gt;\n\n\nYou’ll notice that the ymax_* values are always 1 for the no_value rows - this is because the no_value is the last bar so we will always have plotted 100% of the data by the time we’ve finished that bar. Note that the data is currently still grouped by iso3c - this will be important later!\n\n11.3.2 The {ggforce} extension package\nThe {ggforce} extension package (Pedersen 2022) contains many useful functions which extend the behavior of {ggplot2}, many of them aimed at exploratory data visualisation. We won’t cover many of it’s functions in this chapter, and instead we’ll focus on how to use it to create gauge charts. {ggforce} is available on CRAN and can be installed with the usual install.packages(\"ggforce\") command.\n\n11.3.3 Gauge charts with {ggforce}\nThe function that we’re interested in for the purposes of creating a gauge chart is geom_arc_bar() . The geom_arc_bar() function makes it possible to draw arcs in {ggplot2}. You can also use this function to create visualizations such as donut charts or sunburst plots. We’ll use two calls to geom_arc_bar() to create the double gauge chart - one for the 1980 arc, and one for the 2010 arc. There are several required aesthetics when using geom_arc_bar():\n\n\nx0: The x-coordinate of the centre of the circle that the gauge chart lies on. For us, this will be a constant value so we can choose any number - 0 seems like an obvious choice.\n\ny0: The y-coordinate of the centre of the circle that the gauge chart lies on. For us, this will be a constant value so we can choose any number - 0 seems like an obvious choice again.\n\nr0: The inner radius (from x0 and y0) of the arc.\n\nr: The outer radius (from x0 and y0) of the arc. The difference between r0 and r determines how thick the gauge chart will be. For each of the two arcs we will draw, these will be constant. For the outer arc (2010), we can set r0 = 0.7 and r = 1, and for the inner arc (1980), we can set r0 = 0.2 and r = 0.5. Note that the difference between the radii is 0.3 for both arcs so they are equally thick.\n\nstart: The starting angle for each segment in the arc.\n\nend: The ending angle for each segment in the arc.\n\nThe last part of data wrangling we need to do is compute the start and end values.\n\n11.3.4 Computing aesthetics\nThe end values are easy - these are the ymax_1980 and ymax_2010 columns that we already have. We need to compute the equivalent ymin_1980 and ymin_2010 values: what are the minimum values in each stacked bar chart?\nThink again about stacked bar charts instead of gauge charts for a second (since it’s a little bit easier to visualise). The minimum value for the first bar at the bottom of the stack will always be zero - it’s right at the bottom. For the rest of the stacked bars, the minimum value will be equal to the maximum value of the bar stacked below it. This means that we’ve actually already computed all the values we need and stored them in plot_data. We just need to rearrange them a bit…\n\n\n\n\n\n\nTip 11.1: Just because you can doesn’t mean you should\n\n\n\nThere is almost certainly a nicer way of doing this in base R that contains fewer lines of code and is easier to read. Consider the following code block as an experiment in seeing whether we could do this in a piped workflow, without considering whether we should…\n\n\nLet’s start with the 1980 data. We start off by creating the 0 values for the minimum in the first stacked bar using rep(0, length(countries)) - since we need one 0 for each country in 1980. We then want to get the ymax_1980 values from plot_data except the last one. We therefore use slice_head() to get this subset of the rows (missing the last one in each country). Remember that plot_data is still grouped by iso3c. We then stick these ymax_1980 to the 0 we created and pass them into a new column called ymin_1980 using mutate(). The code for the 2010 arc is analogous. \n\nymin_data &lt;- plot_data |&gt;\n  dplyr::ungroup() |&gt;\n  # start values for 1980 arc\n  dplyr::mutate(\n    ymin_1980 = c(rbind(\n      rep(0, length(countries)),\n      (dplyr::slice_head(plot_data, n = -1) |&gt;\n        dplyr::pull(ymax_1980))\n    ))\n  ) |&gt;\n  # repeat for 2010\n  dplyr::mutate(\n    ymin_2010 = c(rbind(\n      rep(0, length(countries)),\n      (dplyr::slice_head(plot_data, n = -1) |&gt;\n        dplyr::pull(ymax_2010))\n    ))\n  )\n\nAll of our variables are currently scaled between 0 and 1 (since they relate to percentages). To plot this as an arc however, we need to convert this to polar coordinates. We want to start our arc at \\(-\\pi/2\\) (instead of 0) and end at \\(\\pi/2\\) (instead of 1). We can use the rescale() function from the {scales} package (Wickham, Pedersen, and Seidel 2023) to define the range we want to scale from and to. \nWe want to apply this to every column of ymin_data that starts with a lowercase \"y\" i.e. all of the ymax_* and ymin_* columns so we use mutate() and across() from {dplyr} in conjunction with the starts_with() column selector function. We need to make sure we set ignore.case = FALSE to prevent {dplyr} from trying to rescale the YN column as well. \n\n\n\n\n\n\nTip 11.2: Older versions of mutate()\n\n\n\nIn older versions of {dplyr} (including when this plot was originally made), the mutate_at() function would have been used instead of mutate() and across(). The mutate_at() function has now been superseded.\n\n\n\ngauge_data &lt;- ymin_data |&gt;\n  dplyr::mutate(\n    dplyr::across(\n      dplyr::starts_with(\"y\", ignore.case = FALSE),\n      ~ scales::rescale(.,\n        to = pi * c(-0.5, 0.5),\n        from = 0:1\n      )\n    )\n  )\nhead(gauge_data)\n\n# A tibble: 6 × 8\n  iso3c YN       perc_1980 perc_2010\n  &lt;chr&gt; &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;\n1 BRA   value         0.57      0.99\n2 BRA   no_value      0.43      0.01\n3 GBR   value         0.53      0.89\n4 GBR   no_value      0.47      0.11\n5 NZL   value         0.8       0.91\n6 NZL   no_value      0.2       0.09\n# ℹ 4 more variables: ymax_1980 &lt;dbl&gt;,\n#   ymax_2010 &lt;dbl&gt;, ymin_1980 &lt;dbl&gt;,\n#   ymin_2010 &lt;dbl&gt;\n\n\n\n11.3.5 The first plot\nWe’re now finished with the data wrangling (finally!) and ready to create our first plot. As always, we start with the ggplot() function and pass in gauge_data that will be used for plotting the arcs. The aesthetics for each arc will vary so we’ll hold off on passing them in globally. \nWe then add two arcs by using geom_arc_bar() twice. We set the x0, y0, r0, and r constants as we described above. Even though we have chosen constant values for the aesthetics, they still need to be inside the aes() function because they are required aesthetics. We then pass the ymin_* and ymax_* columns in as the start and end aesthetics, and set the fill color based on the YN column. \nWe also use facet_wrap() to draw a pair of arcs for each country in a separate facet, choosing to use nrow = 2 to give us a nice rectangular 3x2 grid of facets for our six countries. \n\nlibrary(ggplot2)\nbasic_plot &lt;- ggplot(data = gauge_data) +\n  # Outer 2010 arc\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010,\n      fill = YN\n    )\n  ) +\n  # Inner 1980 arc\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980,\n      fill = YN\n    )\n  ) +\n  facet_wrap(~iso3c, nrow = 2)\nbasic_plot\n\n\n\n\n\n\nFigure 11.5: Initial plot created using geom_arc_bar() from {ggforce}, facetted by different countries.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Technology Adoption: making gauge charts with {ggforce}</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#advanced-styling",
    "href": "technology-adoption.html#advanced-styling",
    "title": "11  Technology Adoption: making gauge charts with {ggforce}",
    "section": "\n11.4 Advanced styling",
    "text": "11.4 Advanced styling\nWe now have a double gauge chart - but it could look a lot nicer (and more informative)!\n\n11.4.1 Colors\nLet’s start by defining some variables for our colors. Here, we define a highlight_col which we’ll use for the segment showing the percentage who did have immunizations. This should be a bright, eye-catching color as it’s the main point we’re trying to communicate. The second_col will be used to show the percentage who did not have immunizations, so we can choose a color that is a little bit more similar to the background. The background (bg_col) will be a light gray, the second_col will be a medium gray, and the text (text_col) will be black.\n\nhighlight_col &lt;- \"#990c58\"\nsecond_col &lt;- \"#949398\"\nbg_col &lt;- \"#dedede\"\ntext_col &lt;- \"black\"\n\nBefore we add the new colors to our gauge chart, let’s remove the black outline from around the segments - they’re quite thick lines which don’t add anything to the plot. There will be sufficient contrast between the segments with the new colors we’ve chosen. You can remove the outline from the arc by setting color = NA outside of the aesthetic mapping:\n\nbasic_plot &lt;- ggplot(data = gauge_data) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010,\n      fill = YN\n    ),\n    color = NA\n  ) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980,\n      fill = YN\n    ),\n    color = NA\n  ) +\n  facet_wrap(~iso3c, nrow = 2)\n\nNow we can apply the colors using scale_fill_manual() from {ggplot2}, setting both the color values but also more informative labels for the legend at the same time. \n\ncolor_plot &lt;- basic_plot +\n  scale_fill_manual(\n    breaks = c(\"value\", \"no_value\"),\n    labels = c(\"Immunized\", \"Not Immunized\"),\n    values = c(highlight_col, second_col)\n  )\ncolor_plot\n\n\n\n\n\n\nFigure 11.6: Edited version of the previous plot with colors changed from defaults to grey and dark pink.\n\n\n\n\n\n11.4.2 Text and fonts\nAs we’ve seen in previous chapters, we can load in Google fonts using the {sysfonts} and {showtext} packages. Here, we’ll keep it clean and minimal by using the \"Ubuntu\" font for both the title and the body font. \n\nsysfonts::font_add_google(name = \"Ubuntu\", family = \"ubuntu\")\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font &lt;- \"ubuntu\"\n\nLet’s define some text for the title and subtitle. Here, the title is simple (it could perhaps be a little more descriptive or interesting). The subtitle gives a brief explanation of how to interpret the plot, and the main conclusion that we want the reader to take away.\n\ntitle &lt;- \"Measles Immunizations\"\nsubtitle &lt;- \"The inner bar represents the percentage of children who received a measles immunization in 1980, whilst the outer bar represents the percentage in 2010. An increase in immunization levels between 1980 and 2010 is seen across all countries.\"\n\nWe also create a custom caption with Font Awesome icons, as described in Chapter 5. Remember to update the caption variable to include the source of the data for this visualisation.\n\nsocial &lt;- social_caption(\n  icon_color = highlight_col,\n  font_color = text_col,\n  bg_color = bg_col,\n  font_family = body_font\n)\ncaption &lt;- glue::glue(\n  \"**Data**: data.nber.org (10.3386/w15319)&lt;br&gt;**Graphic**: {social}\"\n)\n\nSince the axis labels do not make too much sense for geom_arc_bar() plots, we’ll remove them later when using the theme functions. Instead, we can add our own labels using geom_text() to the end of the gauges. To make it easier, we can construct a small data.frame specifically for adding text labels. This includes the x, and y coordinates where the text should be positioned (you can read these off from the graph we already have since we haven’t yet deleted the axis labels), as well as the label that should appear.\n\ntext_df &lt;- data.frame(\n  x = c(0.35, 0.85),\n  y = c(-0.1, -0.1),\n  label = c(1980, 2010)\n)\n\nWe can then add this text to the existing plot by adding a layer with geom_text(), noting that we need to specify the data argument as using the text data.frame we just created. We also need to specify the font family and size directly within the geom_text() function, and can add the title and subtitle text created earlier using the labs() function from {ggplot2}.\n\ntext_plot &lt;- color_plot +\n  geom_text(\n    data = text_df,\n    mapping = aes(x = x, y = y, label = label),\n    family = body_font,\n    size = 3\n  ) +\n  labs(\n    title = title,\n    subtitle = subtitle,\n    caption = caption\n  )\ntext_plot\n\n\n\n\n\n\nFigure 11.7: Previous plot with additional labels indicating the year on each gauge chart, as well as an added title and subtitle.\n\n\n\n\n\n11.4.3 Adjusting themes\nWe’ll start by removing all of the theme elements such as the grey background, grid lines, and axis labels. The easiest way to do this is using theme_void(). We can use the base_family argument of theme_void() to set the font family that will be used by default for any non-geom text elements that remain.\nYou may have noticed that the current gauge plots look a bit squashed and not exactly semi-circular. We can fix this by adding coord_fixed() which forces a 1:1 aspect ratio on the plot panel.\n\ntheme_plot &lt;- text_plot +\n  coord_fixed() +\n  theme_void(base_size = 8.5, base_family = body_font)\ntheme_plot\n\n\n\n\n\n\nFigure 11.8: Edited version of previous plot with fixed coordinate system to prevent squashing, and all theme elements removed.\n\n\n\n\nThis looks better but it’s still not great. What do we still need to improve with styling?\n\nThe title text doesn’t stand out and blends in to easily with the subtitle, similarly for the facet text. Perhaps a bold font would help?\nThe subtitle text doesn’t fit onto the page but we can fix that with the help of the hopefully now familiar element_textbox_simple() function from {ggtext}.\nThe caption text also hasn’t rendered correctly since {ggplot2} doesn’t know how to process HTML text on its own without the help of {ggtext}.\nSince we’re using coord_fixed() to force a specific aspect ratio, there are now some odd spacing issues - there is a large white gap at the top and bottom of the plot, and the year labels are slightly cut off at the bottom.\nThe legend takes up a lot of space and isn’t very informative.\n\n \nLet’s fix the first three of these issues by editing the theme() elements:\n\nWe use element_textbox_simple() for the plot title, subtitle, and caption, and left align all three.\nWe set face = \"bold\" for the title and facet strip.text and increase the font size using the rel() function.\nAs we’ve done in previous visualisation, we also set the background colors to bg_col and add some padding around the edges by setting the plot.margin argument.\n\n\n\nstyled_plot &lt;- theme_plot +\n  theme(\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    strip.text = element_text(\n      face = \"bold\", size = rel(1.2)\n    ),\n    plot.title = ggtext::element_textbox_simple(\n      margin = margin(b = 5),\n      hjust = 0,\n      halign = 0,\n      face = \"bold\",\n      size = rel(1.5)\n    ),\n    plot.subtitle = ggtext::element_textbox_simple(\n      margin = margin(b = 10),\n      hjust = 0,\n      halign = 0\n    ),\n    plot.caption = ggtext::element_textbox_simple(\n      margin = margin(t = 10),\n      hjust = 0,\n      halign = 0\n    ),\n    plot.margin = margin(5, 5, 5, 5)\n  )\nstyled_plot\n\n\n\n\n\n\nFigure 11.9: Further styling of gauge chart to change background color, prevent overlapping in the subtitle text, and increase the size of the title.\n\n\n\n\nWe’re almost there, but the year label text remains slightly squashed. Part of the problem is how much space the legend takes up - it’s leaving too much empty space in the top and bottom right corners, whilst taking away space from other places where we need more of it.\n\n11.4.4 Designing a better legend\nWe have a few different options for dealing with the legend. Some options for a better legend:\n\nLeave the legend as it is but reposition it to above or below the main chart, rather than to the right, and put it into a single row. Then it would take up less space. We would also need to add a better title (or remove the title completely).\nWe could design a custom legend, similar to the one created in Chapter 10. This might be a good option as double gauge charts are less common and readers might be less familiar with them. Adding additional information about how they work might prove helpful.\nWe could instead use colored text in the subtitle to indicate what the categories are, as we did in Chapter 4 and Chapter 5. For this visualisation, highlighting the Immunized would be enough as there are only two categories.\n\nWhat might a custom legend look like? A custom legend could be a subset of the full plot with some additional annotations. For example, we could subset the data to only include one country (\"USA\" in this case) and recreate the plot we already have. Here, we also remove the built-in legend and add a How do I read this plot? title.\n\nlegend_plot &lt;- ggplot(\n  data = dplyr::filter(gauge_data, iso3c == \"USA\")\n) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0, r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010, fill = YN\n    ),\n    color = NA\n  ) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0, r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980, fill = YN\n    ),\n    color = NA\n  ) +\n  geom_text(\n    data = text_df,\n    mapping = aes(x = x, y = y, label = label),\n    family = body_font, size = 3\n  ) +\n  coord_fixed() +\n  scale_fill_manual(\n    breaks = c(\"value\", \"no_value\"),\n    labels = c(\"Immunized\", \"Not Immunized\"),\n    values = c(\"#990c58\", \"#949398\")\n  ) +\n  labs(title = \"How do I read this plot?\") +\n  facet_wrap(~iso3c, nrow = 2) +\n  theme_void() +\n  theme(\n    legend.position = \"bottom\",\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    strip.text = element_text(\n      face = \"bold\", size = rel(1.2)\n    ),\n    plot.title = ggtext::element_textbox_simple(\n      margin = margin(b = 5),\n      hjust = 0.5,\n      halign = 0.5,\n      face = \"bold\",\n      size = rel(1.5)\n    ),\n    legend.title = element_blank(),\n    plot.margin = margin(5, 5, 5, 5)\n  )\n\nWe might also add some annotations: first define a data.frame containing the positions and labels for the text, then add it to the plot using geom_text(). Note that we also set clip = \"off\" inside coord_fixed() to prevent the text getting cut off if it lies outside the range of the plot, and adjust the limits of the x and y axes. \n\n# Define the text and positions\nlegend_text &lt;- data.frame(\n  x = c(1.2, -1.1, -0.7),\n  y = c(0.4, 0.75, 0.95),\n  label = c(\n    \"% not immunized in 2010\",\n    \"% immunized in 2010\",\n    \"ISO3 country code\"\n  )\n)\n# Add to the legend plot\nlegend_with_text &lt;- legend_plot +\n  geom_text(\n    data = legend_text,\n    mapping = aes(\n      x = x, y = y,\n      label = stringr::str_wrap(label, 10)\n    ),\n    family = body_font, size = 3\n  ) +\n  scale_x_continuous(limits = c(-1.3, 1.3)) +\n  coord_fixed(clip = \"off\")\n\nAnd we could add some arrows using geom_segment() to direct the text:\n\nlegend_with_text +\n  annotate(\"segment\",\n    x = -0.5, xend = -0.2, y = 0.99, yend = 1.05,\n    arrow = arrow(length = unit(2, \"mm\"), type = \"closed\")\n  ) +\n  annotate(\"segment\",\n    x = 1.2, xend = 1.0, y = 0.25, yend = 0.15,\n    arrow = arrow(length = unit(2, \"mm\"), type = \"closed\")\n  ) +\n  annotate(\"segment\",\n    x = -1.1, xend = -0.95, y = 0.55, yend = 0.4,\n    arrow = arrow(length = unit(2, \"mm\"), type = \"closed\")\n  )\n\n\n\n\n\n\nFigure 11.10: Example of a custom legend with added annotations explaining the interpretation of the gauge chart.\n\n\n\n\nAs with previous examples, don’t be fooled into thinking that the positioning and sizing of the text and arrows is something that happened perfectly the first time. The values are often picked through a series of trial and error, and with practice you’ll get better at choosing starting values.\nWe could add this legend to the main plot, perhaps in the top right corner using {patchwork} (Pedersen 2024) as we did in Chapter 10. However, let’s stop and think for a second. How much value does this custom legend add? Do we really need to use so much space to identify the two categories on the chart? The years are already labelled, and it’s reasonably obvious that the three letters at the top represent a country. Maybe we don’t need a full custom legend. Would some colored text in the subtitle not be just as effective?\nHere, we use the glue() function from the {glue} package (Hester and Bryan 2024), along with some HTML code to color part of the subtitle text using the highlight_col. We also remove the original legend by setting legend.position = \"none\".\n\n# Define a better subtitle\nsubtitle &lt;- glue::glue(\n  \"The inner bar represents the &lt;span style='color: {highlight_col};'&gt;percentage of children who received a measles immunization&lt;/span&gt; in 1980, whilst the outer bar represents the percentage in 2010. An increase in immunization levels between 1980 and 2010 is seen across all countries.\"\n)\n# Add the new subtitle and remove the legend\nstyled_plot +\n  labs(subtitle = subtitle) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\nFigure 11.11: Further styling of gauge chart to remove the legend, and add colored text in the subtitle as an alternative.\n\n\n\n\nThis gives almost as much information as the custom legend idea, without taking up nearly as much space or providing as much of a distraction.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Technology Adoption: making gauge charts with {ggforce}</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#reflection",
    "href": "technology-adoption.html#reflection",
    "title": "11  Technology Adoption: making gauge charts with {ggforce}",
    "section": "\n11.5 Reflection",
    "text": "11.5 Reflection\nAre gauge charts the most effective method of visualising this data? No. Gauge charts have their own problems, some of which you can see here. Since the ring representing 2010 is on the outside, the radius is larger, and therefore the area is as well. If you measure the change on arc length between 1980 and 2010, you’ll get different answers to if you measured the proportional change in area for the two. Assuming we stick with the gauge chart idea, what further changes could be made to this plot to improve it?\n\nThere’s no reason to use country codes instead of country names in this situation, other than perhaps laziness. There is space available for the full names. Though many people could likely work out which countries are shown here by their country codes, there’s no need to make readers figure it out on their own. Providing the country names explicitly gives a reader less work to do, meaning they can focus on what you’re actually trying to show.\nSimilarly, providing the exact percentages as labelled text would make it easier to see what the change in immunization coverage is. It’s pretty clear that there has been an increase across all six countries, but the nature of gauge charts (no grid lines) makes it quite difficult to get the exact values. What’s the difference between Brazil and Sweden in 2010? It’s too difficult to tell here.\n\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Technology Adoption: making gauge charts with {ggforce}</span>"
    ]
  },
  {
    "objectID": "bee-colony-losses.html",
    "href": "bee-colony-losses.html",
    "title": "12  Bee Colony Losses: visualising density with Poisson disk sampling",
    "section": "",
    "text": "Caution\n\n\n\nThis chapter is coming soon!\n\n\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Bee Colony Losses: visualising density with Poisson disk sampling</span>"
    ]
  },
  {
    "objectID": "nobel-prize-laureates.html",
    "href": "nobel-prize-laureates.html",
    "title": "13  Nobel Prize Laureates: positioning text and parameterising plots",
    "section": "",
    "text": "13.1 Data\nIn this chapter, we’re going to explore Nobel Prize Laureates. Since 1901, the Nobel Prizes have been awarded to those who, during the preceding year, have conferred the greatest benefit to humankind. Awards are granted in the fields of Physics, Chemistry, Physiology or Medicine, Literature, Peace, and (since 1969) Economic Sciences.\nIn May 2019, the TidyTuesday challenge used several datasets about Nobel Prize Laureates and their publications. Those datasets contain data up to the year 2016. Since that data is now a little bit outdated, we’re going to look at an alternative way of obtaining the data and getting it into R - using an API!\nAn API (Application Programming Interface) is essentially a tool that lets different software programs communicate with each other (Harmon 2024). The Nobel Prize API endpoint (www.nobelprize.org 2024) can be accessed at https://api.nobelprize.org/2.1/laureates, with some instructions and guidance about how to use it available on the nobelprize.org website at www.nobelprize.org/organization/developer-zone-2, which also links to the Terms of Use.\nThis API doesn’t require an API key, so we don’t need to worry about registering, or authenticating an account. Instead, we simply pass the options into a URL and then read the CSV from that URL.\nLet’s look at the data for just one of the fields to start with: Physics. There are lots of different options available for accessing the API, but we only need to specify a few of them:\nWe construct a URL in the following format: the base API URL, followed by the endpoint, followed by a ?, then a list of query parameters separated by &. Here, the base URL is http://api.nobelprize.org/2.1/ and the endpoint is laureates. You can either (1) build the URL as one long character string, or (2) construct the strings separately and stick them together with glue() as we’ve done here. If you are making multiple, slightly different, API calls then the second approach is more appropriate since you can re-use the base URL.\nOnce we’ve constructed the URL, we simply pass it into read.csv() (or read_csv() from {readr} if you prefer) and save the output to a variable - nobel_physics in this case.\napi_url &lt;- \"http://api.nobelprize.org/2.1/laureates\"\nnobel_physics &lt;- read.csv(\n  glue::glue(\n    \"{api_url}?limit=250&nobelPrizeCategory=phy&format=csv\"\n  )\n)\nWe want to avoid querying the API multiple times if we don’t need to. Once we’ve downloaded the data, we can save it as a CSV file to allow us to use the data at a later point in time without re-querying the same query. We can use the write.csv() option to save the data to a file called nobel_physics.csv in an existing folder called data - you might choose to save it somewhere slightly different!\nwrite.csv(\n  nobel_physics,\n  \"data/nobel_physics.csv\",\n  row.names = FALSE\n)\nWe can keep using the existing nobel_physics object, or we can read it back in from the CSV file using read_csv():\nnobel_physics &lt;- readr::read_csv(\"data/nobel_physics.csv\")\nLet’s have a quick look at the data:\nhead(nobel_physics)\n\n# A tibble: 6 × 13\n     id name           gender birthdate \n  &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;  &lt;date&gt;    \n1   102 Aage N. Bohr   male   1922-06-19\n2   114 Abdus Salam    male   1926-01-29\n3   866 Adam G. Riess  male   1969-12-16\n4  1012 Alain Aspect   male   1947-06-15\n5    11 Albert A. Mic… male   1852-12-19\n6    26 Albert Einste… male   1879-03-14\n# ℹ 9 more variables: birthplace &lt;chr&gt;,\n#   deathdate &lt;date&gt;, deathplace &lt;chr&gt;,\n#   category &lt;chr&gt;, year &lt;dbl&gt;,\n#   share &lt;chr&gt;,\n#   overallmotivation &lt;chr&gt;,\n#   motivation &lt;chr&gt;,\n#   affiliations &lt;chr&gt;\nThe data contains information for 13 variables for 226 laureates. The id column uniquely identifies a Nobel laureate. The name, gender, birthdate, birthplace, deathdate, and deathplace are fairly self-explanatory variables relating to the individual laureate. The category variable gives us the field of the award e.g. Physics. The year they were awarded the prize is given in the year column. Nobel Prizes can be shared among multiple people, and the share column indicates what fraction of the award each individual has. For example, a value of \"1\" for share indicates the individual was the sole recipient, and a value of \"1/3\" indicates they were one of three recipients.\nThe overallmotivation and motivation columns give an explanation of the reason why an individual was awarded the prize, There are many missing values in the overallmotivation column and, for those that do have a non-missing value, this appears to be a more general statement than the one given in motivation. The Nobel Laureates affiliations are also listed in the affiliations column.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Nobel Prize Laureates: positioning text and parameterising plots</span>"
    ]
  },
  {
    "objectID": "nobel-prize-laureates.html#data",
    "href": "nobel-prize-laureates.html#data",
    "title": "13  Nobel Prize Laureates: positioning text and parameterising plots",
    "section": "",
    "text": "limit: how many results are returned. The default is 25 but there are more than 25 Nobel Laureates in physics so we need to use a higher value.\n\nnobelPrizeCategory: the field. The value is a three letter (lowercase) abbreviation for the field. For physics, the value is phy.\n\nformat: the output format. The options are JSON or CSV, and we’ll use CSV since these files are easier to work with in R.\n\n\n\n\n\n\n\nTip 13.1: Choosing an API Limit\n\n\n\nIt’s important to be polite and not make too many API requests at once, so don’t choose 1,000 if you need 20 results.\nIf you have a limit of 250 requests and the data returned contains 250 results, you may want to check if you actually have all of the results!",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Nobel Prize Laureates: positioning text and parameterising plots</span>"
    ]
  },
  {
    "objectID": "nobel-prize-laureates.html#exploratory-work",
    "href": "nobel-prize-laureates.html#exploratory-work",
    "title": "13  Nobel Prize Laureates: positioning text and parameterising plots",
    "section": "\n13.2 Exploratory work",
    "text": "13.2 Exploratory work\nThere are many different aspects of the data that we could explore: the demographics of the Nobel Laureates; how the geographical profile of awardees varies; or how the age of awardees has changed over time. Let’s have a look at the data to see if these are interesting questions to explore further.\n\n13.2.1 Data exploration\nLet’s start by exploring the relationship between year of birth and year of award. We would expect that the people born earlier in time, are also the people awarded Nobel Prizes earlier in time, and a scatter plot confirms this:\n\nplot(nobel_physics$birthdate, nobel_physics$year)\n\n\n\n\n\n\nFigure 13.1: A scatter plot of awardee birth date against year of award, showing the expected increasing trend.\n\n\n\n\nWe might be interested in seeing whether this relationship is changing over time. Essentially, is the age of awardees changing over time? We can use the year() function from {lubridate} to convert the birthdate into a year and subtract this from the award year to get an approximate age. Then plot this against the award year: \n\naward_age &lt;- nobel_physics$year -\n  lubridate::year(nobel_physics$birthdate)\nplot(nobel_physics$year, award_age)\n\n\n\n\n\n\nFigure 13.2: A scatter plot showing the age of Nobel Prize awardees over time, with a slight increasing trend suggested.\n\n\n\n\nIt looks like the age of awardees might be increasing slightly - this could be interesting to explore further. But let’s also look at the gender split for Nobel Laureates in Physics. We can calculate the number of \"male\" and \"female\" values in the gender column using the table() function, then plot it using barplot(): \n\nbarplot(\n  table(nobel_physics$gender)\n)\n\n\n\n\n\n\nFigure 13.3: A bar chart of the number of male and female Nobel Laureates in Physics, with a much higher number of male awardees.\n\n\n\n\nThis is quite a significant difference! Let’s find a way to communicate and highlight this disparity.\n\n13.2.2 Exploratory sketches\nWhen thinking about how to construct a visualization, it’s important to consider multiple factors (Rennie and Krause 2024):\n\nWhat message are you trying to convey?\nWho are you trying to reach and what is their background?\nWhat is the purpose of the visualization?\nDoes the way you’ve built that visualization support the purpose?\n\nLet’s say that the purpose of the visualization is to highlight the gender disparity in Nobel Prize awardees. Yes, the bar chart of how many male and female Nobel Laureates there are shows the disparity very clearly. It’s a simple message. But it’s not eye-catching. It’s not a visualization that really makes a reader stop and pay attention. And it aggregates data down to just two categories - ignoring that these are individual people.\nInstead, let’s think outside of the box are present the information in a very non-standard way:\n\n\n\n\n\nFigure 13.4: Initial sketch of text arranged perpendicularly around a circle, with text color based on gender.\n\n\nA bar chart would be a quicker, more efficient way of displaying how many male and female Nobel Laureates there are. A visualization of the names of every single Nobel Laureate might be a quicker, more efficient way of catching someone’s attention. This alternative visualization doesn’t sacrifice accuracy of information, but it might take a reader a little bit longer to digest the information. Whether that’s a sacrifice worth making comes back to what the purpose of the visualization is.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Nobel Prize Laureates: positioning text and parameterising plots</span>"
    ]
  },
  {
    "objectID": "nobel-prize-laureates.html#preparing-a-plot",
    "href": "nobel-prize-laureates.html#preparing-a-plot",
    "title": "13  Nobel Prize Laureates: positioning text and parameterising plots",
    "section": "\n13.3 Preparing a plot",
    "text": "13.3 Preparing a plot\nSo let’s start making our custom visualization! We start by defining a variable for the award category we’re interested in - Physics. This first step might seem a little odd since we’ve only queried the API for physics data anyway, but when you get to the last section of this chapter, it’ll make more sense!\n\nnobel_category &lt;- \"Physics\"\n\nIt’s always worth double checking that we do actually only have the data we expect… \n\nbarplot(\n  table(nobel_physics$category)\n)\n\n\n\n\n\n\nFigure 13.5: A bar chart of the number of Physics laureates (with a surprise appearance of a Chemistry laureate).\n\n\n\n\n…because sometimes you find something unexpected!\nEven though we’ve asked for only physics data from the API, the data also includes an entry relating to the Chemistry prize. If we read the documentation for the API, this gives us the explanation as to why. The API we’ve used relates to Nobel Laureates, not Nobel Prizes - meaning the list includes all laureates who have won a prize in Physics. Marie Curie won two Nobel Prizes - in 1903 for Physics, and in 1911 for Chemistry.\n\n13.3.1 Data wrangling\nWe’ll start by using filter() from {dplyr} to filter out any non-Physics entries, and then selecting only the columns we need for our plot: name, gender, and year. The data is currently arranged alphabetically based on name, so we’ll use the arrange() function to sort by year. \n\nphysics_data &lt;- nobel_physics |&gt;\n  dplyr::filter(category == nobel_category) |&gt;\n  dplyr::select(name, gender, year) |&gt;\n  dplyr::arrange(year)\n\nNow comes the tricky part of figuring out how to position the text in a circle. The first idea might be to simply plot the text in a line and then use the coord_polar() (or coord_radial()) function in {ggplot2} to transform the coordinate space. However, coord_polar() makes it really hard to position other elements such as annotations on the plot. \nWe could make use of the {ggplot2} extension package, {geomtextpath} (Cameron and van den Brand 2024), which allows you to write text in {ggplot2} that follows a curved path. But (just for the fun of it) let’s try to make the plot from scratch using only {ggplot2}.\nWe need to define the following to be able to position the text:\n\nthe x- and y- coordinates of where the text should end\nthe angle that the text should be positioned at\n\nTo calculate the x- and y- coordinates, we want to start thinking in polar coordinates. To keep it simple, let’s assume that the circle which the text is positioned around is centered at (0, 0). For the coordinates, this means we need to know:\n\nthe radius (r) of the circle: how far away from (0, 0) does the text start? This will be a constant value for all text labels.\nthe angle (theta) of arc: how far round the circle from the horizontal axis should the text appear? This value will vary for each text label since we want the labels to be equally spaces around the (semi-)circle.\n\nLet’s start by defining a variable for the radius. It doesn’t really matter what value you choose at this point since everything else can be re-scaled around a different radius.\n\nr &lt;- 5\n\n\n\n\n\n\nFigure 13.6: Sketch showing the relationship between the radius, angle, and position of the text in x- and y-coordinates.\n\n\nAssuming that we know the radius and angle of a point, we can calculate the x- and y- coordinates of a point using the following equations:\n\\[\\begin{equation*}\n\\begin{split}\nx & = r cos(\\theta) \\\\\ny & = r sin(\\theta)\n\\end{split}\n\\end{equation*}\\]\nWe don’t want to put the text all the way around the circle, since we want to leave some space to add the title as shown in Figure 13.4. We’ll leave a gap starting from \\(\\pi/4\\) (between 1 and 2 on a clock face) to \\(7\\pi/4\\) (between 4 and 5 on a clock face). We start by generating a sequence of equally spaced \\(\\theta\\) values, starting from \\(\\pi/4\\) and going to \\(7\\pi/4\\), with one value for each observation in the data. This is added as a new column in the data using mutate() from {dplyr}. We then calculate the x and y coordinates using the equations above and, again, add these as new columns to the data. \nThe angle of the text is a little bit more tricky. We want the text to be positioned perpendicular to the circle i.e. the angle of the text is different for each name. We can use the value of theta to calculate the angle of the text.\nWhen we later pass the angle value into {ggplot2} functions for plotting, it’s expected that the angle be expressed in degrees (rather than radians). For example, for vertical text, we would pass in angle = 90 rather than angle = pi/2. So we need to transform theta to degrees by dividing by \\(2\\pi\\) and multiplying by 360. To make the text the right way up (at least on the left side of the circle) we add 180 degrees. \n\nplot_data &lt;- physics_data |&gt;\n  dplyr::mutate(\n    theta = seq(\n      from = pi / 4,\n      to = (7 / 4) * pi,\n      length.out = nrow(physics_data)\n    ),\n    x = r * cos(theta),\n    y = r * sin(theta),\n    angle = 180 + 360 * (theta / (2 * pi))\n  )\n\nLet’s have a quick look at the data:\n\nhead(plot_data)\n\n# A tibble: 6 × 7\n  name    gender  year theta     x     y\n  &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Wilhel… male    1901 0.785  3.54  3.54\n2 Hendri… male    1902 0.806  3.46  3.61\n3 Pieter… male    1902 0.827  3.38  3.68\n4 Henri … male    1903 0.849  3.31  3.75\n5 Marie … female  1903 0.870  3.23  3.82\n6 Pierre… male    1903 0.891  3.14  3.89\n# ℹ 1 more variable: angle &lt;dbl&gt;\n\n\nNow we’re ready to start plotting with {ggplot2}!\n\n13.3.2 The first plot\nConstructing the base plot is reasonably straightforward - we’ve done the hard work in defining the x values, y values, the angles already. Since our plot is a visualisation of text data, we’ll use geom_text() to add the text. All we have to do is tell {ggplot2} what to put where! \nWe pass plot_data into the data argument, and then set the aesthetic mapping using aes(). The mappings are as you would expect: x goes on the x-axis, y goes on the y-axis, the label comes from the name column, the text angle is defined by the angle column we created, and the color is based on the values in the gender column. This mapping could be passed into either ggplot() or directly into geom_text() as we’ve done here. Since we’ll only be using one geometry for this plot, it won’t make a difference! \n\nlibrary(ggplot2)\nggplot() +\n  geom_text(\n    data = plot_data,\n    mapping = aes(\n      x = x, y = y,\n      label = name,\n      angle = angle,\n      color = gender\n    )\n  )\n\n\n\n\n\n\nFigure 13.7: The names of Nobel Prize in Physics awardees arranged in a semi-circle, with color indicating awardee gender. The text is too large, creating many overlapping labels.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Nobel Prize Laureates: positioning text and parameterising plots</span>"
    ]
  },
  {
    "objectID": "nobel-prize-laureates.html#more-advanced-styling",
    "href": "nobel-prize-laureates.html#more-advanced-styling",
    "title": "13  Nobel Prize Laureates: positioning text and parameterising plots",
    "section": "\n13.4 More advanced styling",
    "text": "13.4 More advanced styling\nAt first glance, this first plot might look like a complete mess but with a little bit of work it will soon start looking like Figure 13.4.\n\n13.4.1 Fonts\nLet’s start by choosing some fonts for our visualization. We’re going to pick two fonts:\n\n\ntitle_font: a bold font that will, as the name suggests, be used for the title. We’ll use Passion One - a display font with thick, bold strokes which make it ideal for titles.\na body_font: a simple font that will be used for all other text elements, including the text displaying the awardee names. This means the text will be used a quite a small font size, and so it’s important that it’s a clean and simple font. We’ll use Ubuntu - a sans serif font.\n\nBoth fonts are provided through Google Fonts so we’ll use font_add_google() from {sysfonts} to load them into R. We also run showtext_auto() and showtext_opts(dpi = 300) to use {showtext} for rendering text on plots at our desired resolution. \n\nsysfonts::font_add_google(\"Passion One\", \"Passion\")\nsysfonts::font_add_google(\"Ubuntu\", \"Ubuntu\")\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font &lt;- \"Ubuntu\"\ntitle_font &lt;- \"Passion\"\n\nNow, let’s remake our base_plot - this time also setting the font famly to body_font. We’ll also right align the text using hjust = 1 to make the text appear around the outer edge of the circle. The text also needs to be a bit smaller to avoid overlapping between names positioned next to each other. \n\nbase_plot &lt;- ggplot() +\n  geom_text(\n    data = plot_data,\n    mapping = aes(\n      x = x, y = y,\n      label = name,\n      angle = angle,\n      color = gender\n    ),\n    family = body_font,\n    hjust = 1,\n    size = 1\n  )\nbase_plot\n\n\n\n\n\n\nFigure 13.8: The names of Nobel Prize in Physics awardees arranged in a semicircle, with color indicating awardee gender. Much of the text lies outside of the plot area.\n\n\n\n\n\n13.4.2 Colors\nAs we’ve done in all previous chapters, we’ll define some variables for the colors we’ll be using in the visualization. Here, we’ll define a background color, a primary color, and a secondary color.\nThe primary color will be used to highlight the female awardees, as well as the title and caption text. The secondary color will be used to color the male awardee names. The primary color should be bolder or brighter than the secondary color - meaning a few pops of color on the chart will stand out and highlight the female awardees.\n\nbg_col &lt;- \"grey95\"\nprimary_col &lt;- \"black\"\nsecondary_col &lt;- \"grey75\"\n\nWe can apply these colors to the text showing the names using scale_color_manual() where we manually specify which color maps to which value in the gender column: \n\ncol_plot &lt;- base_plot +\n  scale_color_manual(\n    values = c(\n      \"male\" = secondary_col,\n      \"female\" = primary_col\n    )\n  )\n\n\n13.4.3 Adding text\nRather than adding a title and subtitle at the top of the plot, we’ll add them in the gap in the right hand side of the circle. We’ll use the annotate() function from {ggplot2} to add the text. Remember that for annotate(), we need to start by specifying the type of geometry we’re annotating - in this case, \"text\". \nWe’ll add two separate annotations: one for the title (Nobel Prize Laureates) and for a subtitle indicating the award category (Physics). The title and subtitle should be right-aligned, so we set the x-coordinate for each annotation to be equal to 10 and set hjust = 1. The title is vertically aligned with the center of the circle (at y = 0), and the subtitle slightly below it at y = -1. The font family is adjusted to either the body_font or title_font using the family argument, and the text size and color is also adjusted.\n\nannotated_plot &lt;- col_plot +\n  annotate(\"text\",\n    x = 10, y = 0,\n    label = \"Nobel Prize Laureates\",\n    hjust = 1,\n    color = primary_col,\n    family = title_font,\n    size = 7\n  ) +\n  annotate(\"text\",\n    x = 10, y = -1,\n    label = nobel_category,\n    hjust = 1,\n    color = primary_col,\n    family = body_font,\n    size = 5\n  )\nannotated_plot\n\n\n\n\n\n\nFigure 13.9: The names of Nobel Prize in Physics awardees arranged in a C-shape, with female awardees highlighted in a darker color. The text runs outside the plotting area, with annotations added to indicate the award category.\n\n\n\n\nWe can add a caption to the plot which contains: (i) a description of the data source, and (ii) the social media links from the social_caption() function we defined in Chapter 5. We make both the icons and text the same color - primary_col.\nWe’ll later use {ggtext} again to apply Markdown formatting to the caption, and so we add ** to make the words Data and Graphic in bold font. The HTML line break &lt;br&gt; separates the data source text and the social media caption onto two separate lines. We can join the data source text with the social media caption into one character string using the paste0() function. \n\nsocial &lt;- social_caption(\n  bg_color = bg_col,\n  icon_color = primary_col,\n  font_color = primary_col,\n  font_family = body_font\n)\ncap &lt;- paste0(\n  \"**Data**: The Nobel Foundation&lt;br&gt;**Graphic**: \",\n  social\n)\n\nWe then add this caption to our existing plot using the caption argument in the labs() function: \n\ntext_plot &lt;- annotated_plot +\n  labs(caption = cap)\n\n\n13.4.4 Adjusting themes\nAt the moment, the text isn’t arranged in a circle as such - it’s taking on more of an oval shape. To make sure it is displayed in a circle, we can use coord_fixed() to make sure that one unit on the x-axis is equal to one unit on the y-axis.\nThe limits of the plot also need to be extended. The scales are currently based on the x- and y- coordinates we passed in (the text at the inner edge of the circle) which means the text runs of the page. We can do this by extending the limits using scale_x_continuous() and scale_y_continuous(). We can extend the right hand side of the x-axis a little bit further to accommodate the added annotations. \n\nstyled_plot &lt;- text_plot +\n  scale_x_continuous(limits = c(-9, 12)) +\n  scale_y_continuous(limits = c(-7.5, 7.5)) +\n  coord_fixed()\nstyled_plot\n\n\n\n\n\n\nFigure 13.10: The names of Nobel Prize in Physics awardees arranged around a circle, with female awardees highlighted in a darker color. The default grid lines remain in the background.\n\n\n\n\nSince this is an artistic visualization, we want to remove the distracting grid lines and axis labels (which don’t make much sense for this type of plot). As we’ve done in earlier chapters (such as Chapter 9), we use theme_void() to remove these background theme elements. \nWe can some further, final customization by changing the following theme() elements: \n\nremoving the legend\nchanging the background color by passing in the bg_col variable to element_rect()\n\nusing element_textbox_simple() from {ggtext} to format the HTML tags that add the social media icons in the caption\n\n\nstyled_plot +\n  theme_void(base_size = 6, base_family = body_font) +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    plot.caption = ggtext::element_textbox_simple(\n      color = primary_col,\n      hjust = 0,\n      halign = 0,\n      lineheight = 0.5,\n      margin = margin(l = 5, b = 5)\n    )\n  )\n\n\n\n\n\n\nFigure 13.11: The names of Nobel Prize in Physics awardees arranged in an anti-clockwise direction, with female awardees highlighted in a darker color.\n\n\n\n\nAnd we now have a creative way of visualizing the recipients of the Nobel Prize for Physics! How might we go about visualizing the recipients of the other prize categories in a similar way?",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Nobel Prize Laureates: positioning text and parameterising plots</span>"
    ]
  },
  {
    "objectID": "nobel-prize-laureates.html#parameterized-plots",
    "href": "nobel-prize-laureates.html#parameterized-plots",
    "title": "13  Nobel Prize Laureates: positioning text and parameterising plots",
    "section": "\n13.5 Parameterized plots",
    "text": "13.5 Parameterized plots\nAlthough we could copy and paste the code we already have, and change out physics for peace everywhere, for example, this isn’t a sustainable approach if we’re not just looking to create one additional plot. What if we also want to create plots for medicine, economics, chemistry, and literature? That’s a lot of copy and pasting! Instead, we might want to think about creating our own function.\nThis can be really useful if, for example, you want to create a plot of sales performance for a given month. Let’s say last month you wanted to create a histogram of the sales for only last month. This month, you want to create the same histogram but with the data for only this month, Nothing other than the underlying data (and perhaps the title of the plot) should change. You could create a function that takes the month as an argument, filters the data, and then plots it with the updated title. You don’t have to rewrite the plotting code every month, you just need to call your custom plot function.\nThroughout this book, we’ve been using variables to store our choice of colors, and fonts. This makes it easier to quickly try out a new color scheme. But it also makes it easier to convert your code into a function: those variables just become function arguments!\nWhen we’re converting our code into a function, we need to think about what a user has to tell us, in order for the code to work. In the sales histogram example above, a user would need to specify which month they want the plot for. In our example of the Nobel Prize visualizations, a user need to specify:\n\nwhich category they want to plot (we can’t read their mind or know what data they have)\nwhat the data is called (we don’t know what they’ve called their data.frame)\nthe radius of the circle (we might need to vary this depending on how many observations are in a given category)\n\n\n\n\n\n\n\nTip 13.2: Checking columns exist\n\n\n\nThe data wrangling code assumes that year, name, gender, and category are columns that exist in the input data.frame. Since we’re working with data from an API that outputs it in a consistent format, this is a reasonable assumption to make. However, the API might change it some point. Or someone may want to use it with data sourced from somewhere else. To make the function more robust, we could add an initial step to check if those columns exist!\n\n\nNow, we can also think about adding arguments that a user could specify:\n\nbackground color\nprimary color\nsecondary color\nbody font\ntitle font\n\nFor these arguments, we can specify a default. This means that the function will work if a user doesn’t want to choose their own colors, but they are free to customize them if they choose to. None of these parameter choices make a fundamental difference to the plot created (other than how aesthetically pleasing it is).\n\n\n\n\n\n\nTip 13.3: Using fonts in functions\n\n\n\nHere, we’ve specified that the default title font is \"Passion\". A similar approach is used for the body font. Usually, I’d strongly recommend against such an approach since there’s no guarantee that a user will have the \"Passion\" font installed or loaded when running the function. This makes it a bad choice of default font.\nWe could add the sysfonts::font_add_google() code inside the function, but this also isn’t a good solution. We don’t want to re-install the font every time we run the function. A better option is to specify one of the integrated fonts as a default e.g. title_font = \"sans\".\n(Or at the very least, add instructions for how to load the fonts you’ve used as a default!)\n\n\nNow we can stitch together all the code we’ve used in this chapter, into the function body:\n\ncategory_plot &lt;- function(\n    nobel_category,\n    nobel_data,\n    r = 5,\n    bg_col = \"grey95\",\n    primary_col = \"black\",\n    secondary_col = \"grey70\",\n    body_font = \"Ubuntu\",\n    title_font = \"Passion\") {\n  # Data wrangling\n  category_data &lt;- nobel_data |&gt;\n    dplyr::filter(category == nobel_category) |&gt;\n    dplyr::select(name, gender, year) |&gt;\n    dplyr::arrange(year)\n  plot_data &lt;- category_data |&gt;\n    dplyr::mutate(\n      theta = seq(\n        from = pi / 4,\n        to = (7 / 4) * pi,\n        length.out = nrow(category_data)\n      ),\n      x = r * cos(theta),\n      y = r * sin(theta),\n      angle = 180 + 360 * (theta / (2 * pi))\n    )\n  # Text\n  social &lt;- social_caption(\n    bg_color = bg_col,\n    icon_color = primary_col,\n    font_color = primary_col,\n    font_family = body_font\n  )\n  cap &lt;- paste0(\n    \"**Data**: The Nobel Foundation&lt;br&gt;**Graphic**: \",\n    social\n  )\n  # Plot\n  g &lt;- ggplot() +\n    geom_text(\n      data = plot_data,\n      mapping = aes(\n        x = x, y = y,\n        label = name,\n        angle = angle,\n        color = gender\n      ),\n      family = body_font,\n      hjust = 1,\n      size = 1\n    ) +\n    scale_color_manual(\n      values = c(\n        \"male\" = secondary_col,\n        \"female\" = primary_col\n      )\n    ) +\n    annotate(\"text\",\n      x = 10, y = 0,\n      label = \"Nobel Prize Laureates\",\n      hjust = 1,\n      color = primary_col,\n      family = title_font,\n      size = 7\n    ) +\n    annotate(\"text\",\n      x = 10, y = -1,\n      label = nobel_category,\n      hjust = 1,\n      color = primary_col,\n      family = body_font,\n      size = 5\n    ) +\n    labs(caption = cap) +\n    scale_x_continuous(limits = c(-9, 12)) +\n    scale_y_continuous(limits = c(-7.5, 7.5)) +\n    coord_fixed() +\n    theme_void(base_size = 6, base_family = body_font) +\n    theme(\n      legend.position = \"none\",\n      plot.background = element_rect(\n        fill = bg_col, color = bg_col\n      ),\n      panel.background = element_rect(\n        fill = bg_col, color = bg_col\n      ),\n      plot.caption = ggtext::element_textbox_simple(\n        color = primary_col,\n        hjust = 0,\n        halign = 0,\n        lineheight = 0.5,\n        margin = margin(l = 5, b = 5)\n      )\n    )\n  return(g)\n}\n\nNow let’s test if our function works with a completely different set of data! Let’s use the Nobel Prize API again to download data on Nobel Peace Prize laureates. We edit the end of the API URL to use nobelPrizeCategory=pea (pea for peace) and then save the output to a CSV file, just as we did before for the physics data. \n\nnobel_peace &lt;- read.csv(\n  glue::glue(\n    \"{api_url}?limit=250&nobelPrizeCategory=pea&format=csv\"\n  )\n)\nwrite.csv(\n  nobel_peace,\n  \"data/nobel_peace.csv\",\n  row.names = FALSE\n)\n\nAgain, we can either keep working with the loaded data from the API, or read in the data from the CSV file: \n\nnobel_peace &lt;- readr::read_csv(\"data/nobel_peace.csv\")\n\nThen we pass the \"Peace\" category into our category_plot() function, alongside out newly downloaded nobel_peace data. The nobel_peace data doesn’t have quite as many observations as the nobel_physics data, so we can reduce the radius (r) slightly and start the text a little bit closer to the middle of the circle. We can also choose some different colors for the visualization (but leave the defaults for the fonts):\n\npeace_plot &lt;- category_plot(\n  \"Peace\",\n  nobel_peace,\n  r = 4,\n  bg_col = \"#FFEDE1\",\n  primary_col = \"#8B1E3F\",\n  secondary_col = \"#7286A0\"\n)\npeace_plot\n\n\n\n\n\n\nFigure 13.12: The names of Nobel Peace Prize awardees arranged in an anti-clockwise direction, with female awardees highlighted in pink.\n\n\n\n\nWhat you might notice about this version of the chart is that a third color has appeared! In scale_color_manual(), we only specified which colors relate to \"male\" and \"female\" laureates. However, the Nobel Peace Prize can also be awarded to an organization, not just an individual. The (newly appeared) grey text relates to organisations listed in the nobel_peace data.\nWe can save a copy of the visualization using ggsave(): \n\nggsave(\"peace_plot.png\", peace_plot, width = 5, height = 4)\n\n\n\n\n\n\n\nTip 13.4: Circular text with {ggtextcircle}\n\n\n\nThe {ggtextcircle} package (Rennie 2024a) implements this type of visualization in a generic way - if you want to create something similar with a different data set!",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Nobel Prize Laureates: positioning text and parameterising plots</span>"
    ]
  },
  {
    "objectID": "nobel-prize-laureates.html#reflection",
    "href": "nobel-prize-laureates.html#reflection",
    "title": "13  Nobel Prize Laureates: positioning text and parameterising plots",
    "section": "\n13.6 Reflection",
    "text": "13.6 Reflection\nWhen we’re evaluating our visualizations, it’s important to remember the purpose for which we built it and evaluate how well it achieves that purposes. This visualization of the gender split of Nobel Laureates is not a standard plot that aims to communicate numbers as efficiently as possible.\nThere are a few standard aspects of this visualization we may wish to improve:\n\nIt’s quite a hard visualization to understand without knowing what the colors and the order of the names represents. With a little bit of time and thought, a reader will likely pick out that the pink (for the Peace category plot) text represents female awardees. However, the ordering of the names in an anti-clockwise direction showing that the number of females awardees is generally increasing over time is much more difficult to pick up on. Add some text below the existing title and category label to explain how to interpret the visualization will help interested readers get the full message.\nIt’s a minimal visualization by design. But that means it doesn’t tell a reader the whole story. As we discussed earlier, Nobel Prizes can be awarded to multiple individuals. However, this visualization only shows awardees, and not whether they shared the prize with anyone else. Are female awardees more or less likely to share a prize than their male counterparts? You can’t tell from this visualization.\nFrom a technical (or artistic) perspective, we might also want to consider alternative designs. For example, placing the text to the left of, or below, the circle rather than to the right. We may want to include the start and finish positions of the text around the circle as arguments to the parameterized function.\n\nDespite the shortcomings when compared to more traditional visualizations, this approach is eye-catching and it does attract attention. Sometimes it’s not about the data visualization. Sometimes it’s about the art.\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Nobel Prize Laureates: positioning text and parameterising plots</span>"
    ]
  },
  {
    "objectID": "other-tricks.html",
    "href": "other-tricks.html",
    "title": "14  Other tips and tricks",
    "section": "",
    "text": "14.1 {camcorder} for recording gifs\n{camcorder} (Hughes 2022a) is an R package to track and automatically save graphics generated with {ggplot2}. You can set up your R session to use {camcorder} by running gg_record(). If you’re using RStudio, you’ll notice that your plots now appear in the Viewer tab rather than the Plots tab.\nlibrary(camcorder)\ngg_record(\n  width = 6,\n  height = 4\n)\nHave you ever spent ages tinkering with a plot you’re previewing in RStudio, before using ggsave() to save a higher resolution image, only to end up with the text looking ridiculously larger (or smaller) than you thought? Or do you struggle to preview plots with your desired aspect ratio? One of the nice features of using {camcorder} is the ability to preview plots with the same height, width, and resolution that you want your final plot to be in. Simply set the height, width, and dpi (and optionally units) arguments in gg_record() to your desired values. Then what you see is what you save!\nIf you’re reading the online version of this book, you will have seen several examples of gifs showing the visualization development process at the end of chapters. The gg_playback() function combines the previously saved images and saves them to a gif. You can set different preferences using the arguments in gg_playback(). For example, you can define the length of each frame in the gif, make the first and last frames longer or shorter, or set the background color.\ngg_playback(\n  name = \"data-viz.gif\",\n  first_image_duration = 4,\n  last_image_duration = 20,\n  frame_duration = .25,\n  background = bg_col\n)",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Other tips and tricks</span>"
    ]
  },
  {
    "objectID": "other-tricks.html#sec-camcorder",
    "href": "other-tricks.html#sec-camcorder",
    "title": "14  Other tips and tricks",
    "section": "",
    "text": "Tip 14.1: Setting the resolution of images\n\n\n\nThe RStudio Plots tab shows images at 96dpi, but the default in ggsave() is 300dpi. This is what causes the mismatch between the sizes of text and other elements. The default dpi in gg_record() is also 300dpi so it integrates nicely with ggsave(). \n\n\n\n\n\n\n\n\n\nTip 14.2: Transparent backgrounds in gifs\n\n\n\nSome of the built-in themes in {ggplot2} have a transparent background. If you’ve used these at some point during the development process, when you viewed them in RStudio the background likely appeared white. The default background color in gg_playback() is \"black\" - meaning that your gif might not quite look as you expect. Instead set the background color to something more sensible, for example your bg_col variable.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Other tips and tricks</span>"
    ]
  },
  {
    "objectID": "other-tricks.html#sec-code-style",
    "href": "other-tricks.html#sec-code-style",
    "title": "14  Other tips and tricks",
    "section": "\n14.2 Code formatting with {lintr} and {styler}",
    "text": "14.2 Code formatting with {lintr} and {styler}\nWriting code that follows a consistent style can make it easier for other people to read, makes collaboration simpler, and can help pick up code errors in your code more quickly. In R, the {lintr} package (Hester et al. 2024) checks for adherence to a specified coding style and identifies possible syntax errors, then reports them so you can take action. \nThe {styler} package (Müller and Walthert 2023) goes one step further in terms of code styling, and actually styles your code for you. Although you may be a little bit sceptical of packages that overwrite scripts you’ve written (I certainly was initially!), it makes it quick and easy to style code. Creating a keyboard shortcut for the style_active_file() function means you can apply code styling easily (without having to call a function manually or click a specific button). (Rennie 2023c)",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Other tips and tricks</span>"
    ]
  },
  {
    "objectID": "other-tricks.html#sec-template-files",
    "href": "other-tricks.html#sec-template-files",
    "title": "14  Other tips and tricks",
    "section": "\n14.3 Template files for #TidyTuesday",
    "text": "14.3 Template files for #TidyTuesday\nYou may notice that each chapter of this book has followed a similar structure: load packages, read in some data, perform some exploratory analysis, load fonts and colors as variables, write relevant text, create a simple plot, add styling with {ggtext}, and save a PNG file. This means that for each plot, there’s a lot of overlap in the structure of the .R files and the code they contain.\nIf you visualise data using R on a regular basis, you’ll likely find yourself repeating similar steps. You might even find yourself copying and pasting code from a previous file to your new file. Like many things in the world of programming, if you find yourself copying and pasting the same thing several times, there is almost certainly a better way of doing it. And in this case there is - template files! \nFor each #TidyTuesday visualization, an .R script with the following file can be created (Rennie 2023b):\n\ndate_str &lt;- \"2024-04-02\"\n\n# Load packages ----\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(patchwork)\nlibrary(camcorder)\nlibrary(ggtext)\nlibrary(glue)\n\n\n# Load data ----\n\ntuesdata &lt;- tidytuesdayR::tt_load(date_str)\n\n\n# Load fonts ----\n\nfont_add_google(\"Roboto\", \"roboto\")\nshowtext_auto()\n\n\n# Define colors and fonts ----\n\nbg_col &lt;- \"\"\ntext_col &lt;- \"\"\nhighlight_col &lt;- \"\"\n\nbody_font &lt;- \"roboto\"\ntitle_font &lt;- \"roboto\"\n\n\n# Data wrangling ----\n\n\n\n# Start recording ----\n\ngg_record(\n  dir = file.path(date_str, \"recording\"),\n  device = \"png\",\n  width = 7,\n  height = 5,\n  units = \"in\",\n  dpi = 300\n)\n\n\n# Define text ----\n\nsocial &lt;- social_caption(\n  bg_color = bg_col,\n  icon_color = highlight_col,\n  font_color = text_col,\n  font_family = body_font\n)\ntitle &lt;- \"\"\nsubtitle &lt;- \"\"\ncaption &lt;- paste0(\n  \"**Data**: &lt;br&gt;**Graphic**:\", social\n)\n\n\n# Plot ----\n\n\ntheme(\n  plot.margin = margin(5, 5, 5, 5),\n  plot.background = element_rect(\n    fill = bg_col,\n    color = bg_col\n  ),\n  panel.background = element_rect(\n    fill = bg_col,\n    color = bg_col\n  ),\n  plot.title = element_textbox_simple(\n    color = text_col,\n    hjust = 0.5,\n    halign = 0.5,\n    margin = margin(b = 10, t = 5),\n    lineheight = 0.5,\n    family = title_font\n  ),\n  plot.subtitle = element_textbox_simple(\n    color = text_col,\n    hjust = 0.5,\n    halign = 0.5,\n    margin = margin(b = 10, t = 5),\n    lineheight = 0.5,\n    family = body_font\n  ),\n  plot.caption = element_textbox_simple(\n    color = text_col,\n    hjust = 0.5,\n    halign = 0.5,\n    margin = margin(b = 5, t = 10),\n    lineheight = 0.5,\n    family = body_font\n  )\n)\n\n\n# Save gif ----\n\ngg_playback(\n  name = file.path(date_str, paste0(date_str, \".gif\")),\n  first_image_duration = 4,\n  last_image_duration = 20,\n  frame_duration = .25,\n  background = bg_col\n)\n\nThere are several components of this script that make it useful:\n\nIt’s separated into different sections which can help to break down the process of creating a visualization into smaller, more manageable chunks. In RStudio, the Ctrl+Shift+R keyboard shortcut can be used to add a new section.\nIt defines variables and code snippets that are used repeatedly in different visualizations. For example, defining variables for the colors and fonts, or using the theme elements from {ggtext} to style the title and subtitle text.\nThere are also some elements of the script that are similar for each plot, but not exactly the same. For example, reading in the data using the {tidytuesdayR} package or saving the gif created by {camcorder}. Here, the code is changing based on the date associated with the #TidyTuesday data. Instead of manually editing the date in the script in each location, a date_str variable is defined at the top of the script - meaning you only need to set the date once.\n\nYou can also create template files for other aspects of your data visualization workflow. For example, creating a README.md file for each visualization.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Other tips and tricks</span>"
    ]
  },
  {
    "objectID": "other-tricks.html#writing-your-own-helper-functions",
    "href": "other-tricks.html#writing-your-own-helper-functions",
    "title": "14  Other tips and tricks",
    "section": "\n14.4 Writing your own helper functions",
    "text": "14.4 Writing your own helper functions\nAs you’ve already seen in Chapter 5, creating functions for code you reuse frequently can save time and space. In Chapter 5, we created the function social_caption() for adding a plot caption that contained Font Awesome icons. This function has then been used in every subsequent chapter (and therefore also the template file described in the previous section). What other helper functions might be useful? \n\nTo use the Font Awesome icons, you need to load the Font Awesome font files. We did this using sysfonts::font_add() and specifying a path to the font file. You might also want to load other fonts that aren’t normally available on your system or through Google Fonts. You could write a function that loads (multiple) font files that you use often. You could go one step further and place the fonts and your font loading function into an R package.\nFor the template file discussed in the previous section, the date was defined as a variable at the top of the script. Instead, you could create a function that takes the date as in argument. The function could then create your .R script, insert the date where it needs to go, and save the file to the desired location.\nIf you’re creating plots for a corporate reports, creating your own {ggplot2} theme and color palette functions can save time implementing the same styling and colors for every visualization. It can also make it easier for other people you work with to use the same styling.\n\n\nYou can create helper functions for anything that you do often. If you don’t use Font Awesome icons in your captions, you don’t need to create the social_caption() function. But if, for example, you always save your images in a specific size with a specific background color, create a function that does that. You’ll be amazed at how much time you can save. \n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Other tips and tricks</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Bibliography",
    "section": "",
    "text": "Anderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools\nfor Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying\nChanges Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT\nDataset.” Working Paper 15319. Working Paper Series. National\nBureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock\nAssessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks,\nand Jessica Hullman. 2021. “The Science of Visual Data\nCommunication: What Works.” Psychological Science in the\nPublic Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024.\nviridis(Lite) - Colorblind-Friendly\nColor Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical\nData. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R.\nCRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren,\nAlexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record\nYour Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the\nWeekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer:\nComprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time\nData.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A.\nPowers, L. Shell, et al. 2020. “The Small Home Ranges and Large\nLocal Ecological Impacts of Pet Cats.” Animal\nConservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural\nEarth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home\nRanges and Large Local Ecological Impacts of Pet Cats [United\nKingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes\nInspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House\n1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of\nR Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine\nDatabase.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000\nPeople.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R:\nStandardized Support for Spatial Vector Data.”\nThe R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce:\nAccelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of\nPlots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R\nGraphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on\nAGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming\nLanguage Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file\nAUTHORS for details. 2022. sysfonts:\nLoading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file\nAUTHORS for details. 2023. showtext:\nUsing Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for\nStatistical Computing. Vienna, Austria: R Foundation for\nStatistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly\nSocial Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with\nggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.”\nhttps://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R\nWorkflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in\n’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.”\nGitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part\n1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’,\nStatistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations.\nhttps://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L.\nParker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in\nColormap Data Visualizations.” IEEE Transactions on\nVisualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R\nFunctions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour\nschemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and\nMarket Information System. 2022. “Honey Bee Colonies.”\nUSDA Economics, Statistics and Market Information System.\nhttps://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference\nSystem Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen.\n2021. “The Role of Titles in Enhancing Data Visualization.”\nEvaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant\nGraphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers\nfor Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy\nD’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019.\n“Welcome to the tidyverse.”\nJournal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023.\nR for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis\nVaughan. 2023. dplyr: A Grammar of Data\nManipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing\nTextured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot:\nStreamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version\n2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data\nfrom Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in\n’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight:\nHighlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H.\nCameron, and Anne D. Yoder. 2014. “Life\nhistory profiles for 27 strepsirrhine primate taxa generated using\ncaptive data from the Duke Lemur Center.” Scientific\nData 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Bibliography"
    ]
  },
  {
    "objectID": "appendix.html",
    "href": "appendix.html",
    "title": "Appendix",
    "section": "",
    "text": "Software requirements\nThis book was built using R version 4.4.0. This book is built with Quarto, using version number 1.5.37. All R packages required to build this book can be found in the following table. Note that this table contains all packages required to create the book, not just those required for the examples.\nTable 1: R packages and version numbers\n\n\n\n\nPackage\nVersion\nPackage\nVersion\nPackage\nVersion\n\n\n\nDBI\n1.2.3\nggforce\n0.4.2\nproxy\n0.4-27\n\n\nDT\n0.33\ngghighlight\n0.4.1\nps\n1.7.6\n\n\nKernSmooth\n2.23-24\nggplot2\n3.5.1\npurrr\n1.0.2\n\n\nMASS\n7.3-60.2\nggrepel\n0.9.5\nquarto\n1.4\n\n\nMatrix\n1.7-0\nggtext\n0.1.2\nragg\n1.3.2\n\n\nMetBrewer\n0.2.0\ngh\n1.4.1\nrappdirs\n0.3.3\n\n\nR.cache\n0.16.0\ngifski\n1.12.0-2\nrcartocolor\n2.1.1\n\n\nR.methodsS3\n1.8.2\ngitcreds\n0.1.2\nreadr\n2.1.5\n\n\nR.oo\n1.26.0\nglue\n1.7.0\nreadxl\n1.4.3\n\n\nR.utils\n2.12.3\ngoogledrive\n2.1.1\nrematch\n2.0.0\n\n\nR6\n2.5.1\ngooglesheets4\n1.1.1\nrematch2\n2.1.2\n\n\nRColorBrewer\n1.1-3\ngridExtra\n2.3\nremotes\n2.5.0\n\n\nRcpp\n1.0.12\ngridtext\n0.1.5\nrenv\n1.0.5\n\n\nRcppArmadillo\n0.12.8.4.0\ngtable\n0.3.5\nreprex\n2.1.0\n\n\nRcppEigen\n0.3.4.0.0\nhaven\n2.5.4\nrex\n1.2.1\n\n\nRttf2pt1\n1.3.12\nhere\n1.0.1\nrlang\n1.1.4\n\n\naskpass\n1.2.0\nhighr\n0.11\nrmarkdown\n2.27\n\n\nbackports\n1.5.0\nhms\n1.1.3\nrnaturalearth\n1.0.1\n\n\nbase64enc\n0.1-3\nhtmltools\n0.5.8.1\nrnaturalearthdata\n1.0.0\n\n\nbit\n4.0.5\nhtmlwidgets\n1.6.4\nrprojroot\n2.0.4\n\n\nbit64\n4.0.5\nhttpuv\n1.6.15\nrstudioapi\n0.16.0\n\n\nblob\n1.2.4\nhttr\n1.4.7\nrsvg\n2.6.0\n\n\nbrio\n1.1.5\nhttr2\n1.0.1\nrvest\n1.0.4\n\n\nbroom\n1.0.6\nids\n1.0.1\ns2\n1.1.6\n\n\nbslib\n0.7.0\nimguR\n1.0.3\nsass\n0.4.9\n\n\ncachem\n1.1.0\nimport\n1.3.2\nscales\n1.3.0\n\n\ncallr\n3.7.6\nini\n0.3.1\nselectr\n0.4-2\n\n\ncamcorder\n0.1.0\nisoband\n0.2.7\nsf\n1.0-16\n\n\ncellranger\n1.1.0\njpeg\n0.1-10\nshowtext\n0.9-7\n\n\nclass\n7.3-22\njquerylib\n0.1.4\nshowtextdb\n3.0\n\n\nclassInt\n0.4-10\njsonlite\n1.8.8\nsp\n2.1-4\n\n\ncli\n3.6.3\nkableExtra\n1.4.0\nstringi\n1.8.4\n\n\nclipr\n0.8.0\nknitr\n1.47\nstringr\n1.5.1\n\n\ncodetools\n0.2-20\nlabeling\n0.4.3\nstyler\n1.10.3\n\n\ncolorspace\n2.1-0\nlater\n1.3.2\nsvglite\n2.1.3\n\n\ncommonmark\n1.9.1\nlattice\n0.22-6\nsys\n3.4.2\n\n\nconflicted\n1.2.0\nlazyeval\n0.2.2\nsysfonts\n0.8.9\n\n\ncowplot\n1.1.3\nlifecycle\n1.0.4\nsystemfonts\n1.1.0\n\n\ncpp11\n0.4.7\nlintr\n3.1.2\nterra\n1.7-78\n\n\ncrayon\n1.5.3\nlubridate\n1.9.3\ntextshaping\n0.4.0\n\n\ncredentials\n2.0.1\nmagick\n2.8.3\ntibble\n3.2.1\n\n\ncrosstalk\n1.2.1\nmagrittr\n2.0.3\ntidyr\n1.3.1\n\n\ncurl\n5.2.1\nmaps\n3.4.2\ntidyselect\n1.2.1\n\n\ncyclocomp\n1.1.1\nmarkdown\n1.13\ntidytuesdayR\n1.0.3\n\n\ndata.table\n1.15.4\nmarquee\n0.1.0\ntidyverse\n2.0.0\n\n\ndbplyr\n2.5.0\nmemoise\n2.0.1\ntimechange\n0.3.0\n\n\ndesc\n1.4.3\nmgcv\n1.9-1\ntinytex\n0.51\n\n\ndigest\n0.6.36\nmime\n0.12\ntweenr\n2.0.3\n\n\ndownlit\n0.4.4\nmodelr\n0.1.11\ntzdb\n0.4.0\n\n\ndplyr\n1.1.4\nmonochromeR\n0.2.0\nunits\n0.8-5\n\n\ndtplyr\n1.3.1\nmunsell\n0.5.1\nusethis\n2.2.3\n\n\ne1071\n1.7-14\nnlme\n3.1-164\nutf8\n1.2.4\n\n\nevaluate\n0.24.0\nnrBrand\n0.0.13\nuuid\n1.2-0\n\n\nextrafont\n0.19\nopenssl\n2.2.0\nvctrs\n0.6.5\n\n\nextrafontdb\n1.0\nopenxlsx\n4.2.5.2\nviridis\n0.6.5\n\n\nfansi\n1.0.6\nowidR\n1.4.2\nviridisLite\n0.4.2\n\n\nfarver\n2.1.2\npander\n0.6.5\nvroom\n1.6.5\n\n\nfastmap\n1.2.0\npatchwork\n1.2.0\nwaffle\n1.0.2\n\n\nfontawesome\n0.5.2\npillar\n1.9.0\nwhisker\n0.4.1\n\n\nforcats\n1.0.0\npkgconfig\n2.0.3\nwithr\n3.0.0\n\n\nformatR\n1.14\nplyr\n1.8.9\nwk\n0.9.1\n\n\nfs\n1.6.4\npng\n0.1-8\nxfun\n0.45\n\n\nfunspotr\n0.0.4\npoissoned\n0.1.2\nxml2\n1.3.6\n\n\ngargle\n1.5.2\npolyclip\n1.10-6\nxmlparsedata\n1.0.5\n\n\ngenerics\n0.1.3\nprettyunits\n1.2.0\nyaml\n2.3.8\n\n\ngeofacet\n0.2.1\nprocessx\n3.8.4\nzip\n2.3.1\n\n\ngeogrid\n0.1.2\nprogress\n1.2.3\n\n\n\n\ngert\n2.0.1\npromises\n1.3.0",
    "crumbs": [
      "Appendix"
    ]
  },
  {
    "objectID": "appendix.html#data",
    "href": "appendix.html#data",
    "title": "Appendix",
    "section": "Data",
    "text": "Data\nAll data sets used in this book, and links to the relevant licenses:\n\nChapter 1\n\nProgramming Languages Database (PLDB contributors 2022)\n\nSource: pldb.com\n\nLicense: PLDB content is published to the public domain and you can use it freely.\n\n\n\n\nChapter 2\n\nMapping Museums (Mapping Museums 2021)\n\nSource: museweb.dcs.bbk.ac.uk/allmus\n\nLicense: Licensed with Creative Commons Attribution 4.0 International.\n\n\n\n\nChapter 3\n\nDuke Lemur Center (Zehr et al. 2014)\n\nSource: lemur.duke.edu/duke-lemur-center-database\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nChapter 4\n\nCanadian Wind Turbine Database (Natural Resources Canada 2021)\n\nSource: open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070\n\nLicense: Licensed with Open Government Licence – Canada.\n\n\n\n\nChapter 5\n\nThe small home ranges and large local ecological impacts of pet cats (McDonald and Cole 2020)\n\nSource: www.datarepository.movebank.org/entities/datapackage/4ef43458-a0c0-4ff0-aed4-64b07cedf11c\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nChapter 6\n\n\ntidytuesday GitHub Repository by nrennie (Rennie 2024b)\n\nSource: github.com/nrennie/tidytuesday\n\nLicense: Licensed with Creative Commons Attribution 4.0 International.\n\n\n\n\nChapter 7\n\nRAM Legacy Stock Assessment Database (Database 2021)\n\nSource: zenodo.org/records/4824192\n\nLicense: Licensed with Creative Commons Attribution 4.0 International.\n\n\n\n\nChapter 8\n\nMedical doctors per 1,000 people, 2019 (Our World in Data 2019)\n\nSource: ourworldindata.org/grapher/physicians-per-1000-people\n\nLicense: Licensed with Creative Commons Attribution 4.0 International.\n\n\n\n\nChapter 9\n\nTime Zones (Internet Assigned Numbers Authority 2023)\n\nSource: data.iana.org/time-zones/tz-link.html#tzdb\n\nLicense: This web page is in the public domain.\n\n\n\n\nChapter 10\n\nUS House Election Results (MIT Election Data and Science Lab 2017)\n\nSource: doi.org/10.7910/DVN/IG0UN2\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nChapter 11\n\nHistorical Cross Country Technology Adoption Dataset (Comin and Hobijn 2009)\n\nSource: www.nber.org/research/data/historical-cross-country-technology-adoption-hccta-dataset\n\nLicense: The authors have made this dataset available for anyone to use.\n\n\n\n\nChapter 12\n\nHoney Bee Colonies (United States Department of Agriculture: Economics, Statistics and Market Information System 2022)\n\nSource: usda.library.cornell.edu/concern/publications/rn301137d\n\nLicense: All publication files are considered government works and licensed with U.S. Public Domain.\n\n\n\n\nChapter 13\n\nNobel Prize Laureates (www.nobelprize.org 2024)\n\nSource: api.nobelprize.org/2.1/laureates\n\nLicense: Licensed with Creative Commons Zero License.",
    "crumbs": [
      "Appendix"
    ]
  },
  {
    "objectID": "appendix.html#images",
    "href": "appendix.html#images",
    "title": "Appendix",
    "section": "Images",
    "text": "Images\nAll images used in this book (which were not created by the author) and links to the relevant licenses:\n\nChapter 3\n\nImage: Lilian Dibbern\n\nSource: unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY (Dibbern 2019)\n\nLicense: Licensed with Unsplash License.\n\n\n\n\nChapter 6\n\nImage: {dplyr} Hex sticker\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png (RStudio 2020a)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nChapter 6\n\nImage: {ggplot2} Hex sticker\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/gglot2.png (RStudio 2018b)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nChapter 6\n\nImage: {tidyr} Hex sticker\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png (RStudio 2020c)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nChapter 6\n\nImage: {readr} Hex sticker\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/readr.png (RStudio 2018d)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nChapter 6\n\nImage: {purrr} Hex sticker\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png (RStudio 2018c)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nChapter 6\n\nImage: {forcats} Hex sticker\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png (RStudio 2018a)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nChapter 6\n\nImage: {tibble} Hex sticker\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png (RStudio 2018e)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nChapter 6\n\nImage: {stringr} Hex sticker\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png (RStudio 2020b)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nChapter 7\n\nImage: Lance Anderson\n\nSource: unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg (Anderson 2017)\n\nLicense: Licensed with Unsplash License.\n\n\n\n\n\n\n\nAnderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Appendix"
    ]
  },
  {
    "objectID": "common-charts.html",
    "href": "common-charts.html",
    "title": "Common charts don’t need to be boring!",
    "section": "",
    "text": "Anderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Common charts don't need to be boring!"
    ]
  },
  {
    "objectID": "icons-images.html",
    "href": "icons-images.html",
    "title": "Making use of icons, fonts, and text",
    "section": "",
    "text": "Anderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Making use of icons, fonts, and text"
    ]
  },
  {
    "objectID": "spatial.html",
    "href": "spatial.html",
    "title": "Visualising spatial data",
    "section": "",
    "text": "Anderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Visualising spatial data"
    ]
  },
  {
    "objectID": "weird-wonderful.html",
    "href": "weird-wonderful.html",
    "title": "Weird and wonderful: completely custom charts",
    "section": "",
    "text": "Anderson, Lance. 2017. “School of Gray Fish.” https://unsplash.com/photos/school-of-gray-fish-G2SDLsJp3rg.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nDatabase, RAM Legacy Stock Assessment. 2021. “RAM Legacy Stock Assessment Database V4.495.” Zenodo. https://doi.org/10.5281/zenodo.4824192.\n\n\nDibbern, Lilian. 2019. “Lemur Beside Tree.” https://unsplash.com/photos/lemur-beside-tree-3TwT-n8RTNY.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan, and authors/contributors of the included fonts. See file AUTHORS for details. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Weird and wonderful: completely custom charts"
    ]
  }
]