---
filters:
  - line-highlight
execute: 
  freeze: auto
fig-width: 5
fig-asp: 1
---

```{r}
#| echo: false
#| eval: true
#| file: R/options.R
```

```{r}
#| echo: false
#| eval: true
#| file: R/load_font_awesome.R
```

```{r}
#| echo: false
#| eval: true
#| file: R/social_caption.R
```

```{r}
#| echo: false
#| eval: true
#| file: R/source_caption.R
```

# Bee Colony Losses: visualising density with Poisson disk sampling {#sec-bees}

In this chapter, we'll learn how install R package that aren't available on CRAN, find out how to perform Poisson disk sampling, and create plots that are faceted by two variables.

## Data

```{r}
#| label: bees-data-show
#| eval: false
#| echo: true
tuesdata <- tidytuesdayR::tt_load("2022-01-11")
colony <- tuesdata$colony
stressor <- tuesdata$stressor
```

```{r}
#| label: bees-data-hide
#| output: false
#| echo: false
#| eval: true
colony <- readr::read_csv("data/colony.csv")
```

## Exploratory work

```{r}
#| label: bees-boxplot
boxplot(
  colony_n ~ year,
  data = colony,
  horizontal = TRUE,
  xlab = "Colony size"
)
```

```{r}
#| label: bees-density
lattice::densityplot(~ log(colony_n)|factor(year),
  data = colony, layout = c(4, 2),
  na.rm = TRUE,
  xlab = "Colony size"
)
```




### Data exploration

### Exploratory sketches

![Initial sketch.](images/sketch-bees.png){#fig-bees-sketch fig-align="center"}

## Preparing a plot

### Data wrangling

Let's start by selecting a subset of states to visualize:

```{r}
#| label: bees-states
states_to_plot <- c(
  "California", "Texas", "Florida",
  "New York", "Alabama", "Illinois"
)
```


```{r}
#| label: bees-prep-data
plot_data <- colony |>
  dplyr::filter(
    state %in% states_to_plot,
    year != "6/"
  ) |>
  dplyr::group_by(year, state) |>
  dplyr::summarise(bees = mean(colony_n, na.rm = TRUE)) |>
  dplyr::ungroup() |>
  dplyr::mutate(year = as.numeric(year))
```

Data unavailable for apr-jun 2019, and for end of 2021


```{r}
#| label: bees-state_order
state_levels <- plot_data |>
  dplyr::filter(year == 2021) |>
  dplyr::arrange(-bees) |>
  dplyr::pull(state)
```



### Poisson disk sampling with {poissoned}


We're going to use the {poissoned} package [@poissoned] to ...

The {poissoned} package isn't currently available on CRAN, so we'll need to install it from GitHub instead. The {remotes} package [@remotes] can be used to install packages from remote repositories, such as GitHub. We can use the `install_github()` function, passing in a character string of the form `"user/repository"`: \index{remotes!install\_github}

```{r}
#| label: bees-install
#| eval: false
remotes::install_github("coolbutuseless/poissoned")
```


```{r}
bees_grid <- plot_data |>
  dplyr::rowwise() |>
  dplyr::mutate(
    t = sqrt(bees / 1000),
    pnts = list(
      poissoned::poisson_disc(ncols = t, nrows = t, cell_size = 1 / t)
    )
  ) |>
  dplyr::ungroup() |>
  tidyr::unnest(pnts) |>
  dplyr::mutate(state = factor(state, levels = state_levels))
```


### The first plot

We'll create our plot using `geom_point()` since we 

```{r}
#| label: fig-bees-base-plot
#| fig-cap: "Plot"
library(ggplot2)
base_plot <- ggplot(data = bees_grid) +
  geom_point(
    mapping = aes(x = x, y = y),
    size = 0.2
  ) +
  facet_grid(state ~ year, switch = "both")
base_plot
```

## Advanced styling

### Colors

Let's select some colors for our plot. We won't be mapping any colors to columns in the data, but we still need to define a background color and a color for highlighted elements. To keep the plot looking clean, we'll also use the same color for the text. Similar to @sec-programming, we can select these colors to match the topic of the data. What colors do you think of when you think of bees? Black and yellow. We'll use black for the background color, and yellow for the highlight color. 

```{r}
#| label: bees-colors
highlight_col <- "#fecc27"
bg_col <- "black"
```

If we want to ... black points against a ayellow background. We *should* update out geom_point code to color = bg_col, but the points are already black for default. 

### Fonts

```{r}
#| label: bees-fonts
sysfonts::font_add_google(
  name = "Source Code Pro",
  family = "source"
)
showtext::showtext_auto()
showtext::showtext_opts(dpi = 300)
body_font <- "source"
```

### Adding text

```{r}
#| label: bees-text
title <- "Bee colony losses in the United States"
st <- "Bees are vital for the preservation of ecological balance and biodiversity in nature. Bee populations are rapidly declining around the world due to habitat loss, pollution and the use of pesticides, among other factors."
cap <- "Data: USDA | Graphic: N. Rennie"
```

```{r}
#| label: fig-bees-text-plot
#| fig-cap: "Plot"
text_plot <- base_plot +
  labs(
    title = title,
    subtitle = st,
    caption = cap,
    x = NULL, y = NULL
  )
text_plot
```


### Adjusting themes


```{r}
#| label: bees-theme-plot-1
theme_plot <- text_plot +
  coord_fixed(expand = FALSE) +
  theme_void(
    base_family = body_font,
    base_size = 7
  )
```

```{r}
#| label: bees-theme-plot-2
#| fig-cap: "Plot"
theme_plot +
  theme(
    # background colors
    plot.background = element_rect(
      fill = bg_col, color = bg_col
    ),
    panel.background = element_rect(
      fill = highlight_col, color = highlight_col
    ),
    strip.background = element_rect(
      fill = bg_col
    ),
    # facet labels
    strip.text.x = element_text(
      color = highlight_col
    ),
    strip.text.y = element_text(
      color = highlight_col,
      angle = 90
    ),
    # text formatting
    plot.title = ggtext::element_textbox_simple(
      color = highlight_col,
      face = "bold"
    ),
    plot.subtitle = ggtext::element_textbox_simple(
      color = highlight_col,
      margin = margin(t = 5, b = 5)
    ),
    plot.caption = ggtext::element_textbox_simple(
      color = highlight_col,
      margin = margin(t = 5)
    ),
    plot.margin = margin(5, 5, 5, 5)
  )
```

## Reflection

* wider range of states, difficult to see trend over time
