---
filters:
  - line-highlight
execute: 
  freeze: auto
fig-width: 5
fig-asp: 0.5
---

```{r}
#| echo: false
#| eval: true
#| file: R/options.R
```

```{r}
#| echo: false
#| eval: true
#| file: R/load_font_awesome.R
```

```{r}
#| echo: false
#| eval: true
#| file: R/social_caption.R
```

# R Package Use: using images for custom facet labels {#sec-r-pkgs}

In this chapter, we'll learn about how to collect data on which packages and functions are used in R code, replacing the underlying data in a plot that's already been made, and how to use images as category labels.

## Data

```{r}
#| label: r-pkgs-load-data-1
#| eval: false
#| echo: true
files_to_check <-
  funspotr::list_files_github_repo("nrennie/tidytuesday",
    branch = "main"
  ) |>
  dplyr::filter(stringr::str_detect(relative_paths, "2023"))
```

```{r}
#| label: r-pkgs-load-data-2
#| eval: false
#| echo: true
r_funs <- files_to_check |>
  funspotr::spot_funs_files(
    show_each_use = TRUE,
    keep_in_multiple_pkgs = TRUE
  )
```

got a few errors here, maybe try re-running or debugging

```{r}
#| label: r-pkgs-load-data-3
#| eval: false
#| echo: true
r_pkgs <- rfuns |>
  funspotr::unnest_results()
write.csv(r_pkgs, "data/r_pkgs.csv", row.names = FALSE)
```


```{r}
#| label: r-pkgs-load-data-csv
#| output: false
r_pkgs <- readr::read_csv("data/r_pkgs.csv")
```

## Exploratory work

### Data exploration

```{r}
#| label: fig-r-pkgs-barplot
#| fig-cap: "Plot"
#| fig-asp: 1
barplot(
  sort(table(r_pkgs$pkgs)),
  # make labels smaller so they fit on the page
  cex.axis = 0.5,
  cex.names = 0.5,
  las = 1,
  horiz = TRUE
)
```

(base R + tidyverse) is better than base R or tidyverse

```{r}
#| label: r-pkgs-pkgs
r_pkgs <- r_pkgs |>
  dplyr::mutate(
    pkgs = dplyr::case_when(
      pkgs == "ggplot" ~ "ggplot2",
      TRUE ~ pkgs
    )
  )
```


### Exploratory sketches

## Preparing a plot

### Data wrangling

We're going to focus on the [core {tidyverse}](https://www.tidyverse.org/packages/#core-tidyverse) packages [@tidyverse]

```{r}
#| label: r-pkgs-core
core_tidyverse <- c(
  "dplyr", "forcats", "ggplot2", "purrr",
  "readr", "stringr", "tibble", "tidyr"
)
```

We use 

\index{dplyr!filter} \index{tidyr!separate\_wider\_delim} \index{dplyr!mutate} \index{dplyr!count} \index{lubridate!ymd}


```{r}
#| label: r-pkgs-date
r_pkgs_date <- r_pkgs |>
  dplyr::filter(pkgs %in% core_tidyverse) |>
  tidyr::separate_wider_delim(
    relative_paths,
    delim = "/",
    names = c(NA, "date", NA)
  ) |>
  dplyr::mutate(date = lubridate::ymd(date)) |>
  dplyr::count(date, pkgs)
```


\index{dplyr!summarise} \index{dplyr!arrange} \index{dplyr!pull}

or use `desc()` \index{dplyr!desc}

```{r}
#| label: r-pkgs-orders
pkgs_ordered <- r_pkgs_date |>
  dplyr::summarise(n = sum(n), .by = pkgs) |>
  dplyr::arrange(-n) |>
  dplyr::pull(pkgs)
pkgs_ordered
```

\index{dplyr!mutate} \index{base!factor}

notice that tibble is missing

```{r}
#| label: r-pkgs-levels
pkgs_levels <- c(
  pkgs_ordered,
  setdiff(core_tidyverse, pkgs_ordered)
)
plot_data <- r_pkgs_date |>
  dplyr::mutate(
    pkgs = factor(pkgs, levels = pkgs_levels)
  )
```

or use desc



### Packages and functions

### The first plot

\index{ggplot2!ggplot} \index{ggplot2!geom\_area} \index{ggplot2!aes} \index{ggplot2!facet\_wrap}

We set `drop = FALSE` to allow the {tibble}

```{r}
#| label: fig-r-pkgs-base-plot-1
#| fig-cap: "Plot"
#| warning: true
library(ggplot2)
base_plot <- ggplot(plot_data) +
  geom_area(
    mapping = aes(
      x = date,
      y = n,
      fill = pkgs
    )
  ) +
  facet_wrap(~pkgs, nrow = 1, drop = FALSE)
base_plot
```

get a warning

You'll also notice there's one week 141 times. I double checked this data and it is actually correct

misleading - stringr and readr have same number of uses, but it looks like stringr is used significantly more - 0 is not included
forcats has only one use - but represented 0 times since 

\index{tidyr!complete}

```{r}
#| label: r-pkgs-new-data
new_plot_data <- plot_data |>
  tidyr::complete(
    date, pkgs,
    fill = list(n = 0)
  )
```

\index{utils!head}

```{r}
#| label: r-pkgs-head-new
head(new_plot_data, n = 8)
```

notice that tibble now included as well

updating data set on plot, could just rerun

```{r}
#| label: fig-r-pkgs-base-plot-2
#| fig-cap: "Plot"
base_plot <- base_plot %+% new_plot_data
base_plot
```

## Advanced styling

### Colours

[@rcartocolor]

\index{rcartocolor!carto\_pal}

```{r}
#| label: r-pkgs-cols
bg_col <- "#3A3B3C"
text_col <- "white"
col_palette <- rcartocolor::carto_pal(9, "Bold")[1:8]
highlight_col <- col_palette[1]
```

\index{ggplot2!scale\_fill\_manual}

```{r}
#| label: fig-r-pkgs-col-plot
#| fig-cap: "Plot"
col_plot <- base_plot +
  scale_fill_manual(
    values = col_palette,
    drop = FALSE
  )
col_plot
```

### Fonts

\index{sysfonts!font\_add\_google} \index{showtext!showtext\_auto} \index{showtext!showtext\_opts}

```{r}
#| label: r-pkgs-fonts
sysfonts::font_add_google(
  name = "Source Code Pro",
  family = "source"
)
showtext::showtext_auto()
showtext::showtext_opts(dpi = 300)
body_font <- "source"
```

### Text

\index{social\_caption}

```{r}
#| label: r-pkgs-social
social <- social_caption(
  bg_color = bg_col,
  icon_color = highlight_col,
  font_color = text_col,
  font_family = body_font
)
```

```{r}
#| label: r-pkgs-text
title <- "How many times did I use {tidyverse} packages for TidyTuesday?"
st <- "The tidyverse is a collection of open source R packages that *share an underlyingdesign philosophy, grammar, and data structures of tidy data*. Of the 8 core tidyverse packages {ggplot2} was my most used package for TidyTuesday visualisations in 2023."
cap <- paste0(
  st, "<br>**Data**: github.com/nrennie/tidytuesday<br>**Graphic**:", social
)
```

\index{ggplot2!labs}

```{r}
#| label: r-pkgs-text-plot
text_plot <- col_plot +
  labs(
    title = title,
    subtitle = cap,
    x = "",
    y = "Number of package calls"
  )
```



### Adjusting themes

\index{ggplot2!scale\_x\_date} \index{ggplot2!scale\_y\_continuous} \index{ggplot2!coord\_cartesian} \index{lubridate!ymd}


```{r}
#| label: fig-r-pkgs-limits-plot
#| fig-cap: "Plot"
limits_plot <- text_plot +
  scale_x_date(
    limits = c(
      lubridate::ymd(20230101), lubridate::ymd(20231231)
    ),
    breaks = c(
      lubridate::ymd(20230101), lubridate::ymd(20230701)
    ),
    labels = c("Jan", "Jul")
  ) +
  scale_y_continuous(
    limits = c(0, 150),
    breaks = c(0, 50, 100, 150)
  ) +
  coord_cartesian(expand = F)
limits_plot
```

\index{ggplot2!theme\_dark} \index{ggplot2!theme} \index{ggplot2!element\_rect} \index{ggplot2!element\_text} \index{grid!unit} \index{ggplot2!element\_blank} \index{ggplot2!element\_line} \index{ggtext!element\_textbox\_simple}

```{r}
#| label: fig-r-pkgs-theme-plot
#| fig-cap: "Plot"
theme_plot <- limits_plot +
  theme_dark(
    base_size = 6,
    base_family = body_font
  ) +
  theme(
    legend.position = "none",
    plot.margin = margin(5, 10, 5, 10),
    # plot background
    plot.background = element_rect(
      fill = bg_col, colour = bg_col
    ),
    panel.background = element_rect(
      fill = bg_col, colour = bg_col
    ),
    # facet strip text and background
    strip.background = element_rect(
      fill = bg_col, colour = bg_col
    ),
    strip.text = element_text(
      face = "bold"
    ),
    panel.spacing = unit(0.5, "lines"),
    # title and subtitle text
    plot.title.position = "plot",
    plot.title = ggtext::element_textbox_simple(
      colour = text_col,
      hjust = 0,
      halign = 0,
      margin = margin(b = 5, t = 5),
      face = "bold",
      size = rel(1.4)
    ),
    plot.subtitle = ggtext::element_textbox_simple(
      colour = text_col,
      hjust = 0,
      halign = 0,
      margin = margin(b = 5, t = 0)
    ),
    # axes styling and grid lines
    axis.text = element_text(
      colour = text_col
    ),
    axis.title = element_text(
      colour = text_col
    ),
    axis.ticks = element_blank(),
    panel.grid.major = element_line(
      colour = alpha(text_col, 0.2),
      linewidth = 0.2
    ),
    panel.grid.minor = element_line(
      colour = alpha(text_col, 0.3),
      linewidth = 0.2
    )
  )
theme_plot
```

## Using images as facet labels

Packages such as {ggimage} [@ggimage] or {ggtextures} [@ggtextures] can be used to plot images based on columns in the data. For example, ... . However, here we want to plot images based on ...

no need for PNG, ggimage etc. adding images outside of the plotting area.

we've already ... the package we need - ggtext
can also do with marquee

\index{glue!glue}

```{r}
#| label: r-pkgs-new-levels
new_levels <- glue::glue(
  "&nbsp;&nbsp;&nbsp;&nbsp;<img src='images/hex/{pkgs_levels}.png' width='20'>"
)
```

\index{dplyr!mutate} \index{glue!glue} \index{base!factor}

```{r}
#| label: r-pkgs-img-data
plot_img_data <- new_plot_data |>
  dplyr::mutate(
    pkgs = glue::glue("&nbsp;&nbsp;&nbsp;&nbsp;<img src='images/hex/{pkgs}.png' width='20'>")
  ) |>
  dplyr::mutate(
    pkgs = factor(pkgs, levels = new_levels)
  )
```

As we did earlier, let's update the data

```{r}
#| label: r-pkgs-img-plot
img_plot <- theme_plot %+% plot_img_data
```

We also 

\index{ggplot2!theme} \index{ggtext!element\_textbox\_simple}

```{r}
#| label: fig-r-pkgs-final-plot
#| fig-cap: "Plot"
img_plot +
  theme(
    strip.text.x = ggtext::element_textbox_simple(
      color = text_col,
      face = "bold",
      hjust = 0.5,
      halign = 0.5
    ),
  )
```

## Reflection

maybe a lgo scale - skewed by ne big value (maybe point out the big value - hard to see)

importance of explcitly capturing 0 (implicitly not good)
implicit/explicit missing data - does it mean 0 

match the colors to the image colors - green for stringr

::: {.content-visible when-format="html"}

## The making of...

Each plot created during the process of developing the original version of this visualisation was captured using {camcorder}, and is shown in the gif below. If you'd like to learn more about how {camcorder} can be used in the data visualisation process, see @sec-camcorder.

![](images/r-pkgs.gif){fig-align="center"}

:::
