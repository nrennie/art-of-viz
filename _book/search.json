[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The #TidyTuesday Cookbook",
    "section": "",
    "text": "Preface\n\n\n\n\n\n\nWelcome to the online version of The #TidyTuesday Cookbook by Nicola Rennie.\nThis book is currently a work-in-progress.\n\n\n\n#TidyTuesday is a weekly social data project which aims to make learning to work with data easier, by providing real-world datasets. Participants are encouraged to explore the data shared via GitHub each week, create an output such as a data visualization, and share their output alongside their code, with the community.\nAfter three years of weekly contributions, I’ve worked with around 150 datasets and created over 150 data visualizations. This book will present a subset of these visualizations, and describe the process used to create them. Each chapter will cover a different data visualization, showing: the data exploration process; the choice of data visualization type; the initial design ideas with hand-drawn sketches; the first build of a plot; and the iterative process of styling plots.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "author.html",
    "href": "author.html",
    "title": "Author",
    "section": "",
    "text": "Nicola Rennie is a Lecturer in Health Data Science within the Centre for Health Informatics, Computing, and Statistics at Lancaster University. She holds a PhD in Statistics and Operational Research, focusing on analysing and visualising transport demand. Her current research is focused on applications of statistics and machine learning to health-related data, communicating statistics, and the effective teaching of data science. She has experience of teaching at both undergraduate and postgraduate level, in courses covering fundamentals of data science, population health, and statistical programming. Nicola has also previously worked in data science consultancy, and delivered training courses covering topics including advanced data visualisation with R, statistical modelling, and reproducible reporting. She is the author and maintainer of several R packages, including multiple {ggplot2} extension packages. Nicola is a regular speaker at R and data science meetups, and is the current chapter organiser of R-Ladies Lancaster. She is co-author of the Royal Statistical Society’s Best Practices for Data Visualisation Guide, and an active member of the Royal Statistical Society. Several of her data visualisations have been long-listed at the Information is Beautiful Awards.",
    "crumbs": [
      "Author"
    ]
  },
  {
    "objectID": "introduction.html#why-visualize-data",
    "href": "introduction.html#why-visualize-data",
    "title": "1  Introduction",
    "section": "1.1 Why visualize data?",
    "text": "1.1 Why visualize data?\nData visualization can be a very effective and efficient means of communicating information. Visualizing your data typically serves one of two purposes: (i) as part of exploratory analysis to help uncover discrepancies in data and identify interesting relationships to measure; or (ii) to communicate key insights and messages to a broader audience. The case-study nature of this book means that we’ll talk about both of these aspects, though we ’ll focus mostly on the second.\nChoosing an appropriate type of visualization and making careful choice about design can clarify the message you are trying to convey to a reader. That does not necessarily mean that every chart must follow a set of rules and stick to a rigid format. Instead, data visualization is a blend of science and creativity - many of the key landmark data visualizations held up as excellent examples don’t fit into the standard categories of bar charts, scatter plots, or line graphs.\nThat being said, the visualizations in this book are not necessarily always the most effective choice of visualization for the data and relationship shown. Rather, this book aims to show you examples of the end-to-end process of creating data visualizations, with a focus on the technical details of building them in R. You’ll see some hacky solutions and unusual ideas that you can use to transform your data visualizations.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "introduction.html#background-knowledge",
    "href": "introduction.html#background-knowledge",
    "title": "1  Introduction",
    "section": "1.2 Background knowledge",
    "text": "1.2 Background knowledge\nThis book is primarily aimed at those who wish to develop their data visualization skills in R. Readers of this book may find a basic knowledge of R, more specifically of the {tidyverse} ecosystem, useful though all code used in examples is fully explained. Readers do not need to be experienced in {ggplot2}, though this book will also be of interest to those who are. Readers of this book will be of interest to those who are already familiar with R (including {ggplot2}), and wish to develop their skills in designing data visualizations further. It will also be of interest to those who already design data visualizations using other tools, and want to learn how to do the equivalent in R.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "introduction.html#a-note-about-r-code",
    "href": "introduction.html#a-note-about-r-code",
    "title": "1  Introduction",
    "section": "1.3 A note about R code",
    "text": "1.3 A note about R code\nAll code in this was created using R version 4.3.0, and a complete list of package versions can be found in the Appendix.\n\n1.3.1 Base R pipe vs {magrittr} pipe\nIn R, the pipe operator takes the thing on its left and passes it along to the function on its right (Wickham, Çetinkaya-Rundel, and Grolemund 2023). You can find a full description of the pipe operator in R for Data Science. The pipe (%&gt;%) was first introduced to R via the {magrittr} package. Since version 4.1.0 of R, a version of the pipe (|&gt;) has existed in base R. The base R version of the pipe is used throughout the book. Although there are some difference between the two version of the pipe, in this book, they can be used interchangeably.\n\n\n1.3.2 Namespacing\nNamespacing (the pre-fixing of functions with the package name and ::) is used for all packages except {ggplot2} and base R packages. Namespacing is useful for two reasons (i) from a learning perspective, it makes it easier to recognise where functions come from and how they connect together, and (ii) from a programming perspective, it reduces conflicts and errors - something we all want less of!\n\n\n1.3.3 Changes from earlier versions\nYou may notice that some of the final images differ slightly from those initially created and published on social media. You might also find some small differences in the code used to produce them if you compare the contents of this book to original scripts in the GitHub repository. These differences are likely due to one of four reasons:\n\npackages have since been updated and code has been changed to use newer syntax;\nsome aspects have been omitted from a visualization to avoid explaining everything in Chapter 1 - but those aspects are all covered and linked to in later chapters;\nafter many years of practice, there may be more efficient ways of re-writing code from some of the earlier plots. Any changes are clearly labelled and discussed;\nsome images may be different due to copyright reasons.\n\n\n\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "uk-museums.html#data",
    "href": "uk-museums.html#data",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "\n2.1 Data",
    "text": "2.1 Data\n#TidyTuesday (Community 2023)\n(Museums 2021)\n\n\nmuseums &lt;- readr::read_csv(\"data/museums.csv\")",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "uk-museums.html#exploratory-work",
    "href": "uk-museums.html#exploratory-work",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "\n2.2 Exploratory work",
    "text": "2.2 Exploratory work\nLet’s start exploring the data!\n\n2.2.1 Data exploration\n\nbarplot(\n  table(museums$Area_Deprivation_index),\n  cex.axis = 0.5,\n  cex.names = 0.5\n)\n\n\n\n\n\n\n\n\n2.2.2 Exploratory sketches\n\nTO DO!!!",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "uk-museums.html#preparing-a-plot",
    "href": "uk-museums.html#preparing-a-plot",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "\n2.3 Preparing a plot",
    "text": "2.3 Preparing a plot\n\n2.3.1 Data wrangling\nThis is one of those very real datasets - the data wrangling is …\n You could alternatively use separate_wider_delim() \n\nmuseum_data &lt;- museums |&gt;\n  dplyr::select(\n    Year_opened, Year_closed, Area_Deprivation_index\n  ) |&gt;\n  tidyr::drop_na() |&gt;\n  tidyr::separate(\n    Year_opened,\n    into = c(\"opened1\", \"opened2\"),\n    sep = \":\"\n  ) |&gt;\n  tidyr::separate(\n    Year_closed,\n    into = c(\"closed1\", \"closed2\"),\n    sep = \":\"\n  ) |&gt;\n  dplyr::mutate(\n    dplyr::across(\n      c(opened1, opened2, closed1, closed2), as.numeric\n    ),\n    Area_Deprivation_index = factor(Area_Deprivation_index, levels = 1:10)\n  ) |&gt;\n  dplyr::mutate(dplyr::across(\n    c(closed1, closed2),\n    ~ dplyr::if_else(.x == 9999, NA_real_, .x)\n  )) |&gt;\n  dplyr::mutate(closed = dplyr::case_when(\n    closed1 == closed2 ~ closed1,\n    closed1 != closed2 ~ round((closed2 + closed1) / 2)\n  )) |&gt;\n  dplyr::mutate(opened = dplyr::case_when(\n    opened1 == opened2 ~ opened1,\n    opened1 != opened2 ~ round((opened2 + opened1) / 2)\n  )) |&gt;\n  dplyr::select(Area_Deprivation_index, opened, closed) |&gt;\n  dplyr::rename(deprivation = Area_Deprivation_index) |&gt;\n  dplyr::arrange(deprivation)\n\n\nnum_year &lt;- function(year, dep, data = museum_data) {\n  df &lt;- dplyr::filter(data, deprivation == dep)\n  num_open &lt;- df |&gt;\n    dplyr::filter(opened &lt;= year) |&gt;\n    nrow()\n  num_closed &lt;- df |&gt;\n    dplyr::filter(closed &lt;= year) |&gt;\n    nrow()\n  diff &lt;- num_open - num_closed\n  return(diff)\n}\n\n (Wickham and Henry 2023) \n(Müller and Wickham 2023)\n\nall_years &lt;- 1960:2021\ndeps &lt;- 1:10\noutput &lt;- purrr::pmap_vec(\n  expand.grid(all_years, deps),\n  ~ num_year(year = .x, dep = .y)\n)\nresults &lt;- matrix(output,\n  nrow = length(all_years),\n  byrow = FALSE\n)\ncolnames(results) &lt;- 1:10\n\n\nplot_data &lt;- results |&gt;\n  tibble::as_tibble() |&gt;\n  dplyr::mutate(year = all_years) |&gt;\n  tidyr::pivot_longer(\n    -year,\n    names_to = \"deprivation\",\n    values_to = \"museums\"\n  ) |&gt;\n  dplyr::mutate(\n    deprivation = factor(deprivation, levels = 1:10)\n  )\n\n\n2.3.2 Packages and functions\n{gghighlight}\n\n2.3.3 The first plot\none of most common approaches\n\n\n\nlibrary(ggplot2)\nggplot(\n  data = plot_data,\n  mapping = aes(x = year, y = museums, color = deprivation)\n) +\n  geom_line()\n\n\n\n\n\n\nFigure 2.1: A line chart of total number of museums open per year for each level of deprivation, with the overlapping lines resembling spaghetti!\n\n\n\n\nspeghetti plots 10 is a fairly large number of colors\nSince the colors in the legend are in different order\nlet’s try separating out into different facets - see Chapter 1 (cross-ref needed) color to fill geom_area \n\n\nggplot(\n  data = plot_data,\n  mapping = aes(x = year, y = museums, fill = deprivation)\n) +\n  geom_area() +\n  facet_wrap(~deprivation, nrow = 2)\n\n\n\n\n\n\nFigure 2.2: An area chart of total number of museums open per year for each level of deprivation, with the each deprivation level in a different facet.\n\n\n\n\nthis was the initial design i started with, but hard to compare let’s go back to geom_line \n\nggplot(\n  data = plot_data,\n  mapping = aes(x = year, y = museums, color = deprivation)\n) +\n  geom_line() +\n  facet_wrap(~deprivation, nrow = 2) +\n  gghighlight::gghighlight(use_direct_label = FALSE)\n\n\n\n\n\n\nFigure 2.3: A line chart of total number of museums open per year for each level of deprivation, with the each deprivation level in a different facet and individual lines highlighted.\n\n\n\n\nsome of them started higher lower levels, let’s look at perc change instead\n\nlookup &lt;- plot_data |&gt;\n  dplyr::filter(year == 1960) |&gt;\n  dplyr::select(deprivation, museums)\n\nnew_plot_data &lt;- plot_data |&gt;\n  dplyr::left_join(lookup, by = \"deprivation\") |&gt;\n  dplyr::rename(\n    museums = museums.x,\n    museums_1960 = museums.y\n  ) |&gt;\n  dplyr::mutate(\n    change = (100 * (museums - museums_1960) / museums_1960)\n  ) |&gt;\n  dplyr::select(year, deprivation, change)\n\nlet’s plot instead\n\nbase_plot &lt;- ggplot(\n  data = new_plot_data,\n  mapping = aes(x = year, y = change, color = deprivation)\n) +\n  geom_line() +\n  facet_wrap(~deprivation, nrow = 2) +\n  gghighlight::gghighlight(use_direct_label = FALSE)\nbase_plot\n\n\n\n\n\n\nFigure 2.4: A line chart of percentage increase in museums (compared to 1960) for each level of deprivation, with the each deprivation level in a different facet and individual lines highlighted.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "uk-museums.html#advanced-styling",
    "href": "uk-museums.html#advanced-styling",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "\n2.4 Advanced styling",
    "text": "2.4 Advanced styling\nget rid of legend colors aren’t great\n\n2.4.1 Colors\n{viridis} (Garnier et al. 2024) \n\nbg_col &lt;- \"#fafafa\"\ntext_col &lt;- \"black\"\n\n\ncol_plot &lt;- base_plot +\n  viridis::scale_color_viridis(discrete = TRUE, direction = -1)\ncol_plot\n\n\n\n\n\n\nFigure 2.5: An updated version of the previous chart with colors chosen from the {viridis} R package.\n\n\n\n\n\n2.4.2 Text and fonts\n\nsysfonts::font_add_google(\"Raleway\", \"raleway\")\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font &lt;- \"raleway\"\n\n{sysfonts} {showtext}\n \nText\nmake sure text is correct one\n\ntitle &lt;- \"Are there fewer museums opening in more deprived areas?\"\nst &lt;- \"The change in the estimated number of open museums since 1960 is significantly lower in areas with higher levels of deprivation. *Since around 2000, the number of open museums has stagnated across all areas, regardless of deprivation index. However, the rate of growth prior to this stagnation is lower in more deprived areas.\"\ncap &lt;- \"*The Index of Multiple Deprivation (IMD) measures the relative deprivation of geographic areas in the UK, aggregating different dimensions (income, employment, education, health, crime, housing, and living environment). The index ranges from 1 (most deprived) to 10 (least deprived).&lt;br&gt;&lt;br&gt;**In some instances it has been impossible to establish an exact opening or closing date for a museum. In these cases, museums’ opening and closing dates are taken to be the mid point of a specified range of possible dates.&lt;br&gt;&lt;br&gt;N. Rennie | Data: museweb.dcs.bbk.ac.uk\"\n\n\n\ntext_plot &lt;- col_plot +\n  labs(\n    title = title, subtitle = st, caption = cap,\n    x = \"\",\n    y = \"% change in estimated number of\\nopen museums since 1960**\"\n  )\n\n\n2.4.3 Adjusting themes\n\nlibrary(ggtext)\ntext_plot +\n  scale_y_continuous(limits = c(0, 300)) +\n  coord_cartesian(expand = FALSE) +\n  theme_minimal(base_size = 8, base_family = body_font) +\n  theme(\n    legend.position = \"none\",\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    panel.spacing = unit(1, \"lines\"),\n    plot.margin = margin(10, 15, 10, 10),\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    plot.title = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5,\n      size = rel(1.2),\n      face = \"bold\",\n      margin = margin(b = 5)\n    ),\n    plot.subtitle = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5\n    ),\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col,\n      lineheight = 0.5\n    ),\n    axis.text = element_text(\n      color = text_col,\n      lineheight = 0.5\n    )\n  )\n\n\n\n\n\n\nFigure 2.6: A styled version of the previous plot - with a custom font, colored background, and better spacing.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "uk-museums.html#reflection",
    "href": "uk-museums.html#reflection",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "\n2.5 Reflection",
    "text": "2.5 Reflection\nWhat would I want to change about this plot? color probably not needed",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "uk-museums.html#the-making-of",
    "href": "uk-museums.html#the-making-of",
    "title": "2  UK Museums: highlighting line charts with {gghighlight}",
    "section": "\n2.6 The making of…",
    "text": "2.6 The making of…\nsee the making of . If you’d like to read more about {camcorder} - see chapter … .\n\n\n\n\n\n\n\n\nCommunity, R4DS Online Learning. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for r. https://doi.org/10.5281/zenodo.4679423.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuseums, Mapping. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>UK Museums: highlighting line charts with {gghighlight}</span>"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html#data",
    "href": "doctors-ageing-population.html#data",
    "title": "3  Doctors in an ageing population: making maps with {ggplot2}",
    "section": "\n3.1 Data",
    "text": "3.1 Data\n\nBring your own data\n\n#TidyTuesday (Community 2023)\n\nCommon data sources\nDoctors data\n\nThe … comes from Our World in Data (Data 2019)\n\ndoctors &lt;- readr::read_csv(\"data/doctors.csv\")",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Doctors in an ageing population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html#exploratory-work",
    "href": "doctors-ageing-population.html#exploratory-work",
    "title": "3  Doctors in an ageing population: making maps with {ggplot2}",
    "section": "\n3.2 Exploratory work",
    "text": "3.2 Exploratory work\n\n3.2.1 Data exploration\nwhat does data look like\n\n3.2.2 Exploratory sketches",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Doctors in an ageing population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html#preparing-a-plot",
    "href": "doctors-ageing-population.html#preparing-a-plot",
    "title": "3  Doctors in an ageing population: making maps with {ggplot2}",
    "section": "\n3.3 Preparing a plot",
    "text": "3.3 Preparing a plot\n\n3.3.1 Data wrangling\nSince this data is already fairly tidy, there isn’t too much data wrangling to be done. The only processing we really need to do is getting rid of the data we don’t need, and renaming a couple of columns to make them easier to work with. We can use the rename() function from {dplyr} to rename the entity column to region (for reasons that will become clear in the next paragraph!). We also rename the Physicians (per 1,000 people) column to doctors to make it easier to work with. The data has multiple entries for each country, spanning different years. We could make an animated map to show how the number of doctors is changing over time, but for now we’ll keep it simple with a static map showing a snapshot at one point in time. However, there’s a bit of a problem. If you inspect the data, you’ll see that not every country has an entry for each year - let’s use the most recent data available for each country. For each region, we keep the row with only the most recent year using a combination of group_by() and slice_max() from {dplyr}.\n\ndoctors &lt;- doctors |&gt;\n  dplyr::rename(\n    region = entity,\n    doctors = `Physicians (per 1,000 people)`) |&gt;\n  dplyr::select(region, year, doctors) |&gt;\n  dplyr::group_by(region) |&gt;\n  dplyr::slice_max(year) |&gt;\n  dplyr::ungroup()\n\nTo plot this data on a world map, we also need data for the country borders. Luckily, the map_data() function built into {ggplot2} can help us with that! This function takes data from the {maps} package and turns it into an object you can plot directly with {ggplot2}.\n\nlibrary(ggplot2)\nworld &lt;- map_data(\"world\")\n\nOf course, it’s never quite that straightforward. We need to join the world map data to our doctors data, and to do that we need a column in each data sets to join by - we’ll use the region column. If you try to join these two data sets using the region column, you’ll notice that you end up with some unexpected NA values. So what’s going on?\n\nYou don’t need to rename columns in your data to be able to join them, but for this example, I found it a little bit easier to work with the data after renaming entity to region.\n\nThere are two issues here. Firstly, there are more regions in the world data than there are in the doctors data:\n\nlength(unique(world$region))\n\n[1] 252\n\nlength(unique(doctors$region))\n\n[1] 221\n\n\nIf you go ahead and inspect the country names, you’ll see that for some countries, they are encoded differently. For example, in the world data, the United States is listed as \"USA\" whilst in the doctors data, it’s listed as \"United States\". Here, the easiest thing to do is manually rename the values that differ in one of the datasets. We can use the recode() function from {dplyr} to do that. Note that recode() has the rather unusual (for the {tidyverse}) syntax of old_name = new_name:\n\nplot_data &lt;- doctors |&gt;\n  dplyr::mutate(\n    region =\n      dplyr::recode(region,\n        \"United Kingdom\" = \"UK\",\n        \"United States\" = \"USA\",\n        \"Congo, Dem. Rep.\" = \"Democratic Republic of the Congo\",\n        \"Cote d'Ivoire\" = \"Ivory Coast\",\n        \"Congo, Rep.\" = \"Republic of Congo\")\n  )\n\n and filter out Antarctica \n\nmap_data &lt;- dplyr::left_join(world, plot_data, by = \"region\") |&gt;\n  dplyr::filter(region != \"Antarctica\")\n\n\n3.3.2 The first plot\n\n\n\nbase_plot &lt;- ggplot(\n  data = map_data,\n  mapping = aes(\n    long,\n    lat,\n    map_id = region,\n    fill = doctors)) +\n  geom_map(map = map_data)\nbase_plot\n\n\n\n\n\n\nFigure 3.1: Map of the world with countries colored based on number of doctors per 1,000 people. The map looks stretched.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Doctors in an ageing population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html#advanced-styling",
    "href": "doctors-ageing-population.html#advanced-styling",
    "title": "3  Doctors in an ageing population: making maps with {ggplot2}",
    "section": "\n3.4 Advanced styling",
    "text": "3.4 Advanced styling\n\n3.4.1 Colors\n\n\nlibrary(MetBrewer)\ncol_palette &lt;- met.brewer(\"Hokusai2\", n = 20)\ntext_col &lt;- col_palette[18]\nhighlight_col &lt;- col_palette[15]\nbg_col &lt;- \"#EADEDA\"\n\n\n\ncol_plot &lt;- base_plot +\n  scale_fill_gradientn(\n    colors = col_palette,\n    limits = c(0, 10),\n    breaks = c(0.5, 9.5),\n    labels = c(\"Fewer doctors\", \"More doctors\")) +\n  guides(fill = guide_colorbar(ticks = FALSE))\ncol_plot\n\n\n\n\n\n\nFigure 3.2: Map of the world with countries colored based on number of doctors per 1,000 people, showing a different color scheme.\n\n\n\n\n\n3.4.2 Text and fonts\n{sysfonts} {showtext}\n \n\nsysfonts::font_add_google(name = \"Roboto\", family = \"roboto\")\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font &lt;- \"roboto\"\n\n\ntitle &lt;- \"Doctors in an ageing population\"\nst &lt;- \"This map show the number of doctors per thousand people, rescaled by the percentage of the population aged over 70, revealing which countries* may be more likely to struggle in providing care for an elderly population.&lt;br&gt; using most recent available data for each country.\"\ncap &lt;- \"**Data**: Our World in Data | **Graphic**: N. Rennie\"\n\n\ntext_plot &lt;- col_plot +\n  labs(title = title, subtitle = st, caption = cap)\n\n\n3.4.3 Adjusting themes\n\n\nlibrary(ggtext)\ntext_plot +\n  theme_void(base_size = 8, base_family = body_font) +\n  theme(\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col),\n    plot.title = element_textbox_simple(\n      color = text_col),\n    plot.subtitle = element_textbox_simple(\n      color = text_col),\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col)\n  )\n\n\n\n\n\n\nFigure 3.3: Map of the world with countries colored based on number of doctors per 1,000 people. Styling …\n\n\n\n\nBox for title facets\n\n\nmap_data$label &lt;- title\n\nWhile we’re here, let’s lines of map same color as bg and a little bit thinner\n\nstyled_plot &lt;- ggplot(\n  data = map_data,\n  mapping = aes(\n    long,\n    lat,\n    map_id = region,\n    fill = doctors)) +\n  geom_map(\n    map = map_data,\n    color = bg_col,\n    linewidth = 0.5) +\n  scale_fill_gradientn(\n    colors = col_palette,\n    limits = c(0, 10),\n    breaks = c(0.5, 9.5),\n    labels = c(\"Fewer doctors\", \"More doctors\")) +\n  guides(fill = guide_colorbar(ticks = FALSE)) +\n  labs(title = title, subtitle = st, caption = cap) +\n  facet_wrap(~label) +\n  theme_void(base_size = 8, base_family = body_font) +\n  theme(\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col),\n    plot.title = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5),\n    plot.subtitle = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5),\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col,\n      lineheight = 0.5),\n    strip.background = element_rect(\n      fill = highlight_col, color = highlight_col)\n  )\nstyled_plot\n\n\n\n\n\n\nFigure 3.4: caption\n\n\n\n\nmove subtitle text\n\n\n\n\n\n\nNote legend.position.inside used to be legend.position before ggplot2 3.5.0\n\n\n\n\nstyled_plot +\n  labs(\n    subtitle = NULL, tag = st\n  ) +\n  theme(\n    # move and format the tag (subtitle) text\n    plot.tag.position = c(0.03, 0.78),\n    plot.tag = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5,\n      hjust = 0\n    ),\n    # change title text color\n    plot.title = element_textbox_simple(\n      color = bg_col,\n      lineheight = 0.5\n    ),\n    # style the legend\n    legend.text = element_text(\n      color = text_col,\n      lineheight = 0.5,\n      hjust = 0.5\n    ),\n    legend.key.width = unit(2, \"cm\"),\n    legend.key.height = unit(0.3, \"cm\"),\n    legend.position.inside = c(0.645, -0.005),\n    legend.title = element_blank(),\n    legend.direction = \"horizontal\",\n    plot.margin = margin(0, 0, 10, 0)\n  )\n\n\n\n\n\n\nFigure 3.5: caption",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Doctors in an ageing population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "doctors-ageing-population.html#reflection",
    "href": "doctors-ageing-population.html#reflection",
    "title": "3  Doctors in an ageing population: making maps with {ggplot2}",
    "section": "\n3.5 Reflection",
    "text": "3.5 Reflection\n\nNote: ℹ The package “mapproj” is required for coord_map(). ✖ Would you like to install it?\n\n1: Yes 2: No\nWhen the original plot of this data was created, it plotted the number of doctors per 1,000 people over the age of 70 and the colours were based on the log of this value. The raw values on the colour scale were hard to interpret, so the choice was made to use Fewer doctors and More doctors labels instead. For this version, where the underlying data is simpler and easier to …\nWhen we were processing the data, we made the choice to plot a map showing the values for the most recently available data. That means that for some countries the data is more recent (and therefore perhaps more reliable), whilst for others it’s much older. In fact, running range(doctors$year) shows that the most recent data in the plot is from 2019, whilst the oldest is from 1980 - a gap of almost 40 years! That makes it much harder to accurately compare between countries, and there’s no indication for each country on this map how recent the data is. Showing uncertainty on maps is tricky, … perhaps setting the colours … above or below average, with the intensity … . Or at least a more detailed\nEach plot created during the process of developing the original version of this visualisation was captured using {camcorder}, and is shown in the gif below. If you’d like to learn more about how {camcorder} can be used in the data visualisation process, have a read at Hughes (2022).\n\n\n\n\n\n\n\n\nCommunity, R4DS Online Learning. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nData, Our World in. 2019. “Medical Doctors Per 1,000 People, 2019.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nHughes, Ellis. 2022. Camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.",
    "crumbs": [
      "Visualising spatial data",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Doctors in an ageing population: making maps with {ggplot2}</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#data",
    "href": "technology-adoption.html#data",
    "title": "4  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n4.1 Data",
    "text": "4.1 Data\nThe technology adoption (Comin and B. 2004) data comes from\n\n#tuesdata &lt;- tidytuesdayR::tt_load(\"2022-07-19\")\n#technology &lt;- tuesdata$technology\ntechnology &lt;- readr::read_csv(\"data/technology.csv\")\n\n\nThe technology data is reasonably large with 491636 rows and 7 columns. The data is in long format, and",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Technology adoption: making gauge charts with {ggforce}</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#exploratory-work",
    "href": "technology-adoption.html#exploratory-work",
    "title": "4  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n4.2 Exploratory work",
    "text": "4.2 Exploratory work\nWhat might be an interesting aspect of this data to visualize?\n\n4.2.1 Data exploration\nAs in other chapters n this book, we’ll start with some basic exploratory plots in base R. For example, we may look at the distribution of variables in each category using the barplot function:\n\nbarplot(\n  table(technology$category),\n  las = 2,\n  cex.axis = 0.5,\n  cex.names = 0.5\n)\n\n\n\n\n\n\n\nsome initial base R exploratory plots\nLet’s look at something more specific\nA list of all ISO3 country codes can be obtained by running unique(technology$iso3c), and from there we can choose a subset of countries we want to look at in more detail. Let’s look at Great Britain, USA, Sweden, Brazil, New Zealand, and Venezuela, and store these choices in a vector called countries. We also need to narrow down the data we want to consider - there are 194 different questions contained in the data. You can check by running length(unique(technology$label)). One variable we will consider further is the percentage of children who received a measles immunization - indicated by the \"pctimmunizmeas\" level in the variable column.\nAlthough including all years of data would better allow us to consider trends in the values, sometimes looking at a only a few snapshots can be more effective. For example, by considering only the years 1980 and 2010 as we’ll do here, readers get a Wow, look how much things have changed! message rather than the perhaps less impactful visual of a gradual trend. We can use the filter function from {dplyr} to filter our technology data set to consider only the rows showing data about percentage of children who received a measles immunization, in the years 1980 or 2010, and relating to countries in our specified vector of countries.\nWe no longer need the group, category, variable, or label columns, as these are constant for our data so we can remove these columns using select() from {dplyr}.\n\n# subset of countries to look at further\ncountries &lt;- c(\"GBR\", \"USA\", \"SWE\", \"BRA\", \"NZL\", \"VEN\")\n\n# subset data for specific topic, years, and countries\nmeasles_data &lt;- technology |&gt;\n  dplyr::filter(\n    label == \"% children who received a measles immunization\",\n    year %in% c(1980, 2010),\n    iso3c %in% countries\n  ) |&gt;\n  dplyr::select(-c(group, category, variable, label))\nhead(measles_data)\n\n# A tibble: 6 × 3\n  iso3c  year value\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 BRA    1980    57\n2 BRA    2010    99\n3 GBR    1980    53\n4 GBR    2010    89\n5 NZL    1980    80\n6 NZL    2010    91\n\n\nOur tidier data now shows just the percentage (value) of children who received a measles immunization in each country (iso3c), in each of 1980 and 2010 (year), How might we visualize this data?\nThere are a couple of obvious options that come to mind: a simple grouped bar chart, a slope chart, or indeed the (not often popular) pie chart Our choice of data visualization will depend on which aspects of the data we want to show. Do we want to compare 1980 to 2010? Do we want to compare countries to each other? Do we just want to show the range of values in the data? In this data, the most interesting example is a comparison between 1980 and 2010. Although a slope chart would likely work well for this data, we’re going a little bit more experimental with a gauge chart.\nAt the time of writing, there isn’t a built-in function in {ggplot2} to create gauge charts. If you’ve never heard of a gauge chart, this initial sketch might give you an idea of what we’re aiming for.\n\n4.2.2 Exploratory sketches\nBefore …",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Technology adoption: making gauge charts with {ggforce}</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#preparing-a-plot",
    "href": "technology-adoption.html#preparing-a-plot",
    "title": "4  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n4.3 Preparing a plot",
    "text": "4.3 Preparing a plot\n\n4.3.1 Data wrangling\n\nplot_data &lt;- measles_data |&gt;\n  dplyr::mutate(no_value = 100 - value) |&gt;\n  tidyr::pivot_longer(\n    cols = c(value, no_value),\n    names_to = \"YN\",\n    values_to = \"perc\"\n  ) |&gt;\n  tidyr::pivot_wider(names_from = \"year\", values_from = \"perc\") |&gt;\n  dplyr::mutate(YN = factor(YN)) |&gt;\n  dplyr::mutate(\n    perc_1980 = `1980` / 100,\n    perc_2010 = `2010` / 100\n  ) |&gt;\n  dplyr::select(-c(`1980`, `2010`)) |&gt;\n  dplyr::group_by(iso3c) |&gt;\n  dplyr::mutate(\n    ymax_1980 = cumsum(perc_1980),\n    ymax_2010 = cumsum(perc_2010)\n  )\nhead(plot_data)\n\n# A tibble: 6 × 6\n# Groups:   iso3c [3]\n  iso3c YN       perc_1980 perc_2010 ymax_1980 ymax_2010\n  &lt;chr&gt; &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 BRA   value         0.57      0.99      0.57      0.99\n2 BRA   no_value      0.43      0.01      1         1   \n3 GBR   value         0.53      0.89      0.53      0.89\n4 GBR   no_value      0.47      0.11      1         1   \n5 NZL   value         0.8       0.91      0.8       0.91\n6 NZL   no_value      0.2       0.09      1         1   \n\n\n\n4.3.2 The {ggforce} extension package\nThe {ggforce} extension package (Pedersen 2022) contains many useful functions which extend the behavior of {ggplot2}, many of them aimed at exploratory data visualisation. We won’t cover many of it’s function in this chapter, and instead we’ll focus on how to use it to create gauge charts.\n{ggforce} is available on CRAN and can be installed with the usual install.packages(\"ggforce\") command.\n\n4.3.3 Gauge charts with {ggforce}\ngeom_arc_bar()\n\n4.3.4 Reformatting data\ngauge data\nthis changed from original mutate_at\n\ngauge_data &lt;- plot_data |&gt;\n  dplyr::ungroup() |&gt;\n  dplyr::mutate(\n    ymin_1980 = c(rbind(\n      rep(0, length(countries)),\n      (dplyr::slice_head(plot_data, n = -1) |&gt;\n        dplyr::pull(ymax_1980))\n    ))\n  ) |&gt;\n  dplyr::mutate(\n    ymin_2010 = c(rbind(\n      rep(0, length(countries)),\n      (dplyr::slice_head(plot_data, n = -1) |&gt;\n        dplyr::pull(ymax_2010))\n    ))\n  ) |&gt;\n  dplyr::group_by(iso3c) |&gt;\n  dplyr::mutate(\n    dplyr::across(\n      dplyr::starts_with(\"y\", ignore.case = FALSE),\n      ~ scales::rescale(.,\n        to = pi * c(-0.5, 0.5),\n        from = 0:1\n      )\n    )\n  )\n\n\n4.3.5 The first plot\nbasic plot\n\nlibrary(ggplot2)\nbasic_plot &lt;- ggplot(data = gauge_data) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010,\n      fill = YN\n    )\n  ) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980,\n      fill = YN\n    )\n  ) +\n  facet_wrap(~iso3c, nrow = 2)\nbasic_plot\n\n\n\n\n\n\nFigure 4.1: Initial plot created using geom_arc_bar() from {ggforce}, facetted by different countries.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Technology adoption: making gauge charts with {ggforce}</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#advanced-styling",
    "href": "technology-adoption.html#advanced-styling",
    "title": "4  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n4.4 Advanced styling",
    "text": "4.4 Advanced styling\n\n4.4.1 Colors\n\nhighlight_col &lt;- \"#990c58\"\nsecond_col &lt;- \"#949398\"\nbg_col &lt;- \"#dedede\"\n\nadd new colors to basic plot\n\nbasic_plot &lt;- ggplot(data = gauge_data) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010,\n      fill = YN\n    ),\n    color = second_col\n  ) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980,\n      fill = YN\n    ),\n    color = second_col\n  ) +\n  facet_wrap(~iso3c, nrow = 2)\n\nadd scale fill\n\ncolor_plot &lt;- basic_plot +\n  scale_fill_manual(\n    breaks = c(\"value\", \"no_value\"),\n    labels = c(\"Immunised\", \"Not Immunised\"),\n    values = c(highlight_col, second_col)\n  )\ncolor_plot\n\n\n\n\n\n\nFigure 4.2: Edited version of the previous plot with colors changed from defaults to grey and dark pink.\n\n\n\n\n\n4.4.2 Text and fonts\nAs we’ve seen in previous chapters, we can load in Google fonts using the {sysfonts} and {showtext} packages. Here, we’ll keep it clean and minimal by using the \"Ubuntu\" font for both the title and the body font.\n \n\nsysfonts::font_add_google(name = \"Ubuntu\", family = \"ubuntu\")\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font &lt;- \"ubuntu\"\n\nwrite text social to add\n\ntitle &lt;- \"Measles Vaccinations\"\nsubtitle &lt;- \"The inner bar represents the percentage of children who received a measles immunisation in 1980, whilst the outer bar represents the percentage in 2010. An increase in immunisation levels between 1980 and 2010 is seen across all countries.\\n\\nN. Rennie | Data: data.nber.org (10.3386/w15319)\"\n\nSince axis labels tend not to make too much sense for geom-arc_bar() plots, we’ll remove them later when using the theme functions. Instead, we can add our own labels using geom_text() to the end of the gauges. To make it easier, we can construct a small data.frame specifically for adding text labels. This includes the x, and y coordinates where the text should be positioned (you can read these of from the graph we already have since we haven’t yet deleted the axis label), as well as the label that should appear.\n\ntext_df &lt;- data.frame(\n  x = c(0.35, 0.85),\n  y = c(-0.1, -0.1),\n  label = c(1980, 2010)\n)\n\nWe can then add this to the existing plot by adding a layer with geom_text(), noting that we need to specify the data argument as using the text dataframe we just created. We also need to specify the font family and size directly within the geom_text() function, and can add the title and subtitle text created earlier using the labs() function from {ggplot2}.\n\ntext_plot &lt;- color_plot +\n  geom_text(\n    data = text_df,\n    mapping = aes(x = x, y = y, label = label),\n    family = body_font,\n    size = 3\n  ) +\n  labs(\n    title = title,\n    subtitle = subtitle\n  )\ntext_plot\n\n\n\n\n\n\nFigure 4.3: Previous plot with additional labels indicating the year on each gauge chart, as well as an added title and subtitle.\n\n\n\n\nYou’ll notice that the subtitle text runs off the page here. Let’s fix that using {ggplot2} themes and {ggtext} functions.\n\n4.4.3 Adjusting themes\nWe’ll start by removing all of the theme element such as the grey background, grid lines, axis labels. The easiest way to do this is using theme_void(). We can use the base_family argument of theme_void() to set the font family that will be used by default for any non-geom text elements that remain.\nYou may have noticed that the current gauge plots look a bit squashed and not exactly semi-circular. We can fix this by adding coord_fixed() which forces a 1:1 aspect ratio on the plot panel.\n\ntheme_plot1 &lt;- text_plot +\n  coord_fixed() +\n  theme_void(base_size = 8, base_family = body_font)\ntheme_plot1\n\n\n\n\n\n\nFigure 4.4: Edited version of previous plot with fixed coordinate system to prevent squashing, and all theme elements removed.\n\n\n\n\nThis looks better but it’s still not great. What do we still need to improve with styling? The title text doesn’t stand out and blends in to easily with the subtitle, similarly for the facet text. Perhaps a bold font would help? The subtitle text doesn’t fit onto the page but we can fix that with the help of the hopefully now familiar element_textbox_simple() function from {ggtext} .\nbg col remove legend\nLet’s fix the first three of these issues.\n\nmain_plot &lt;- theme_plot1 +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    strip.text = element_text(\n      face = \"bold\", size = rel(1.2)\n    ),\n    plot.title = element_text(\n      margin = margin(t = 10, b = 10),\n      face = \"bold\",\n      size = rel(1.5)\n    ),\n    plot.subtitle = ggtext::element_textbox_simple(\n      maxwidth = 0.8,\n      lineheight = 0.5,\n      hjust = 0.5,\n    ),\n    plot.margin = margin(5, 5, 5, 5)\n  )\nmain_plot\n\n\n\n\n\n\nFigure 4.5: Further styling of gauge chart to change background color, prevent overlapping in the subtitle text, and increase the size of the title.\n\n\n\n\n\n4.4.4 Adding a better legend\nAs we already saw in chapter …,\n\nlegend_plot &lt;- ggplot(\n  data = dplyr::filter(gauge_data, iso3c == \"USA\")\n) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010,\n      fill = YN\n    ),\n    color = second_col\n  ) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980,\n      fill = YN\n    ),\n    color = second_col\n  ) +\n  geom_text(\n    data = text_df,\n    mapping = aes(x = x, y = y, label = label),\n    family = body_font, size = 6\n  ) +\n  facet_wrap(~iso3c) +\n  scale_fill_manual(\n    breaks = c(\"value\", \"no_value\"),\n    labels = c(\"Immunised\", \"Not Immunised\"),\n    values = c(highlight_col, second_col)\n  ) +\n  labs(title = \"How do I read this plot?\") +\n  coord_fixed() +\n  theme_void(base_size = 8, base_family = body_font) +\n  theme(\n    legend.position = \"bottom\",\n    legend.title = element_blank(),\n    plot.background = element_rect(\n      fill = \"transparent\", color = \"transparent\"\n    ),\n    panel.background = element_rect(\n      fill = \"transparent\", color = \"transparent\"\n    ),\n    plot.title = element_text(\n      hjust = 0.5,\n      face = \"italic\",\n      margin = margin(t = 10, b = 10)\n    ),\n    plot.margin = margin(5, 5, 5, 5)\n  )\nlegend_plot\n\n\n\n\n\n\nFigure 4.6: Version of the gauge chart shown only for USA which will act as a legend.\n\n\n\n\n\n4.4.5 Combining legend with {patchwork}\nJoin with {patchwork}\n\nlibrary(patchwork)\nfinal_plot &lt;- main_plot +\n  inset_element(legend_plot, 0.5, 0.9, 1.1, 1.4) &\n  theme(\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    )\n  )\nfinal_plot\n\n\n\n\n\n\nFigure 4.7: Final gauge chart with overlaid legend in top right corner.\n\n\n\n\nAs with previous examples, don’t be fooled into thinking that the size of the legend and it’s positioning within the main plot is something that happened perfectly this first. The values are often picked through a series of trial and error, and with practice you’ll get better at choosing starting values.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Technology adoption: making gauge charts with {ggforce}</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#reflection",
    "href": "technology-adoption.html#reflection",
    "title": "4  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n4.5 Reflection",
    "text": "4.5 Reflection\nAre gauge charts the most effective method of visualising this data? No. Gauge charts have their own problems, some of which you can see here. Since the ring representing 2010 is on the outside, the radius is larger, and therefore the area . If you measure the change on arc length between 1980 and 2010, you’ll get different answers to if you measured the proportional change in area for the two.\n\n\n\n\nComin, D., and Hohijn B. 2004. “Cross-Country Technological Adoption: Making the Theories Face the Facts.” Journal of Monetary Economics January 2004: 39–83.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce.",
    "crumbs": [
      "Weird and wonderful: completely custom charts",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Technology adoption: making gauge charts with {ggforce}</span>"
    ]
  },
  {
    "objectID": "conclusion.html#template-files-for-tidytuesday",
    "href": "conclusion.html#template-files-for-tidytuesday",
    "title": "5  Conclusion: other tips and tricks",
    "section": "5.1 Template files for #TidyTuesday",
    "text": "5.1 Template files for #TidyTuesday\nYou may notice that",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion: other tips and tricks</span>"
    ]
  },
  {
    "objectID": "conclusion.html#helper-functions",
    "href": "conclusion.html#helper-functions",
    "title": "5  Conclusion: other tips and tricks",
    "section": "5.2 Helper functions",
    "text": "5.2 Helper functions",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion: other tips and tricks</span>"
    ]
  },
  {
    "objectID": "conclusion.html#camcorder",
    "href": "conclusion.html#camcorder",
    "title": "5  Conclusion: other tips and tricks",
    "section": "5.3 {camcorder} for gifs",
    "text": "5.3 {camcorder} for gifs",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion: other tips and tricks</span>"
    ]
  },
  {
    "objectID": "conclusion.html#other-packages-i-didnt-mention-but-use",
    "href": "conclusion.html#other-packages-i-didnt-mention-but-use",
    "title": "5  Conclusion: other tips and tricks",
    "section": "5.4 Other packages I didn’t mention but use",
    "text": "5.4 Other packages I didn’t mention but use\nggsankey and ggalluvial",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion: other tips and tricks</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Bibliography",
    "section": "",
    "text": "Comin, D., and Hohijn B. 2004. “Cross-Country Technological\nAdoption: Making the Theories Face the Facts.” Journal of\nMonetary Economics January 2004: 39–83.\n\n\nCommunity, R4DS Online Learning. 2023. “Tidy Tuesday: A Weekly\nSocial Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nData, Our World in. 2019. “Medical Doctors Per 1,000 People,\n2019.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024.\nviridis(Lite) - Colorblind-Friendly\nColor Maps for r. https://doi.org/10.5281/zenodo.4679423.\n\n\nHughes, Ellis. 2022. Camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data\nFrames. https://CRAN.R-project.org/package=tibble.\n\n\nMuseums, Mapping. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023.\nR for Data Science. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional\nProgramming Tools. https://CRAN.R-project.org/package=purrr.",
    "crumbs": [
      "Bibliography"
    ]
  }
]