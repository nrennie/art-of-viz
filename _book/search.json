[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The #TidyTuesday Cookbook",
    "section": "",
    "text": "Preface\nWelcome to the online version of The #TidyTuesday Cookbook by Nicola Rennie.\nThis book is currently a work-in-progress."
  },
  {
    "objectID": "index.html#about-the-author",
    "href": "index.html#about-the-author",
    "title": "The #TidyTuesday Cookbook",
    "section": "About the author",
    "text": "About the author\nNicola Rennie is a Lecturer in Health Data Science within the Centre for Health Informatics, Computing, and Statistics at Lancaster University. She holds a PhD in Statistics and Operational Research, focusing on analysing and visualising transport demand. Her current research is focused on applications of statistics and machine learning to health-related data, communicating statistics, and the effective teaching of data science. She has experience of teaching at both undergraduate and postgraduate level, in courses covering fundamentals of data science, population health, and statistical programming. Nicola has also previously worked in data science consultancy, and delivered training courses covering topics including advanced data visualisation with R, statistical modelling, and reproducible reporting. She is the author and maintainer of several R packages, including multiple {ggplot2} extension packages. Nicola is a regular speaker at R and data science meetups, and is the current chapter organiser of R-Ladies Lancaster. She is co-author of the Royal Statistical Society’s Best Practices for Data Visualisation Guide, and an active member of the Royal Statistical Society. Several of her data visualisations have been long-listed at the Information is Beautiful Awards."
  },
  {
    "objectID": "introduction.html#why-visualise-data",
    "href": "introduction.html#why-visualise-data",
    "title": "2  Introduction",
    "section": "2.1 Why visualise data?",
    "text": "2.1 Why visualise data?\nData visualisation can be a very effective and efficient means of communicating information.\nThat being said, the visualisations in this book are not necessarily always the most effective choice of visualisation for the data and relationship shown. Rather, this book aims to\ncreativity, technical …, alongside … ."
  },
  {
    "objectID": "introduction.html#what-is-tidytuesday",
    "href": "introduction.html#what-is-tidytuesday",
    "title": "2  Introduction",
    "section": "2.2 What is #TidyTuesday?",
    "text": "2.2 What is #TidyTuesday?\n#TidyTuesday (Community 2023) is a weekly social data project which aims to make learning to work with data easier, by providing real-world datasets. Participants are encouraged to explore the data shared via GitHub each week, create an output such as a data visualisation, and share their output alongside their code, with the community.\nAfter three years of weekly contributions, I’ve worked with around 150 datasets and created over 150 data visualisations. This book will present a subset of these visualisations, and describe the process used to create them. Each chapter will cover a different data visualisation, showing: the data exploration process; the choice of data visualisation type; the initial design ideas with hand-drawn sketches; the first build of a plot; and the iterative process of styling plots."
  },
  {
    "objectID": "introduction.html#background-knowledge",
    "href": "introduction.html#background-knowledge",
    "title": "2  Introduction",
    "section": "2.3 Background knowledge",
    "text": "2.3 Background knowledge\nThis book is primarily aimed at those who wish to develop their data visualisation skills in R. Readers of this book may find a basic knowledge of R, more specifically of the {tidyverse} ecosystem, useful though all code used in examples is fully explained. Readers do not need to be experienced in {ggplot2}, though this book will also be of interest to those who are. Readers of this book will be of interest to those who are already familiar with R (including {ggplot2}), and wish to develop their skills in designing data visualisations further. It will also be of interest to those who already design data visualisations using other tools, and want to learn how to do the equivalent in R."
  },
  {
    "objectID": "introduction.html#a-note-about-r-code",
    "href": "introduction.html#a-note-about-r-code",
    "title": "2  Introduction",
    "section": "2.4 A note about R code",
    "text": "2.4 A note about R code\nAll code in this was created using R version 4.3.0, and a complete list of package versions can be found in the Appendix.\n\n2.4.1 Base R pipe vs {magrittr} pipe\nIn R, the pipe operator takes the thing on its left and passes it along to the function on its right (Wickham, Çetinkaya-Rundel, and Grolemund 2023). You can find a full description of the pipe operator in R for Data Science. The pipe (%&gt;%) was first introduced to R via the {magrittr} package. Since version 4.1.0 of R, a version of the pipe (|&gt;) has existed in base R. The base R version of the pipe is used throughout the book. Although there are some difference between the two version of the pipe, in this book, they can be used interchangeably.\n\n\n2.4.2 Namespacing\nNamespacing (the pre-fixing of functions with the package name and ::) is used for all packages except {ggplot2} and base R packages. Namespacing is useful for two reasons (i) from a learning perspective, it makes it easier to recognise where functions come from and how they connect together, and (ii) from a programming perspective, it reduces conflicts and errors - something we all want less of!\n\n\n2.4.3 Changes to from earlier versions\nYou may notice that some of the final images differ slightly from those initially created and published on social media. You might also find some small differences in the code used to produce them if you compare the contents of this book to original scripts in the GitHub repository. These differences are likely due to one of four reasons:\n\npackages have since been updated and code has been changed to use newer syntax;\nsome aspects have been omitted from a visualisation to avoid explaining everything in Chapter 1 - but those aspects are all covered and linked to in later chapters;\nafter many years of practice, there may be more efficient ways of re-writing code from some of the earlier plots. Any changes are clearly labelled and discussed;\nsome images may be different due to copyright reasons.\n\n\n\n\n\nCommunity, R4DS Online Learning. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. O-Reilly. https://r4ds.hadley.nz."
  },
  {
    "objectID": "technology-adoption.html#data",
    "href": "technology-adoption.html#data",
    "title": "3  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n3.1 Data",
    "text": "3.1 Data\nThe technology adoption (Comin and B. 2004) data comes from\n\ntuesdata &lt;- tidytuesdayR::tt_load(\"2022-07-19\")\ntechnology &lt;- tuesdata$technology\n\nThe technology data is reasonably large with 491636 rows and 7 columns. The data is in long format, and\nWhat might be an interesting aspect of this data to visualize?"
  },
  {
    "objectID": "technology-adoption.html#initial-exploration",
    "href": "technology-adoption.html#initial-exploration",
    "title": "3  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n3.2 Initial exploration",
    "text": "3.2 Initial exploration\nAs in other chapters n this book, we’ll start with some basic exploratory plots in base R. For example, we may look at the distribution of variables in each category using the barplot function:\n\nbarplot(\n  table(technology$category),\n  las = 2,\n  cex.axis = 0.5,\n  cex.names = 0.5\n)\n\n\n\n\nsome initial base R exploratory plots\nLet’s look at something more specific\nA list of all ISO3 country codes can be obtained by running unique(technology$iso3c), and from there we can choose a subset of countries we want to look at in more detail. Let’s look at Great Britain, USA, Sweden, Brazil, New Zealand, and Venezuela, and store these choices in a vector called countries. We also need to narrow down the data we want to consider - there are 194 different questions contained in the data. You can check by running length(unique(technology$label)). One variable we will consider further is the percentage of children who received a measles immunization - indicated by the \"pctimmunizmeas\" level in the variable column.\nAlthough including all years of data would better allow us to consider trends in the values, sometimes looking at a only a few snapshots can be more effective. For example, by considering only the years 1980 and 2010 as we’ll do here, readers get a Wow, look how much things have changed! message rather than the perhaps less impactful visual of a gradual trend. We can use the filter function from {dplyr} to filter our technology data set to consider only the rows showing data about percentage of children who received a measles immunization, in the years 1980 or 2010, and relating to countries in our specified vector of countries.\nWe no longer need the group, category, variable, or label columns, as these are constant for our data so we can remove these columns using select() from {dplyr}.\n\n# subset of countries to look at further\ncountries &lt;- c(\"GBR\", \"USA\", \"SWE\", \"BRA\", \"NZL\", \"VEN\")\n\n# subset data for specific topic, years, and countries\nmeasles_data &lt;- technology |&gt;\n  dplyr::filter(\n    label == \"% children who received a measles immunization\",\n    year %in% c(1980, 2010),\n    iso3c %in% countries\n  ) |&gt;\n  dplyr::select(-c(group, category, variable, label))\nhead(measles_data)\n\n# A tibble: 6 × 3\n  iso3c  year value\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 BRA    1980    57\n2 BRA    2010    99\n3 GBR    1980    53\n4 GBR    2010    89\n5 NZL    1980    80\n6 NZL    2010    91\n\n\nOur tidier data now shows just the percentage (value) of children who received a measles immunization in each country (iso3c), in each of 1980 and 2010 (year), How might we visualize this data?\nThere are a couple of obvious options that come to mind: a simple grouped bar chart, a slope chart, or indeed the (not often popular) pie chart Our choice of data visualization will depend on which aspects of the data we want to show. Do we want to compare 1980 to 2010? Do we want to compare countries to each other? Do we just want to show the range of values in the data? In this data, the most interesting example is a comparison between 1980 and 2010. Although a slope chart would likely work well for this data, we’re going a little bit more experimental with a gauge chart.\nAt the time of writing, there isn’t a built-in function in {ggplot2} to create gauge charts. If you’ve never heard of a gauge chart, this initial sketch might give you an idea of what we’re aiming for.\nphotos of sketches\nBefore …"
  },
  {
    "objectID": "technology-adoption.html#data-wrangling",
    "href": "technology-adoption.html#data-wrangling",
    "title": "3  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n3.3 Data wrangling",
    "text": "3.3 Data wrangling\n\nplot_data &lt;- measles_data |&gt;\n  dplyr::mutate(no_value = 100 - value) |&gt;\n  tidyr::pivot_longer(\n    cols = c(value, no_value),\n    names_to = \"YN\",\n    values_to = \"perc\"\n  ) |&gt;\n  tidyr::pivot_wider(names_from = \"year\", values_from = \"perc\") |&gt;\n  dplyr::mutate(YN = factor(YN)) |&gt;\n  dplyr::mutate(\n    perc_1980 = `1980` / 100,\n    perc_2010 = `2010` / 100\n  ) |&gt;\n  dplyr::select(-c(`1980`, `2010`)) |&gt;\n  dplyr::group_by(iso3c) |&gt;\n  dplyr::mutate(\n    ymax_1980 = cumsum(perc_1980),\n    ymax_2010 = cumsum(perc_2010)\n  )\nhead(plot_data)\n\n# A tibble: 6 × 6\n# Groups:   iso3c [3]\n  iso3c YN       perc_1980 perc_2010 ymax_1980 ymax_2010\n  &lt;chr&gt; &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 BRA   value         0.57      0.99      0.57      0.99\n2 BRA   no_value      0.43      0.01      1         1   \n3 GBR   value         0.53      0.89      0.53      0.89\n4 GBR   no_value      0.47      0.11      1         1   \n5 NZL   value         0.8       0.91      0.8       0.91\n6 NZL   no_value      0.2       0.09      1         1"
  },
  {
    "objectID": "technology-adoption.html#the-ggforce-extension-package",
    "href": "technology-adoption.html#the-ggforce-extension-package",
    "title": "3  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n3.4 The {ggforce} extension package",
    "text": "3.4 The {ggforce} extension package\nThe {ggforce} extension package (Pedersen 2022) contains many useful functions which extend the behavior of {ggplot2}, many of them aimed at exploratory data visualisation. We won’t cover many of it’s function in this chapter, and instead we’ll focus on how to use it to create gauge charts.\n{ggforce} is available on CRAN and can be installed with the usual install.packages(\"ggforce\") command.\n\n3.4.1 Gauge charts with {ggforce}\ngeom_arc_bar()\n\n3.4.2 Reformatting data\ngauge data\nthis changed from original mutate_at\n\ngauge_data &lt;- plot_data |&gt;\n  dplyr::ungroup() |&gt;\n  dplyr::mutate(\n    ymin_1980 = c(rbind(\n      rep(0, length(countries)),\n      (dplyr::slice_head(plot_data, n = -1) |&gt;\n        dplyr::pull(ymax_1980))\n    ))\n  ) |&gt;\n  dplyr::mutate(\n    ymin_2010 = c(rbind(\n      rep(0, length(countries)),\n      (dplyr::slice_head(plot_data, n = -1) |&gt;\n        dplyr::pull(ymax_2010))\n    ))\n  ) |&gt;\n  dplyr::group_by(iso3c) |&gt;\n  dplyr::mutate(\n    dplyr::across(\n      dplyr::starts_with(\"y\", ignore.case = FALSE),\n      ~ scales::rescale(.,\n        to = pi * c(-0.5, 0.5),\n        from = 0:1\n      )\n    )\n  )"
  },
  {
    "objectID": "technology-adoption.html#initial-plots",
    "href": "technology-adoption.html#initial-plots",
    "title": "3  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n3.5 Initial plots",
    "text": "3.5 Initial plots\nbasic plot\n\nlibrary(ggplot2)\nbasic_plot &lt;- ggplot(data = gauge_data) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010,\n      fill = YN\n    )\n  ) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980,\n      fill = YN\n    )\n  ) +\n  facet_wrap(~iso3c, nrow = 2)\nbasic_plot\n\n\n\nFigure 3.1: Initial plot created using geom_arc_bar() from {ggforce}, facetted by different countries."
  },
  {
    "objectID": "technology-adoption.html#colors",
    "href": "technology-adoption.html#colors",
    "title": "3  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n3.6 Colors",
    "text": "3.6 Colors\n\nhighlight_col &lt;- \"#990c58\"\nsecond_col &lt;- \"#949398\"\nbg_col &lt;- \"#dedede\"\n\nadd new colors to basic plot\n\nbasic_plot &lt;- ggplot(data = gauge_data) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010,\n      fill = YN\n    ),\n    color = second_col\n  ) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980,\n      fill = YN\n    ),\n    color = second_col\n  ) +\n  facet_wrap(~iso3c, nrow = 2)\n\nadd scale fill\n\ncolor_plot &lt;- basic_plot +\n  scale_fill_manual(\n    breaks = c(\"value\", \"no_value\"),\n    labels = c(\"Immunised\", \"Not Immunised\"),\n    values = c(highlight_col, second_col)\n  )\ncolor_plot\n\n\n\nFigure 3.2: Edited version of the previous plot with colors changed from defaults to grey and dark pink."
  },
  {
    "objectID": "technology-adoption.html#text-and-fonts",
    "href": "technology-adoption.html#text-and-fonts",
    "title": "3  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n3.7 Text and fonts",
    "text": "3.7 Text and fonts\nAs we’ve seen in previous chapters, we can load in Google fonts using the {sysfonts} and {showtext} packages. Here, we’ll keep it clean and minimal by using the \"Ubuntu\" font for both the title and the body font.\n\nsysfonts::font_add_google(name = \"Ubuntu\", family = \"ubuntu\")\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font &lt;- \"ubuntu\"\n\nwrite text social to add\n\ntitle &lt;- \"Measles Vaccinations\"\nsubtitle &lt;- \"The inner bar represents the percentage of children who received a measles immunisation in 1980, whilst the outer bar represents the percentage in 2010. An increase in immunisation levels between 1980 and 2010 is seen across all countries.\\n\\nN. Rennie | Data: data.nber.org (10.3386/w15319)\"\n\nSince axis labels tend not to make too much sense for geom-arc_bar() plots, we’ll remove them later when using the theme functions. Instead, we can add our own labels using geom_text() to the end of the gauges. To make it easier, we can construct a small data.frame specifically for adding text labels. This includes the x, and y coordinates where the text should be positioned (you can read these of from the graph we already have since we haven’t yet deleted the axis label), as well as the label that should appear.\n\ntext_df &lt;- data.frame(\n  x = c(0.35, 0.85),\n  y = c(-0.1, -0.1),\n  label = c(1980, 2010)\n)\n\nWe can then add this to the existing plot by adding a layer with geom_text(), noting that we need to specify the data argument as using the text dataframe we just created. We also need to specify the font family and size directly within the geom_text() function, and can add the title and subtitle text created earlier using the labs() function from {ggplot2}.\n\ntext_plot &lt;- color_plot +\n  geom_text(\n    data = text_df,\n    mapping = aes(x = x, y = y, label = label),\n    family = body_font,\n    size = 3\n  ) +\n  labs(\n    title = title,\n    subtitle = subtitle\n  )\ntext_plot\n\n\n\nFigure 3.3: Previous plot with additional labels indicating the year on each gauge chart, as well as an added title and subtitle.\n\n\n\nYou’ll notice that the subtitle text runs off the page here. Let’s fix that using {ggplot2} themes and {ggtext} functions."
  },
  {
    "objectID": "technology-adoption.html#themes-and-styling",
    "href": "technology-adoption.html#themes-and-styling",
    "title": "3  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n3.8 Themes and styling",
    "text": "3.8 Themes and styling\nWe’ll start by removing all of the theme element such as the grey background, grid lines, axis labels. The easiest way to do this is using theme_void(). We can use the base_family argument of theme_void() to set the font family that will be used by default for any non-geom text elements that remain.\nYou may have noticed that the current gauge plots look a bit squashed and not exactly semi-circular. We can fix this by adding coord_fixed() which forces a 1:1 aspect ratio on the plot panel.\n\ntheme_plot1 &lt;- text_plot +\n  coord_fixed() +\n  theme_void(base_family = body_font)\ntheme_plot1\n\n\n\nFigure 3.4: Edited version of previous plot with fixed coordinate system to prevent squashing, and all theme elements removed.\n\n\n\nThis looks better but it’s still not great. What do we still need to improve with styling? The title text doesn’t stand out and blends in to easily with the subtitle, similarly for the facet text. Perhaps a bold font would help? The subtitle text doesn’t fit onto the page but we can fix that with the help of the hopefully now familiar element_textbox_simple() function from {ggtext} .\nbg col remove legend\nLet’s fix the first three of these issues.\n\nmain_plot &lt;- theme_plot1 +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    strip.text = element_text(\n      face = \"bold\", size = rel(1.2)\n    ),\n    plot.title = element_text(\n      margin = margin(t = 10, b = 10),\n      face = \"bold\",\n      size = rel(1.5)\n    ),\n    plot.subtitle = ggtext::element_textbox_simple(\n      maxwidth = 0.8,\n      lineheight = 0.5,\n      hjust = 0.5,\n    ),\n    plot.margin = margin(5, 5, 5, 5)\n  )\nmain_plot\n\n\n\nFigure 3.5: Further styling of gauge chart to change background color, prevent overlapping in the subtitle text, and increase the size of the title."
  },
  {
    "objectID": "technology-adoption.html#adding-a-better-legend",
    "href": "technology-adoption.html#adding-a-better-legend",
    "title": "3  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n3.9 Adding a better legend",
    "text": "3.9 Adding a better legend\nAs we already saw in chapter …,\n\nlegend_plot &lt;- ggplot(\n  data = dplyr::filter(gauge_data, iso3c == \"USA\")\n) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010,\n      fill = YN\n    ),\n    color = second_col\n  ) +\n  ggforce::geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980,\n      fill = YN\n    ),\n    color = second_col\n  ) +\n  geom_text(\n    data = text_df,\n    mapping = aes(x = x, y = y, label = label),\n    family = body_font, size = 6\n  ) +\n  facet_wrap(~iso3c) +\n  scale_fill_manual(\n    breaks = c(\"value\", \"no_value\"),\n    labels = c(\"Immunised\", \"Not Immunised\"),\n    values = c(highlight_col, second_col)\n  ) +\n  labs(title = \"How do I read this plot?\") +\n  coord_fixed() +\n  theme_void(base_family = body_font) +\n  theme(\n    legend.position = \"bottom\",\n    legend.title = element_blank(),\n    plot.background = element_rect(\n      fill = \"transparent\", color = \"transparent\"\n    ),\n    panel.background = element_rect(\n      fill = \"transparent\", color = \"transparent\"\n    ),\n    plot.title = element_text(\n      hjust = 0.5,\n      face = \"italic\",\n      margin = margin(t = 10, b = 10)\n    ),\n    plot.margin = margin(5, 5, 5, 5)\n  )\nlegend_plot\n\n\n\nFigure 3.6: Version of the gauge chart shown only for USA which will act as a legend."
  },
  {
    "objectID": "technology-adoption.html#combining-legend-with-patchwork",
    "href": "technology-adoption.html#combining-legend-with-patchwork",
    "title": "3  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n3.10 Combining legend with {patchwork}",
    "text": "3.10 Combining legend with {patchwork}\nJoin with {patchwork}\n\nlibrary(patchwork)\nfinal_plot &lt;- main_plot +\n  inset_element(legend_plot, 0.5, 0.9, 1.1, 1.4) &\n  theme(\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    )\n  )\nfinal_plot\n\n\n\nFigure 3.7: Final gauge chart with overlaid legend in top right corner.\n\n\n\nAs with previous examples, don’t be fooled into thinking that the size of the legend and it’s positioning within the main plot is something that happened perfectly this first. The values are often picked through a series of trial and error, and with practice you’ll get better at choosing starting values."
  },
  {
    "objectID": "technology-adoption.html#reflection",
    "href": "technology-adoption.html#reflection",
    "title": "3  Technology adoption: making gauge charts with {ggforce}",
    "section": "\n3.11 Reflection",
    "text": "3.11 Reflection\nAre gauge charts the most effective method of visualising this data? No. Gauge charts have their own problems, some of which you can see here. Since the ring representing 2010 is on the outside, the radius is larger, and therefore the area . If you measure the change on arc length between 1980 and 2010, you’ll get different answers to if you measured the proportional change in area for the two.\nWhat would I change?\n\n\n\n\nComin, D., and Hohijn B. 2004. “Cross-Country Technological Adoption: Making the Theories Face the Facts.” Journal of Monetary Economics January 2004: 39–83.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "4  References",
    "section": "",
    "text": "Comin, D., and Hohijn B. 2004. “Cross-Country Technological\nAdoption: Making the Theories Face the Facts.” Journal of\nMonetary Economics January 2004: 39–83.\n\n\nCommunity, R4DS Online Learning. 2023. “Tidy Tuesday: A Weekly\nSocial Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nPedersen, Thomas Lin. 2022. Ggforce: Accelerating ’Ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023.\nR for Data Science. O-Reilly. https://r4ds.hadley.nz."
  }
]