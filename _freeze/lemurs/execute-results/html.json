{
  "hash": "9dbc49ef8a7d7d1e2d0685c1e2568879",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfilters:\n  - line-highlight\nexecute: \n  freeze: auto\nfig-width: 5\nfig-asp: 0.67\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n# Lemurs: manipulating images with {magick} {#sec-lemurs}\n\nIn this chapter, we'll cover how to load and manipulate images in R using the {magick} package. We'll also look at how to combine images with plots using the {cowplot} package.\n\n## Data\n\nWe're going to be exploring data about lemurs from [Duke Lemur Center](https://lemur.duke.edu/) in this chapter [@lemurs_data]. The data ... \n\nThe data was used as a TidyTuesday dataset in August 2021, and so can be loaded into R using the `tt_load()` function from {tidytuesdayR} as we've done in previous chapters: \\index{tidytuesdayR!tt\\_load}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata <- tidytuesdayR::tt_load(\"2021-08-24\")\nlemurs <- tuesdata$lemurs\ntaxonomy <- tuesdata$taxonomy\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\nThe data \n\n## Exploratory work\n\n\n\n### Data exploration\n\nSome of the \n\n\\index{graphics!plot}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  lemurs$age_at_wt_mo,\n  lemurs$weight_g\n)\n```\n\n::: {.cell-output-display}\n![Scatter](lemurs_files/figure-html/fig-lemurs-scatter-1.png){#fig-lemurs-scatter}\n:::\n:::\n\n\n\n\n\n\n\\index{graphics!boxplot}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(\n  weight_g ~ taxon,\n  data = lemurs,\n  horizontal = TRUE,\n  cex.axis = 0.5,\n  cex.names = 0.5,\n  las = 1,\n  xlab = \"Weight\",\n  ylab = NULL\n)\n```\n\n::: {.cell-output-display}\n![Boxplot](lemurs_files/figure-html/fig-lemurs-boxplot-1.png){#fig-lemurs-boxplot}\n:::\n:::\n\n\n\n\n\n\n\n### Exploratory sketches\n\n![Initial sketch of ...](images/sketch-lemurs.png){#fig-lemurs-sketch fig-align=\"center\"}\n\n## Preparing a plot\n\nThe data is reasonably clean\n\n### Data wrangling\n\nView the `taxonomy` data\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreactable::reactable(taxonomy)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-57850ccfa15f844766f9\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-57850ccfa15f844766f9\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"taxon\":[\"CMED\",\"DMAD\",\"EALB\",\"ECOL\",\"ECOR\",\"EFLA\",\"EFUL\",\"EMAC\",\"EMON\",\"ERUB\",\"ERUF\",\"ESAN\",\"EUL\",\"GMOH\",\"HGG\",\"LCAT\",\"LTAR\",\"MMUR\",\"MZAZ\",\"NCOU\",\"NPYG\",\"OGG\",\"PCOQ\",\"PPOT\",\"VAR\",\"VRUB\",\"VVV\"],\"latin_name\":[\"Cheirogaleus medius\",\"Daubentonia madagascariensis\",\"Eulemur albifrons\",\"Eulemur collaris\",\"Eulemur coronatus\",\"Eulemur flavifrons\",\"Eulemur fulvus\",\"Eulemur macaco\",\"Eulemur mongoz\",\"Eulemur rubriventer\",\"Eulemur rufus\",\"Eulemur sanfordi\",\"Eulemur Eulemur\",\"Galago moholi\",\"Hapalemur griseus griseus\",\"Lemur catta\",\"Loris tardigradus\",\"Mircocebus murinus\",\"Mirza coquereli\",\"Nycticebus coucang\",\"Nycticebus pygmaeus\",\"Otolemur garnettii garnettii\",\"Propithecus coquereli\",\"Perodicticus potto\",\"Varecia Varecia\",\"Varecia rubra\",\"Varecia variegata variegata\"],\"common_name\":[\"Fat-tailed dwarf lemur\",\"Aye-aye\",\"White-fronted brown lemur\",\"Collared brown lemur\",\"Crowned lemur\",\"Blue-eyed black lemur\",\"Common brown lemur\",\"Black lemur\",\"Mongoose lemur\",\"Red-bellied lemur\",\"Red-fronted brown lemur\",\"Sanford's brown lemur\",\"hybrid\",\"Mohol bushbaby\",\"Eastern lesser bamboo lemur\",\"Ring-tailed lemur\",\"Slender loris\",\"Gray mouse lemur\",\"Northern giant mouse lemur\",\"Slow loris\",\"Pygmy slow loris\",\"Northern greater galago\",\"Coquerel's sifaka\",\"Potto\",\"hybrid\",\"Red ruffed lemur\",\"Black-and-white ruffed lemur\"]},\"columns\":[{\"id\":\"taxon\",\"name\":\"taxon\",\"type\":\"character\"},{\"id\":\"latin_name\",\"name\":\"latin_name\",\"type\":\"character\"},{\"id\":\"common_name\",\"name\":\"common_name\",\"type\":\"character\"}],\"dataKey\":\"dcf4058b01293d87a255ff375e14f98b\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n\n\n\n:::\n\n\\index{dplyr!filter}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvrub_lemurs <- lemurs |>\n  dplyr::filter(taxon == \"VRUB\")\n```\n:::\n\n\n\n\n\n\n### The first plot\n\n\\index{ggplot2!ggplot} \\index{ggplot2!aes} \\index{ggplot2!geom\\_point}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nbase_plot <- ggplot() +\n  geom_point(\n    data = vrub_lemurs,\n    mapping = aes(x = age_at_wt_mo, y = weight_g, color = sex)\n  )\nbase_plot\n```\n\n::: {.cell-output-display}\n![Basic scatter plot](lemurs_files/figure-html/fig-lemurs-base-plot-1.png){#fig-lemurs-base-plot}\n:::\n:::\n\n\n\n\n\n\nnote about assumptions - females heavier than males\n\n* make points smaller and add some transparency\n\n\\index{ggplot2!ggplot} \\index{ggplot2!aes} \\index{ggplot2!geom\\_point}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot <- ggplot() +\n  geom_point(\n    data = vrub_lemurs,\n    mapping = aes(x = age_at_wt_mo, y = weight_g, color = sex, shape = sex),\n    alpha = 0.6,\n    size = 0.8\n  )\nbase_plot\n```\n\n::: {.cell-output-display}\n![](lemurs_files/figure-html/unnamed-chunk-11-1.png)\n:::\n:::\n\n\n\n\n\n\n\n## Advanced styling\n\n### Colors\n\nref to blog post male femlae stereotypes\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbg_col <- \"#F5F5DC\"\ntext_col <- \"#4E2E12\"\nf_col <- \"#B13173\"\nm_col <- \"#21ADA8\"\n```\n:::\n\n\n\n\n\n\n\n\nWe'll use colored text in the subtitle to distinguish the two categories as we did in @sec-turbines, and so we don't need a legend added. We've previously removed the legend by setting `legend.position = \"none\"` inside the `theme()` function, but an alternative approach is to set `guide = \"none\"` inside `scale_color_manual()`. This is particularly useful if you only want to remove a subset of legends when you are mapping multiple variables to different aesthetics. \\index{ggplot2!scale\\_color\\_manual} \\index{ggplot2!theme}\n\nin this case we do want to \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_plot <- base_plot +\n  scale_color_manual(\n    values = c(\"F\" = f_col, \"M\" = m_col),\n    guide = \"none\"\n  ) +\n  scale_shape(guide = \"none\")\n```\n:::\n\n\n\n\n\n\n\n### Fonts and text\n\nRather than using a traditional legend for color and shape, we're going to include colored text in the subtitle. Here, we're also going to include some Unicode icons in the subtitle to identify how the circles and triangles map to the two categories. Unfortunately the {showtext} package, that we've been using to load the Font Awesome icon font and other Google fonts, doesn't play nicely with unicode icons. We'll look at an alternative font package: {systemfonts} [@systemfonts]. As mentioned in @sec-programming, the {systemfonts} package allows you to locate r load font files available on your local system. \n\nTo register a font using {systemfonts}, we use the `register_font()` function. It looks quite similarl to the `font_add()` function from {showtext} for loading local fonts - see @sec-turbines and @sec-cats to compare them. Let's load the Font Awesome Brand icons as we did in @sec-cats. \\index{systemfonts!register\\_font}\n\nThe first argument `name` will be the name that the font is known by in R. You can choose any name you want, but here we'll make sure to use the same name as we did for the `family` argument in @sec-cats, in order for our `social_caption()` to still work. The `plain` argument, is then the path to the font file. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystemfonts::register_font(\n  name = \"Font Awesome 6 Brands\",\n  plain = \"fonts/Font-Awesome-6-Brands-Regular-400.otf\"\n)\n```\n:::\n\n\n\n\n\n\n::: {#tip-lemurs-device .callout-tip}\n\n## Setting a graphics device\n\nTools -> \n\n`knitr::opts_chunk$set(dev = \"ragg_png\")`\n\n:::\n\nWe can also use `register_font()` from {systemfonts} to load the fonts we'll use for the title and body text of our plot. The difference here is that if, for example, we want to use fonts from Google Fonts, we first need to download the font files. \n\nFor the body font, we'll use *Lato*, a sans serif font designed by [≈Åukasz Dziedzic](http://www.latofonts.com/team/). The font files can be downloaded from [fonts.google.com/specimen/Lato](https://fonts.google.com/specimen/Lato) or [www.latofonts.com/lato-free-fonts](https://www.latofonts.com/lato-free-fonts/). For the title font, we'll use *Passion One* - a font specifically designed for large titles! It can be downloaded from [fonts.google.com/specimen/Passion+One](https://fonts.google.com/specimen/Passion+One). When you download these fonts, you'll see that you don't just download a single file, you actually download multiple files - one for each variation of the font that is available e.g. bold and italic. \n\nIn `register_font()`, you pass these different font files into the relevant argument e.g. passing the font file for the bold version into the `bold` argument. Note that not all fonts have every style available. Here, *Passion one* isn't available in italic so we simply don't pass anything into the `italic` argument when loading `Passion One`. If you're not going to use a particular font style (for example, if you know you won't write any text in bold when using Lato font) you don't need to load this style in with `register_font()`. However, it can be useful to have it available, just in case you change your mind!\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystemfonts::register_font(\n  name = \"Lato\",\n  plain = \"fonts/Lato/Lato-Regular.ttf\",\n  bold = \"fonts/Lato/Lato-Bold.ttf\",\n  italic = \"fonts/Lato/Lato-Italic.ttf\"\n)\nsystemfonts::register_font(\n  name = \"Passion One\",\n  plain = \"fonts/Passion_One/PassionOne-Regular.ttf\",\n  bold = \"fonts/Passion_One/PassionOne-Bold.ttf\"\n)\n\nbody_font <- \"Lato\"\ntitle_font <- \"Passion One\"\n```\n:::\n\n\n\n\n\n\ncan install on system and use ragg. may not have admin priviledges \n\nadd shapes in unicode (doesn't exactly match shape `&#x25B2;` - black triangle, really just means \"filled\" in triangle, rather than outlines white triangle)\n\n\\index{glue!glue}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle <- \"How much does a red ruffed lemur weigh?\"\nsubtitle <- glue::glue(\"At Duke Lemur Center, red ruffed lemurs live to an average of {round(mean(vrub_lemurs$age_at_death_y, na.rm = TRUE), 1)} years, and mature at about 2 years old. Although it may appear that, once fully-grown, <span style='color:{f_col}'>females &#x25CF;</span> tend to weigh more than <span style='color:{m_col}'>males &#x25B2;</span>, this chart does not account for pregnancy.\")\n```\n:::\n\n\n\n\n\n\n\\index{social\\_caption} \\index{source\\_caption}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsocial <- social_caption(\n  bg_color = bg_col,\n  icon_color = f_col,\n  font_color = text_col,\n  font_family = body_font\n)\ncap <- source_caption(\n  source = \"Duke Lemur Center\",\n  sep = \"<br>\",\n  graphic = social\n)\n```\n:::\n\n\n\n\n\n\n\\index{ggplot2!labs}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext_plot <- col_plot +\n  labs(\n    title = title,\n    subtitle = subtitle,\n    caption = cap,\n    x = \"Age (months)\", y = \"Weight (g)\"\n  )\ntext_plot\n```\n\n::: {.cell-output-display}\n![Plot](lemurs_files/figure-html/fig-lemurs-labels-1.png){#fig-lemurs-labels}\n:::\n:::\n\n\n\n\n\n\n### Adjusting scales and themes\n\nstill need to edit grid lines and axis text labels formatting colors\n\n\\index{ggplot2!theme\\_minimal} \\index{ggplot2!theme} \\index{ggplot2!element\\_rect} \\index{ggplot2!element\\_text} \n\\index{ggtext!element\\_textbox\\_simple}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_plot <- text_plot +\n  theme_minimal(base_size = 6, base_family = body_font) +\n  theme(\n    # background\n    plot.margin = margin(5, 5, 5, 5),\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    # text\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.title = element_text(\n      family = title_font,\n      size = rel(1.7),\n      color = text_col,\n      margin = margin(b = 5)\n    ),\n    plot.subtitle = ggtext::element_textbox_simple(\n      color = text_col\n    ),\n    plot.caption = ggtext::element_textbox_simple(\n      hjust = 0, halign = 0,\n      color = text_col\n    )\n  )\ntheme_plot\n```\n\n::: {.cell-output-display}\n![Plot](lemurs_files/figure-html/fig-lemurs-style-1-1.png){#fig-lemurs-style-1}\n:::\n:::\n\n\n\n\n\n\nWe're going to add the image to the right hand side of the plot. The approach we're taking requires us to make some blank space. Perhaps the simplest approach is to increase the size of the margin on the right hand side of the plot using the `plot.margin` argument in `theme()`: \\index{ggplot2!theme} \\index{ggplot2!margin}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_plot +\n  theme(\n    plot.margin = margin(5, 120, 5, 5)\n  )\n```\n\n::: {.cell-output-display}\n![Plot](lemurs_files/figure-html/fig-lemurs-margin-1-1.png){#fig-lemurs-margin-1}\n:::\n:::\n\n\n\n\n\n\nHowever, as you can see in @fig-lemurs-margin-1, this approach results in the title and subtitle text also being squashed to the left hand side of the plot as it doesn't extend into the margin. This may be desirable for some plots, but it doesn't work well here. Another approach is to use the `expand` argument in `scale_x_continuous()` to increase the amount of space at the right hand side of the x-axis. However, since this extends the axis, this results in grid lines being included in the additional space. We *could* play around with the breaks and axis text to remove the unwanted components, but there's an easier (slightly *hacky*) solution: add and edit a secondary y-axis. \n\nSecondary axes are almost always a poor choice of chart due to the fact that the choice of transformation for the secondary axis is entirely arbitrary but can hugely impact how the plot is interpreted. However, we're not actually going to use the secondary axis to present data, we're only going to use it to manipulate the layout of the plot background. To add some additional margin space on the right hand side, without squashing the title or adding grid lines in the margin, we can: \\index{ggplot2!scale\\_y\\_continuous} \\index{ggplot2!margin} \\index{ggplot2!dup\\_axis} \\index{ggplot2!sec\\_axis} \\index{ggplot2!element\\_text} \n\n* Duplicate the y-axis to create a secondary y-axis on the right hand side by setting `sec.axis = dup_axis()` inside `scale_y_continuous()`. The `sec_axis()` function could be used instead of `dup_axis()`, but there's no need to transform the axis in any way.\n* Add lots of margin space to the secondary axis labels by expand the right margin using `margin = margin(r = 150)` for the `axis.text.y.right` argument of `theme()`. \n* Then hide the secondary axis labels by making them the same color as the background through also setting `color = bg_col` for `axis.text.y.right`.\n\nWe also remove the title by setting `axis.title.y.right` to `element_blank()`. \\index{ggplot2!element\\_blank}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstyled_plot <- theme_plot +\n  scale_y_continuous(sec.axis = dup_axis()) +\n  theme(\n    axis.text.y.right = element_text(\n      margin = margin(r = 120),\n      color = bg_col\n    ),\n    axis.title.y.right = element_blank()\n  )\nstyled_plot\n```\n\n::: {.cell-output-display}\n![Plot](lemurs_files/figure-html/fig-lemurs-margin-2-1.png){#fig-lemurs-margin-2}\n:::\n:::\n\n\n\n\n\n\n## Working with images \n\nThough you might not often find instructions in data visualization books about working with images, there are many reasons why you may wish to overlay an image on top of a plot. Perhaps you need to add your company logo in the corner for more consistent branding. Or perhaps you're just looking for a way to make your plot more eye catching! \n\n### Reading and manipulating images with {magick} and {imager}\n\nThe {magick} package [@magick] provides bindings to the ImageMagick image processing library, which allows you to manipulate images through rotating, scaling, cropping, or blurring them (to name just a few!). It supports multiple different image formats including png, jpeg, and pdf.\n\nThe {magick} package is not the only R package that enables you to process and manipulate images. A popular alternative is the {imager} package [@imager] which is based on CImg, a C++ library by David Tschumperl√©. Both packages have their strengths, and it‚Äôs easy to use both at the same time via the `cimg2magick()` and `magick2cimg()` conversion functions in {imager}. There are some operations that are easier in {imager}, and some that are easier in {magick}. In this chapter, we‚Äôre going to use both packages together to demonstrate how easy it is.\n\n::: {#tip-lemurs-unsplash .callout-tip}\n\n## Finding images for reuse\n\nWhen you're adding a logo to your plot, it's (reasonably) easy to know which image to use and where to find it. If you don't already have the image you want to overlay, you also need to know how and where to find it. \n\nIf you add images to plots that you don't own, make sure you have permission to re-use the image and check that the license file allows you to. Site such as Unsplash ([unsplash.com](https://unsplash.com/)), Wikimedia Commons ([commons.wikimedia.org](https://commons.wikimedia.org/)), or Pixabay ([pixabay.com](https://pixabay.com/)) can be good places to find images that are free to re-use.\n\n:::\n\nFor this visualization, we're going to use a photograph of a red ruffed lemur from [Unsplash](https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k) taken by [Jax](https://unsplash.com/@lysrix) [@img_jax].\n\nWe're going to start with the {imager} package and use it to read the image into R with the `load.image()` function. If you were using {magick} to start with, you would use the `image_read()` function instead. \\index{imager!load.image} \\index{magick!image\\_read}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlemur_img <- imager::load.image(\"images/lemur.jpg\")\nplot(lemur_img)\n```\n\n::: {.cell-output-display}\n![Test](lemurs_files/figure-html/fig-lemurs-imager-read-1.png){#fig-lemurs-imager-read}\n:::\n:::\n\n\n\n\n\n\ncrop out bit on left\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npx <- imager::Xc(lemur_img) <= 200\nlemur_img[px] <- 0\npx <- imager::Xc(lemur_img) <= 275 & imager::Yc(lemur_img) >= 320\nlemur_img[px] <- 0\n```\n:::\n\n\n\n\n\n\nwhen print image draws on traditional grid\nbackground needs removing so draw an outline\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndetect_outline <- imager::px.flood(\n  im = lemur_img,\n  x = 420,\n  y = 200,\n  sigma = 0.5,\n  high_connexity = T\n)\nplot(lemur_img)\nimager::highlight(detect_outline)\n```\n\n::: {.cell-output-display}\n![Test](lemurs_files/figure-html/figlemurs-img-outline-1.png)\n:::\n:::\n\n\n\n\n\n\nthen remove\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlemur_img[detect_outline] <- 0\nlemur_nobg <- imager::cimg2magick(lemur_img) |>\n  magick::image_flop() |>\n  magick::image_transparent(\"black\")\nlemur_nobg\n```\n\n::: {.cell-output-display}\n![Test](lemurs_files/figure-html/fig-lemurs-img-rmbg-1.png){#fig-lemurs-img-rmbg width=205}\n:::\n:::\n\n\n\n\n\n\nnot perfect as also remove white collar\n\nWhen you print the image with {magick}, it returns the image itself to the plot window, but also returns output to the console with information about the image dimensions, format, and file size. \n\n### Adding images to plots with {cowplot}\n\nBefore we go ahead with adding the image to the scatter plot, let's first update the caption to add an attribution for the image, in addition to the attributions for the data and graphic. We can use `paste0()` to join together the output from the `source_caption()` function we were already using for the caption, with some additional styled text. You'll see that this new text is similar to the text described in @sec-turbines, with `<br>` adding a new and `**` used to style the word `Image` in bold text. We can then override the existing caption in the `labs()` function. \\index{base!paste0} \\index{source\\_caption}  \\index{ggplot2!labs}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncap <- paste0(\n  source_caption(\n    source = \"Duke Lemur Center\",\n    sep = \"<br>\",\n    graphic = social\n  ),\n  \"<br>**Image**: Jax (Unsplash: @lysrix)\"\n)\nstyled_plot <- styled_plot +\n  labs(caption = cap)\n```\n:::\n\n\n\n\n\n\nThe {cowplot} package [@cowplot]\n\n::: {#tip-lemurs-arrange .callout-tip}\n\n## R packages for combining plots\n\nThere are several other R packages available for arranging different elements together e.g. combining multiple plots or adding images to plots. The most common for arranging charts is the {patchwork} package [@patchwork] which we'll use this in @sec-time-zones and @sec-house. The {egg} package is also ... . \n\n:::\n\nWe start by using the `ggdraw()` function from {cowplot} which sets up a layer on top of our `styled_plot` {ggplot2} plot to allow us to draw on top of it. \\index{cowplot!ggdraw}\n\n\\index{cowplot!draw\\_image} \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_plot <- cowplot::ggdraw(styled_plot) +\n  cowplot::draw_image(\n    lemur_nobg,\n    x = 1, y = 0,\n    hjust = 1, halign = 1,\n    vjust = 0, valign = 0,\n    width = 0.4\n  )\nfinal_plot\n```\n\n::: {.cell-output-display}\n![Plot](lemurs_files/figure-html/fig-lemurs-img-plot-1.png){#fig-lemurs-img-plot}\n:::\n:::\n\n\n\n\n\n\nyou might see warnings about fonts. as long as the fonts are appear as you expect on the chart, you can ignore them\n\n::: {#tip-lemurs-imgs .callout-tip}\n\n## Other approaches for adding images to {ggplot2} plots\n\nadd tip for ggimage\n\n:::\n\n## Reflection\n",
    "supporting": [
      "lemurs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"site_libs/react-18.2.0/react.min.js\"></script>\n<script src=\"site_libs/react-18.2.0/react-dom.min.js\"></script>\n<script src=\"site_libs/reactwidget-2.0.0/react-tools.js\"></script>\n<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/reactable-0.4.4/reactable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/reactable-binding-0.4.4/reactable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}