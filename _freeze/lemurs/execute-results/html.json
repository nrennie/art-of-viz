{
  "hash": "ff17482743bfe1e6ac99d5faae0299a1",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfilters:\n  - line-highlight\nexecute: \n  freeze: auto\nfig-asp: 0.67\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n# Lemurs: manipulating images in R {#sec-lemurs}\n\nIn this chapter, we'll cover how to load and manipulate images in R using the {magick} and {imager} packages. We'll also look at how to combine images with plots using the {cowplot} package.\n\n**Packages required in this chapter**:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cowplot)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggtext)\nlibrary(glue)\nlibrary(imager)\nlibrary(magick)\nlibrary(systemfonts)\nlibrary(tidytuesdayR)\n```\n:::\n\n\n\n\n\n\n## Data\n\nWe're going to be exploring data about lemurs from [Duke Lemur Center](https://lemur.duke.edu/) in this chapter [@lemurs_data]. Duke Lemur Center houses hundreds of lemurs across many different species, and collect data on their lemur residents to better understand the factors that effect lemur health, reproduction, and social interaction. The data was used as a TidyTuesday dataset in August 2021 (after being suggested and cleaned by [Jesse Mostipak](https://github.com/kierisi)), and so can be loaded into R using the `tt_load()` function from {tidytuesdayR} as we've done in previous chapters: \\index{tidytuesdayR!tt\\_load}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata <- tt_load(\"2021-08-24\")\nlemurs <- tuesdata$lemurs\ntaxonomy <- tuesdata$taxonomy\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\nThe `lemurs` data contains information on individual lemurs, and is the data set we'll mainly focus on in this chapter. The data has 82609 rows and 54 columns, making it a reasonably large dataset. The first few rows can be inspected with `head()`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(lemurs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 54\n  taxon dlc_id hybrid sex   name  current_resident stud_book\n  <chr> <chr>  <chr>  <chr> <chr> <chr>            <chr>    \n1 OGG   0005   N      M     KANGA N                <NA>     \n2 OGG   0005   N      M     KANGA N                <NA>     \n3 OGG   0006   N      F     ROO   N                <NA>     \n4 OGG   0006   N      F     ROO   N                <NA>     \n5 OGG   0009   N      M     POOH… N                <NA>     \n6 OGG   0009   N      M     POOH… N                <NA>     \n# ℹ 47 more variables: dob <date>, birth_month <dbl>,\n#   estimated_dob <chr>, birth_type <chr>,\n#   birth_institution <chr>, litter_size <dbl>,\n#   expected_gestation <dbl>, estimated_concep <date>,\n#   concep_month <dbl>, dam_id <chr>, dam_name <chr>,\n#   dam_taxon <chr>, dam_dob <date>,\n#   dam_age_at_concep_y <dbl>, sire_id <chr>, …\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThe columns give information on the `taxon` code identifying the species of lemur, the name and sex of the lemur, the lemurs parents, whether they are still alive, the lemurs age and weight, and many other variables. Many of the columns give duplicated information since they express the same data in different units e.g. the lemur's age is given in five different columns: in days, weeks, months, decimal months, and years.\n\nThough there are 82609 rows of data, this doesn't mean that there are data on 82609 lemurs. Each lemur has multiple rows of data associated with it, each corresponding to a date (i.e. different age and associated weight measurements). There are many missing values across the data since not all columns are relevant for all lemurs e.g. if a lemur is still alive, there will be no `age_at_death_y` value. This also means that if we wanted to process the missing data, we'd likely need to start with rule-based approach to decide which values should be *missing* and which ones are unexpectedly missing. \n\nThe `taxonomy` data is essentially a look up table for the `taxon` column in the `lemurs` data. For each `taxon` code, the `taxonomy` data provides the Latin name (`latin_name`) for the species, as well as the common name (`common_name`). If desired, the two datasets could be joined using the `taxon` column.\n\n## Exploratory work\n\nGiven the size of the data and the diversity of the variables included, there are many aspects of it that we may wish to explore further. We could use the parental information to [construct a family tree of lemurs](https://raw.githubusercontent.com/nrennie/data-viz-projects/refs/heads/main/Lemur%20Family%20Tree/images/lemur-family-tree.png). We could compare the range of weights and ages across different species of lemurs. We could look at the *normal* growth curve for lemurs to identify which ones are outside of a normal weight range for their age. There are almost endless options!\n\n### Data exploration\n\nLet's focus in on the growth curve idea, and look at the relationship between lemur age and weight. We can use the base R `plot()` function to create @fig-lemurs-scatter, showing the relationship between age in months and weight in grams. As we might expect with a data set containing 82609 data points, the scatter plot doesn't clearly show any real pattern as there's too much variability and many of the points overlap. \\index{graphics!plot}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  x = lemurs$age_at_wt_mo,\n  y = lemurs$weight_g,\n  xlab = \"Weight (g)\",\n  ylab = \"Age (months)\"\n)\n```\n\n::: {.cell-output-display}\n![Scatter plot showing the relationship between weight and age pf lemurs. There are many data points on the plot, making it difficult to see any pattern.](lemurs_files/figure-html/fig-lemurs-scatter-1.png){#fig-lemurs-scatter}\n:::\n:::\n\n\n\n\n\n\nWe know that there are 27 species of lemur in the data, and, even if you don't know much about lemurs, you might expect that the weights vary by species. A quick box plot of weights by species using the `boxplot()` function in R confirms this, with @fig-lemurs-boxplot showing that there are big differences in lemur weights between species. \\index{graphics!boxplot}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(\n  weight_g ~ taxon,\n  data = lemurs,\n  horizontal = TRUE,\n  las = 1,\n  xlab = \"Weight\",\n  ylab = NULL\n)\n```\n\n::: {.cell-output-display}\n![Horizontal boxplots showing the range of weights observed for each species of lemur recorded in the data showing significant variability between and within species.](lemurs_files/figure-html/fig-lemurs-boxplot-1.png){#fig-lemurs-boxplot}\n:::\n:::\n\n\n\n\n\n\n### Exploratory sketches\n\nGiven the variability in weights between species, we may wish to focus in on a single species. Let's keep the chart reasonably simply and create a scatter plot of how lemur weights change with age - essentially recreating @fig-lemurs-scatter for a single species and working to make it much more professional looking. Since there are many different species of lemur and they are not all easily recognizable just by their common name, we'll add an image of the lemur species in the bottom right corner to add more context to the chart.\n\n![Initial sketch of a scatter plot showing the relationship between age and weight, with space allocated for an image and lines indiating where title and subtitle text will go.](images/sketch-lemurs.png){#fig-lemurs-sketch fig-align=\"center\" fig-alt=\"\"}\n\n## Preparing a plot\n\nThe data is already reasonably clean, especially for the simple scatter plot that we're aiming to create based on @fig-lemurs-sketch, so there's a limited amount of data wrangling required.\n\n### Data wrangling\n\nWe want to subset the data to consider only one species of lemur. Unless you're an expert in lemurs, you probably don't know which taxonomy codes in the `lemurs` data relate to which species of lemur. We could join the `taxonomy` data to the `lemurs` data and then filter the data based on the joined `common_name` column. However, since the future data processing is so minimal, we could just browse through the `taxonomy` data, choose a species of lemur from the `common_name` column, and look up the relevant taxonomy code. \n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-967702bd828c79d00b4b\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-967702bd828c79d00b4b\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"taxon\":[\"CMED\",\"DMAD\",\"EALB\",\"ECOL\",\"ECOR\",\"EFLA\",\"EFUL\",\"EMAC\",\"EMON\",\"ERUB\",\"ERUF\",\"ESAN\",\"EUL\",\"GMOH\",\"HGG\",\"LCAT\",\"LTAR\",\"MMUR\",\"MZAZ\",\"NCOU\",\"NPYG\",\"OGG\",\"PCOQ\",\"PPOT\",\"VAR\",\"VRUB\",\"VVV\"],\"latin_name\":[\"Cheirogaleus medius\",\"Daubentonia madagascariensis\",\"Eulemur albifrons\",\"Eulemur collaris\",\"Eulemur coronatus\",\"Eulemur flavifrons\",\"Eulemur fulvus\",\"Eulemur macaco\",\"Eulemur mongoz\",\"Eulemur rubriventer\",\"Eulemur rufus\",\"Eulemur sanfordi\",\"Eulemur Eulemur\",\"Galago moholi\",\"Hapalemur griseus griseus\",\"Lemur catta\",\"Loris tardigradus\",\"Mircocebus murinus\",\"Mirza coquereli\",\"Nycticebus coucang\",\"Nycticebus pygmaeus\",\"Otolemur garnettii garnettii\",\"Propithecus coquereli\",\"Perodicticus potto\",\"Varecia Varecia\",\"Varecia rubra\",\"Varecia variegata variegata\"],\"common_name\":[\"Fat-tailed dwarf lemur\",\"Aye-aye\",\"White-fronted brown lemur\",\"Collared brown lemur\",\"Crowned lemur\",\"Blue-eyed black lemur\",\"Common brown lemur\",\"Black lemur\",\"Mongoose lemur\",\"Red-bellied lemur\",\"Red-fronted brown lemur\",\"Sanford's brown lemur\",\"hybrid\",\"Mohol bushbaby\",\"Eastern lesser bamboo lemur\",\"Ring-tailed lemur\",\"Slender loris\",\"Gray mouse lemur\",\"Northern giant mouse lemur\",\"Slow loris\",\"Pygmy slow loris\",\"Northern greater galago\",\"Coquerel's sifaka\",\"Potto\",\"hybrid\",\"Red ruffed lemur\",\"Black-and-white ruffed lemur\"]},\"columns\":[{\"id\":\"taxon\",\"name\":\"taxon\",\"type\":\"character\"},{\"id\":\"latin_name\",\"name\":\"latin_name\",\"type\":\"character\"},{\"id\":\"common_name\",\"name\":\"common_name\",\"type\":\"character\"}],\"dataKey\":\"dcf4058b01293d87a255ff375e14f98b\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n\n\n:::\n\nThere are 27 species of lemurs included in the data, and for the rest of the chapter we'll focus in on *red ruffed lemurs*. Red ruffed lemurs have the taxonomy code `VRUB`. We use the `filter()` function from {dplyr} to retain only the rows of data with `\"VRUB\"` in the `taxon` column: \\index{dplyr!filter}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvrub_lemurs <- lemurs |>\n  filter(taxon == \"VRUB\")\n```\n:::\n\n\n\n\n\n\nThis is definitely the easiest data wrangling process in this book, and we're ready to move on to creating the first draft of our plot!\n\n### The first plot\n\nStarting with the `ggplot()` function, we pass in the subset of our data on red ruffed lemurs, and set the age (`age_at_wt_mo`) as the default variable on the x-axis and with the weight (`weight_g`) on the y-axis. We also use color to differentiate the `sex` of the lemurs. The scatter plot is then created by adding the `geom_point()` layer. \\index{ggplot2!ggplot} \\index{ggplot2!aes} \\index{ggplot2!geom\\_point}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbasic_plot <- ggplot() +\n  geom_point(\n    data = vrub_lemurs,\n    mapping = aes(\n      x = age_at_wt_mo,\n      y = weight_g,\n      color = sex\n    )\n  )\nbasic_plot\n```\n\n::: {.cell-output-display}\n![Scatter plot of how the weights of red ruffed lemurs change with age, with male lemurs indicated by turquoise circles and females by orange circles. The circles are too large and many of them are overlapping.](lemurs_files/figure-html/fig-lemurs-base-plot-1.png){#fig-lemurs-base-plot}\n:::\n:::\n\n\n\n\n\n\nEven though the data shown in @fig-lemurs-base-plot is a subset of the full data, it still contains 4166 observations. This means that many of the points in @fig-lemurs-base-plot overlap, and it's difficult to see how many points are actually in a specific area. Let's edit the initial plot code. We can make the points slightly smaller by changing the `size` in `geom_point()`. We also make the points semi-transparent by setting `alpha = 0.6`. This is a useful technique when data points can overlap since areas of the chart with many points will appear darker, when the semi-transparent points are layered on top of each other. Since relying on color alone for visually identifying groups of data is not a good approach in terms of accessibility, we also map the `shape` of the points to the `sex` of the lemur. \\index{ggplot2!ggplot} \\index{ggplot2!aes} \\index{ggplot2!geom\\_point}\n\n\n\n\n\n\n::: {.cell source-line-numbers='8,10,11'}\n\n```{.r .cell-code}\nbasic_plot <- ggplot() +\n  geom_point(\n    data = vrub_lemurs,\n    mapping = aes(\n      x = age_at_wt_mo,\n      y = weight_g,\n      color = sex,\n      shape = sex\n    ),\n    alpha = 0.6,\n    size = 0.8\n  )\nbasic_plot\n```\n\n::: {.cell-output-display}\n![Scatter plot of how the weights of red ruffed lemurs change with age, with male lemurs indicated by turquoise triangles and females by orange circles. Both shapes are slightly transparent.](lemurs_files/figure-html/fig-lemurs-base-plot-2-1.png){#fig-lemurs-base-plot-2}\n:::\n:::\n\n\n\n\n\n\n## Advanced styling\n\nNow it's time to style and edit the plot to make it more aesthetically pleasing, accessible, and informative. \n\n### Colors\n\nFor the plot background and text, we'll choose colors that might be found on a red ruffed lemur such as a light beige (`bg_col`) and warm brown (`text_col`). We also need to select two colors to represent the male and female lemurs. When choosing colors for categories, it's important to choose colors that neither reinforce negative stereotypes nor contradict intuitive color choices. When choosing colors to represent gender or sex, it's very common to see the stereotypical blue for boys, and pink for girls. We don't want to reinforce the negative associations for different genders that these colors can have. Equally, we don't want to make it confusing by choosing the opposite e.g. blue for girls and pink for boys. Instead, we'll choose a purple for female lemurs (`f_col`) and turquoise for male lemurs (`m_col`). This is not an uncommon color combinations for representing gender, and other good options are discussed in Lisa Muth's blog post *An Alternative to Pink & Blue: Colors for Gender Data* [@Muth2018]. \\index{color}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbg_col <- \"#F5F5DC\"\ntext_col <- \"#4E2E12\"\nf_col <- \"#A053A1\"\nm_col <- \"#21ADA8\"\n```\n:::\n\n\n\n\n\n\nThe colors for male and female lemurs can then be applied to the plot using `scale_color_manual()` where we explicitly map the color variables to the values in the data by naming the vector elements passed into `values`. We could create these color variables as a named vector as we did in @sec-turbines, but since we want the labels to be different than the data values (e.g. `females` instead of `F`) it's a similar amount of work to simply pass them in as variables - especially for only two categories. \\index{ggplot2!scale\\_color\\_manual}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_plot <- basic_plot +\n  scale_color_manual(\n    values = c(\"F\" = f_col, \"M\" = m_col)\n  )\n```\n:::\n\n\n\n\n\n\nWe'll use colored text and icons in the subtitle to distinguish the two categories as we did in @sec-turbines, and so we'll remove the legend by setting `legend.position = \"none\"` inside the `theme()` function a little bit later. Here, we technically have two legends in one - one for color, and one for shape. If we only wanted to remove one part of the legend e.g. color, we could set `guide = \"none\"` inside `scale_color_manual()`. This would result in a legend for shape only with the shapes shown in black by default. \\index{ggplot2!scale\\_color\\_manual} \\index{ggplot2!theme}\n\n### Working with {systemfonts}\n\nRather than using a traditional legend for color and shape, we're going to include colored text in the subtitle. Here, we're also going to include some Unicode icons in the subtitle to identify how the circles and triangles map to the two categories. Unfortunately the {showtext} package, that we've been using to load the Font Awesome icon font and other Google fonts, doesn't always play nicely with Unicode icons. We'll look at an alternative font package: {systemfonts} [@systemfonts]. As mentioned in @sec-programming, the {systemfonts} package allows you to locate or load font files available on your local system. \n\nTo register a font using {systemfonts}, we use the `register_font()` function. It looks quite similar to the `font_add()` function from {showtext} for loading local fonts - see @sec-turbines and @sec-cats to compare them. Let's load the Font Awesome Brand icons using {systemfonts} as an alternative approach to the one taken in @sec-cats. \\index{systemfonts!register\\_font}\n\nThe first argument `name` will be the name that the font is known by in R. You can choose any name you want, but here we'll make sure to use the same name as we did for the `family` argument in @sec-cats, in order for our `social_caption()` function to still work. The `plain` argument is the the path to the font file. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregister_font(\n  name = \"Font Awesome 6 Brands\",\n  plain = \"fonts/Font-Awesome-6-Brands-Regular-400.otf\"\n)\n```\n:::\n\n\n\n\n\n\n::: {#tip-lemurs-device .callout-tip}\n\n## Setting a graphics device\n\nIn R, a graphics device is the system that is used to render visual outputs (including plots). The graphics device used will vary depending on what operating system you are using and what type of output format you want to create e.g. png or pdf. The {ragg} package [@ragg] provides graphic devices for R based on the AGG library. \\index{graphics device} \\index{ragg}\n\nIt's recommended to use {ragg} for graphics in RStudio because it makes working with fonts easier and provides higher quality images. If you use a different graphics device, the icons or fonts loaded with {systemfonts} may not appear correctly. To use {ragg} for the graphics devices in RStudio, go to `Tools -> Global Options -> General -> Graphics -> Backend` and select `AGG`.  In R Markdown or Quarto documents, you can add a set up chunk at the top to use ragg which includes `knitr::opts_chunk$set(dev = \"ragg_png\")`, or your device of choice. \\index{RStudio}\n\n:::\n\nWe can also use `register_font()` from {systemfonts} to load the fonts we'll use for the title and body text of our plot. The difference here is that if, for example, we want to use fonts from Google Fonts, we first need to download the font files. \\index{systemfonts!register\\_font}\n\nFor the body font, we'll use *Lato*, a sans serif font designed by [Łukasz Dziedzic](http://www.latofonts.com/team/). The font files can be downloaded from [fonts.google.com/specimen/Lato](https://fonts.google.com/specimen/Lato) or [www.latofonts.com/lato-free-fonts](https://www.latofonts.com/lato-free-fonts/). For the title font, we'll use *Passion One* - a font specifically designed for large titles! It can be downloaded from [fonts.google.com/specimen/Passion+One](https://fonts.google.com/specimen/Passion+One). When you download these fonts, you'll see that you don't just download a single file, you actually download multiple files - one for each variation of the font that is available e.g. bold and italic. \n\nIn `register_font()`, you pass these different font files into the relevant argument e.g. passing the font file for the bold version into the `bold` argument. Note that not all fonts have every style available. Here, *Passion One* isn't available in italic so we simply don't pass anything into the `italic` argument when loading `Passion One`. If you're not going to use a particular font style (for example, if you know you won't write any text in bold when using Lato font) you don't need to load this style in with `register_font()`. However, it can be useful to have it available, just in case you change your mind!\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregister_font(\n  name = \"Lato\",\n  plain = \"fonts/Lato/Lato-Regular.ttf\",\n  bold = \"fonts/Lato/Lato-Bold.ttf\",\n  italic = \"fonts/Lato/Lato-Italic.ttf\"\n)\nregister_font(\n  name = \"Passion One\",\n  plain = \"fonts/Passion_One/PassionOne-Regular.ttf\",\n  bold = \"fonts/Passion_One/PassionOne-Bold.ttf\"\n)\n```\n:::\n\n\n\n\n\n\nWe then define variables with the name of the title and body fonts:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbody_font <- \"Lato\"\ntitle_font <- \"Passion One\"\n```\n:::\n\n\n\n\n\n\nAn alternative to using `register_font()` is to install the font on your system, by right clicking on the downloaded font file and selecting *Install*. Then {ragg} should be able to find the font automatically. However, there may be reasons why you can't or don't want to prefer install a font system wide. Using `register_font()` in a script also leaves a record of how the fonts were installed, rather than relying on other processes happening outside of R.\n\n### Adding text\n\nThe title for the plot can be defined as a simple character string, which asks the reader a question and encourages them to engage with the plot. To write the subtitle text we'll use the `glue()` function from {glue} to do two things: \\index{glue!glue}\n\n* Add colored text in the subtitle, as we did in @sec-cats. \n* Create data-driven text, as we did in @sec-programming.\n\nWe'll also use Unicode characters (for triangles and circles) in the subtitle to substitute the shape legend. Though the Unicode characters are not exactly identical to the shapes plotted on our chart, in the way that the colors are, the shapes are similar enough for this approach to work. The `&#x25B2;` string adds a black triangle, and the `&#x25CF` string adds a black circle. Though these define *black* shapes, they will appear in the color we desire. Here, *black* triangle really just means *filled in* triangle (with *white* triangle meaning *outline only* triangle). \\index{glue!glue} \\index{Unicode}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle <- \"How much does a red ruffed lemur weigh?\"\nsubtitle <- glue(\"At Duke Lemur Center, red ruffed lemurs live to an average of {round(mean(vrub_lemurs$age_at_death_y, na.rm = TRUE), 1)} years, and mature at about 2 years old. Although it may appear that, once fully-grown, <span style='color:{f_col}'>females &#x25CF;</span> tend to weigh more than <span style='color:{m_col}'>males &#x25B2;</span>, this chart does not account for pregnancy.\")\n```\n:::\n\n\n\n\n\n\nWe'll use the `social_caption()` function defined in @sec-cats, to create a caption that includes Font Awesome icons for social media (using the colors we defined earlier). We then use the social media caption in the `source_caption()` function from @sec-turbines, and also pass in Duke Lemur Center and the data publication as the source of the data. \\index{social\\_caption} \\index{source\\_caption}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsocial <- social_caption(\n  icon_color = f_col,\n  font_color = text_col,\n  font_family = body_font\n)\ncap <- source_caption(\n  source = \"Duke Lemur Center (Zehr et al. 2014)\",\n  sep = \"<br>\",\n  graphic = social\n)\n```\n:::\n\n\n\n\n\n\nThe title, subtitle, and caption text can then be added to the plot using the `labs()` function, along with x- and y- axis labels showing the variables and units they are recorded in. \\index{ggplot2!labs}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext_plot <- col_plot +\n  labs(\n    title = title,\n    subtitle = subtitle,\n    caption = cap,\n    x = \"Age (months)\", y = \"Weight (g)\"\n  )\ntext_plot\n```\n\n::: {.cell-output-display}\n![Scatter plot of how the weights of red ruffed lemurs change with age, with male lemurs indicated by turquoise triangles and females by purple circles. The subtitle text runs off the page, and the caption is incorrectly formatted as raw HTML text.](lemurs_files/figure-html/fig-lemurs-labels-1.png){#fig-lemurs-labels}\n:::\n:::\n\n\n\n\n\n\n### Adjusting themes\n\nNow we need to add some final styling to implement the background and text colors, as well as making sure the raw HTML code is processed correctly. \n\nWe start with `theme_minimal()` as a base, which keeps the grid lines and axes but removes the grey background and dark axis ticks. We also set the base font size as size `6` and use our previously defined `body_font` variable as the base font family. We can then make a few further adjustments using `theme()`, where we remove the legend by setting `legend.position = \"none\"`, add a margin around the edge of the plot, and apply the selected background color using `element_rect()`. \\index{ggplot2!theme\\_minimal} \\index{ggplot2!theme}  \\index{ggplot2!element\\_rect}\n\nSetting `plot.title.position` and `plot.caption.position` to `\"plot\"` aligns the title, subtitle, and caption with outside of the entire plot rather than the panel with the scatter plot - giving a cleaner, more balanced look. The title text is further adjusted with `element_text()` to use the `title_font` family, increase it in size, change the color, and add a little bit more space at the bottom of it. As described in @sec-programming and @sec-cats, we use `element_textbox_simple()` from {ggtext} for the plot subtitle and caption to force the long text to wrap onto multiple lines, and to correctly process the HTML code in the caption. \\index{ggtext!element\\_textbox\\_simple} \\index{ggplot2!element\\_text} \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_plot <- text_plot +\n  theme_minimal(base_size = 6, base_family = body_font) +\n  theme(\n    # legend\n    legend.position = \"none\",\n    # background\n    plot.margin = margin(5, 5, 5, 5),\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    # text\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.title = element_text(\n      family = title_font,\n      size = rel(1.7),\n      color = text_col,\n      margin = margin(b = 5)\n    ),\n    plot.subtitle = element_textbox_simple(\n      color = text_col\n    ),\n    plot.caption = element_textbox_simple(\n      hjust = 0, halign = 0,\n      color = text_col\n    )\n  )\ntheme_plot\n```\n\n::: {.cell-output-display}\n![Scatter plot of how the weights of red ruffed lemurs change with age, with the plot now having a beige background, subtitle text correctly wrapped, and attribution of data and graphic in the caption.](lemurs_files/figure-html/fig-lemurs-style-1-1.png){#fig-lemurs-style-1}\n:::\n:::\n\n\n\n\n\n\nWe're going to add the image to the right hand side of the plot. The approach we're taking requires us to make some blank space. Perhaps the simplest approach is to increase the size of the margin on the right hand side of the plot using the `plot.margin` argument in `theme()`: \\index{ggplot2!theme} \\index{ggplot2!margin}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_plot +\n  theme(\n    plot.margin = margin(5, 90, 5, 5)\n  )\n```\n\n::: {.cell-output-display}\n![Scatter plot of how the weights of red ruffed lemurs change with age, with additional space left blank on the right hand side of the plot and subtitle text.](lemurs_files/figure-html/fig-lemurs-margin-1-1.png){#fig-lemurs-margin-1}\n:::\n:::\n\n\n\n\n\n\nHowever, as you can see in @fig-lemurs-margin-1, this approach results in the title and subtitle text also being squashed to the left hand side of the plot as it doesn't extend into the margin. This may be desirable for some plots, but it doesn't work well here. Another approach is to use the `expand` argument in `scale_x_continuous()` to increase the amount of space at the right hand side of the x-axis. However, since this extends the axis, this results in grid lines being included in the additional space. We *could* play around with the breaks and axis text to remove the unwanted components, but there's an easier (slightly *hacky*) solution: add and edit a secondary y-axis. \\index{secondary axes}\n\nSecondary axes are almost always a poor choice of chart due to the fact that the choice of transformation for the secondary axis is entirely arbitrary but can hugely impact how the plot is interpreted. However, we're not actually going to use the secondary axis to present data, we're only going to use it to manipulate the layout of the plot background. To add some additional margin space on the right hand side, without squashing the title or adding grid lines in the margin, we can: \\index{ggplot2!scale\\_y\\_continuous} \\index{ggplot2!margin} \\index{ggplot2!dup\\_axis} \\index{ggplot2!sec\\_axis} \\index{ggplot2!element\\_text} \n\n* Duplicate the y-axis to create a secondary y-axis on the right hand side by setting `sec.axis = dup_axis()` inside `scale_y_continuous()`. The `sec_axis()` function could be used instead of `dup_axis()`, but there's no need to transform the axis in any way.\n* Add lots of margin space to the secondary axis labels by expand the right margin using `margin = margin(r = 150)` for the `axis.text.y.right` argument of `theme()`. \n* Then hide the secondary axis labels by making them the same color as the background through also setting `color = bg_col` for `axis.text.y.right`.\n\nWe also remove the title by setting `axis.title.y.right` to `element_blank()`. \\index{ggplot2!element\\_blank}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstyled_plot <- theme_plot +\n  scale_y_continuous(sec.axis = dup_axis()) +\n  theme(\n    axis.text.y.right = element_text(\n      margin = margin(r = 90),\n      color = bg_col\n    ),\n    axis.title.y.right = element_blank()\n  )\nstyled_plot\n```\n\n::: {.cell-output-display}\n![Scatter plot of how the weights of red ruffed lemurs change with age, with additional space left blank on the right hand side though the subtitle text spans the full plot width.](lemurs_files/figure-html/fig-lemurs-margin-2-1.png){#fig-lemurs-margin-2}\n:::\n:::\n\n\n\n\n\n\nWe now have an appropriate space to place an image.\n\n## Working with images \n\nThough you might not often find instructions in data visualization books about working with images, there are many reasons why you may wish to overlay an image on top of a plot. Perhaps you need to add your company logo in the corner for more consistent branding. Or perhaps you're just looking for a way to make your plot more eye catching! \\index{image} \n\n### Manipulating images with {magick} and {imager}\n\nThe {magick} package [@magick] provides bindings to the ImageMagick image processing library, which allows you to manipulate images through rotating, scaling, cropping, or blurring them (to name just a few!). It supports multiple different image formats including png, jpeg, and pdf. \\index{ImageMagick} \\index{magick}\n\nThe {magick} package is not the only R package that enables you to process and manipulate images. A popular alternative is the {imager} package [@imager] which is based on CImg, a C++ library by David Tschumperlé. Both packages have their strengths, and it’s easy to use both at the same time via the `cimg2magick()` and `magick2cimg()` conversion functions in {imager}. There are some operations that are easier in {imager}, and some that are easier in {magick}. In this chapter, we’re going to use both packages together to demonstrate how easy it is. \\index{imager} \\index{imager!cimg2magick} \\index{imager!magick2cimg}\n\n::: {#tip-lemurs-unsplash .callout-tip}\n\n## Finding images for reuse\n\nWhen you're adding a logo to your plot, it's (reasonably) easy to know which image to use and where to find it. If you don't already have the image you want to overlay, you also need to know how and where to find it. \n\nIf you add images to plots that you don't own, make sure you have permission to re-use the image and check that the license file allows you to. Site such as Unsplash ([unsplash.com](https://unsplash.com/)), Wikimedia Commons ([commons.wikimedia.org](https://commons.wikimedia.org/)), or Pixabay ([pixabay.com](https://pixabay.com/)) can be good places to find images that are free to re-use.\n\n:::\n\nFor this visualization, we're going to use a photograph of a red ruffed lemur from [Unsplash](https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k) taken by [Jax](https://unsplash.com/@lysrix) [@img_jax].\n\nWe're going to start with the {imager} package and use it to read the image into R with the `load.image()` function. If you were using {magick} to start with, you would use the `image_read()` function instead. \\index{imager!load.image} \\index{magick!image\\_read}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlemur_img <- load.image(\"images/lemur.jpg\")\nplot(lemur_img)\n```\n\n::: {.cell-output-display}\n![Image of a red ruffed lemur shown with plot axes which indicate the size of the image in pixels.](lemurs_files/figure-html/fig-lemurs-imager-read-1.png){#fig-lemurs-imager-read}\n:::\n:::\n\n\n\n\n\n\nYou can view the image to check it's been loaded correctly by running `plot(lemur_img)`, and you'll see that it's plotted on a traditional base R graphics grid, with the axes indicating the number of pixels. Don't worry about how to deal with this background grid - we'll deal with that a little bit later!\n\nThough this is a fun image of a lemur, overlaying it on top of the plot in its raw format isn't going to be the most aesthetically pleasing. The background of the image would be quite clear against the plot. It would be better if the image was simply of the lemur itself with a transparent background. There are many online tools and desktop software available that could remove the background for you, but we can also do this in R!\n\nLet's start by cropping out as much of the background as possible. In {imager}, the `Xc()` and `Yc()` functions return pixel coordinates for an image, for x- and y- coordinates, respectively. Subsetting or updating the pixel value of an image based on pixel coordinates essentially works the same way as subsetting or updating a matrix value in R. \\index{imager!Xc} \\index{imager!Yc}\n\nRunning `Xc(lemur_img) <= 200` creates a pixel matrix where all values with an x-coordinate less than or equal to 200 are `TRUE`, and is otherwise `FALSE`. Setting these values to `0` turns those pixels to the color black. We can do something similar to remove sections where the x-coordinate is less than 275 and the y-coordinate is greater than 320. It takes a little bit of trial and error to get these boundaries correct, but you can use the plot axis as a guide. Be careful with the y-axis - it goes the opposite direction of most plots! \\index{imager!Xc}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npx <- Xc(lemur_img) <= 200\nlemur_img[px] <- 0\npx <- Xc(lemur_img) <= 275 &\n  Yc(lemur_img) >= 320\nlemur_img[px] <- 0\n```\n:::\n\n\n\n\n\n\nNow we need to remove the rest of the background. Luckily, there is quite a lot of contrast between the part of the image we want to keep (the lemur) and the part that we don't (the background). The `px.flood()` function from {imager} allows you to select pixels that are similar to some initial pixel. This means we can select a pixel from the lemur, and then use the `px.flood()` function to select all pixels that are similar to it. The `x` and `y` arguments are used to specify the coordinates of the initial pixel to start with. The `sigma` argument specifies how different we want to allow the pixels to be with lower indicating very similar, and higher values of `sigma` allowing more different values to be selected. \\index{imager!px.flood}\n\nIt takes a little bit of trial and error to choose the best values for these arguments, and we can visually inspect performance by plotting the boundary lines of the pixels that are considered similar. Passing in the output from `px.flood()` into `highlight()` from {imager} draws a red outline around the *similar* pixels. \\index{imager!highlight}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndetect_outline <- px.flood(\n  im = lemur_img,\n  x = 420,\n  y = 200,\n  sigma = 0.5\n)\nplot(lemur_img)\nhighlight(detect_outline)\n```\n\n::: {.cell-output-display}\n![Image of a red ruffed lemur with a red line indicating the boundary between the main part of the image and the background.](lemurs_files/figure-html/fig-lemurs-img-outline-1.png){#fig-lemurs-img-outline}\n:::\n:::\n\n\n\n\n\n\nYou can see in @fig-lemurs-img-outline that the lemur's white collar has been classified as part of the background. We can edit the `x`, `y`, and `sigma` arguments to select this part of the image separately:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndetect_outline_2 <- px.flood(\n  im = lemur_img,\n  x = 430,\n  y = 220,\n  sigma = 0.063\n)\n```\n:::\n\n\n\n\n\n\nTo make it easier to create a transparent background, we turn the non-similar parts of the image i.e. the areas outside of the selected pixel sets, to black. As we did when cropping the image, we do this by setting the pixel values to `0` i.e. no color. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlemur_img[detect_outline & !detect_outline_2] <- 0\n```\n:::\n\n\n\n\n\n\nWe now want to turn the sections of the image that are pure black into transparent sections. The easiest way to do this is through the `image_transparent()` function from {magick}. However, our `lemur_img` image is currently of a format designed to work with {imager}, and won't work out of the box with {magick}. Luckily, the `cimg2magick()` function in the {imager} package converts it to a format that is compatible with {magick}. For some reason, the `cimg2magick()` also causes the image to be flipped horizontally. We can turn it back to the correct orientation using the `image_flop()` function in {magick}. \\index{imager!cimg2magick} \\index{magick!image\\_flop} \n\nNote that since the image is always the first argument of the `image_*()` functions in {magick} (and the output remains of the same class) we can use a piped workflow here, just as we do with {tidyverse} functions when working with data. Finally, we use the `image_transparent()` function in {magick} to turn all pixels that are currently `\"black\"` transparent. \\index{magick!image\\_transparent}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlemur_nobg <- cimg2magick(lemur_img) |>\n  image_flop() |>\n  image_transparent(\"black\")\nlemur_nobg\n```\n\n::: {.cell-output-display}\n![Image of a red ruffed lemur with the background removed, as well as a small portion of the lemur's collar.](lemurs_files/figure-html/fig-lemurs-img-rmbg-1.png){#fig-lemurs-img-rmbg width=205}\n:::\n:::\n\n\n\n\n\n\nWhen you print the image with {magick}, it returns the image itself to the plot window, but also returns output to the console with information about the image dimensions, format, and file size. You can see that the process of turning the background transparent is not perfect, as the white *collar* of the lemur has still been partially removed. It's also a process that requires a lot of trial and error to find the right combination of argument values. \n\n### Adding images to plots with {cowplot}\n\nBefore we go ahead with adding the image to the scatter plot, let's first update the caption to add an attribution for the image, in addition to the attributions for the data and graphic. We can use `paste0()` to join together the output from the `source_caption()` function we were already using for the caption, with some additional styled text. You'll see that this new text is similar to the text described in @sec-turbines, with `<br>` adding a new and `**` used to style the word `Image` in bold text. We can then override the existing caption in the `labs()` function. \\index{base!paste0} \\index{source\\_caption}  \\index{ggplot2!labs}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncap <- paste0(\n  source_caption(\n    source = \"Duke Lemur Center (Zehr et al. 2014)\",\n    sep = \"<br>\",\n    graphic = social\n  ),\n  \"<br>**Image**: Jax (Unsplash: @lysrix)\"\n)\nstyled_plot <- styled_plot +\n  labs(caption = cap)\n```\n:::\n\n\n\n\n\n\nThe {cowplot} package [@cowplot] extends {ggplot2} and allows you to arrange, align, and combine multiple plots into a single visual. In this chapter, we're more interested in the {cowplot} functionality for adding annotations and customization - including images. \\index{cowplot}\n\n::: {#tip-lemurs-arrange .callout-tip}\n\n## R packages for combining plots and images\n\nThere are several other R packages available for arranging different elements together e.g. combining multiple plots or adding images to plots. The most common for arranging charts is the {patchwork} package [@patchwork] which we'll use in @sec-time-zones and @sec-house. The {egg} package [@egg] is another popular alternative, with the `geom_custom()` function being especially useful for adding images. The {ggimage} package [@ggimage] can also be used to add images to charts, and is great when you are mapping columns of your data to properties of the images e.g. file paths or image coordinates. \\index{egg} \\index{patchwork} \\index{ggimage}\n\n:::\n\nWith {cowplot}, we start by using the `ggdraw()` function which sets up a layer on top of our {ggplot2} `styled_plot` object to allow us to draw on top of it. The `draw_image()` function is then used to add the `lemur_nobg` image on top. By default, the layer on top of the plot has coordinates running from 0 to 1, with `(0, 0)` being the lower left corner of the plot and `(1, 1)` the top right. Since we want to position the image in the bottom right hand corner, we set `hjust` and `halign` to `1`, to align the right hand side of the image with an `x` value of `1`. Setting `vjust` and `valign` to `0` aligns the bottom of the image with the to the `y`- value of `0`. The `width` defines how big the image is - some trial and error results in a choice of `0.4` for the image width. \\index{cowplot!ggdraw} \\index{cowplot!draw\\_image} \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_plot <- ggdraw(styled_plot) +\n  draw_image(\n    lemur_nobg,\n    x = 1, y = 0,\n    hjust = 1, halign = 1,\n    vjust = 0, valign = 0,\n    width = 0.4\n  )\nfinal_plot\n```\n\n::: {.cell-output-display}\n![Scatter plot of how the weights of red ruffed lemurs change with age, with an image of a red ruffed lemur overlaid in the bottom right corner.](lemurs_files/figure-html/fig-lemurs-img-plot-1.png){#fig-lemurs-img-plot}\n:::\n:::\n\n\n\n\n\n\nFinally, we save the image using `ggsave()`: \\index{ggplot2!ggsave}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\n  filename = \"lemurs.png\",\n  plot = final_plot,\n  width = 5,\n  height = 0.67 * 5\n)\n```\n:::\n\n\n\n\n\n\nWhen you add the image using {cowplot}, you may see some warnings returned in the console about some of the custom fonts not being found. However, as long as the fonts are appearing correctly on the chart, you can ignore these warnings.\n\n## Reflection\n\nDespite the complexity of the code behind it, this is a relatively simple plot. And that's where the strengths of this visualization lie - it often takes a lot of work to create a clean and minimal chart. The lemur image adds a fun element to the chart and makes it more eye-catching and interesting without adding any additional complexity to the way the data is presented. The use of shapes in addition to color for distinguishing data for male and female lemurs is another strength as it increases the accessibility of the chart, making it available to a wider audience. \n\nHowever, there are still a few areas where improvements could be made. The obvious one is the background removal of the lemur image. As we noted earlier, some of the lemur's white fur has been incorrectly removed as it's a similar color to the background. \n\nThe plot could be further improved by giving more consideration to the choice of axes - both x and y. Depending on what aspect of lemur ages or weights a reader is interested in, a different choice of axis may be more appropriate. For example, if the interest is in adult lemurs, subsetting the data to consider only lemurs above a certain age would work better. If the interest is in looking at when lemurs reaching their adult weight, looking at lemurs below a specific age or performing a transformation of the axis (e.g. logarithmic) would make it easier to see the point at which lemurs stop growing. Similarly, the y-axis uses grams as its units since this is how the weight data is recorded. For young lemurs, measuring on a scale of grams is appropriate. However, the majority of lemurs in the data are adults and so perhaps presenting the data in terms of kilograms might make more sense.\n\nIt's not currently clear from this chart that each individual lemur has multiple weight measurements recorded. This means that the data points shown in the chart are not independent - a common assumption of many statistical models. Overall, this is a fun and easy-to-interpret chart that's quite likely to draw people in to learn more about lemurs. However, if it's a part of an exploratory step before statistical modelling, it may need a little bit more fine-tuning.\n\n## Exercises\n\n* Choose a different species and recreate this visualization.\n\n* Based on what you learned in @sec-nobel, can you create a parameterized plot function that takes a species (and optional image path) as arguments?\n",
    "supporting": [
      "lemurs_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"site_libs/react-18.2.0/react.min.js\"></script>\n<script src=\"site_libs/react-18.2.0/react-dom.min.js\"></script>\n<script src=\"site_libs/reactwidget-2.0.0/react-tools.js\"></script>\n<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/reactable-0.4.4/reactable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/reactable-binding-0.4.4/reactable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}