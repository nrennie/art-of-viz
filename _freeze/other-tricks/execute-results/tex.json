{
  "hash": "bb235dd5f2c3c10a90f5937a8eaec7f6",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfilters:\n  - line-highlight\nexecute: \n  freeze: auto\nfig-width: 5\nfig-asp: 0.75\n---\n\n\n\n\n\n\n# Other tips and tricks {#sec-other}\n\nThere are many functions within **`ggplot2`**, and many more within the wider community of extension packages, that the chapters in this book can't cover. Some of those packages are used to add different geometries, a few are used behind the scenes to help streamline workflows, and a few are more generally useful R packages.\n\n**Packages required in this chapter**:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(camcorder)\nlibrary(dplyr)\nlibrary(ggpattern)\nlibrary(ggplot2)\n```\n:::\n\n\n\n\n\n\n## Recording gifs with **`camcorder`** {#sec-camcorder}\n\n**`camcorder`** [@camcorder] is an R package to track and automatically save graphics generated with **`ggplot2`**. You can set up your R session to use **`camcorder`** by running `gg_record()`. If you're using RStudio, you'll notice that your plots now appear in the *Viewer* tab rather than the *Plots* tab. \\index{camcorder} \\index{camcorder!gg\\_record}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_record(\n  width = 6,\n  height = 4\n)\n```\n:::\n\n\n\n\n\n\nIf you're reading the online version of this book, you will have seen several examples of gifs showing the visualization development process at the end of chapters. The `gg_playback()` function combines the previously saved images and saves them to a gif. You can set different preferences using the arguments in `gg_playback()`. For example, you can define the length of each frame in the gif, make the first and last frames longer or shorter, or set the background color. \\index{camcorder!gg\\_playback}\n\n::: {#tip-other-camcorder .callout-tip}\n\n## Transparent backgrounds in gifs\n\nSome of the built-in themes in **`ggplot2`** have a transparent background. If you've used these at some point during the development process, when you viewed them in RStudio the background likely appeared white. The default background color in `gg_playback()` is `\"black\"` - meaning that your gif might not quite look as you expect. Instead set the background color to something more sensible, for example your `bg_col` variable.\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_playback(\n  name = \"data-viz.gif\",\n  first_image_duration = 4,\n  last_image_duration = 20,\n  frame_duration = .25,\n  background = bg_col\n)\n```\n:::\n\n\n\n\n\n\nNote that there are a few plots (including those produced by **`geofacet`**) that don't work automatically with `gg_record()`. However, you can manually run `record_polaroid()` manually to capture the image with **`camcorder`** and view it at your desired resolution in the *Viewer* pane. \\index{camcorder!record\\_polaroid}\n\n### Setting the size resolution of images\n\nHave you ever spent ages tinkering with a plot you’re previewing in RStudio, before using `ggsave()` to save a higher resolution image, only to end up with the text looking ridiculously larger (or smaller) than you thought? Or do you struggle to preview plots with your desired aspect ratio? One of the nice features of using **`camcorder`** is the ability to preview plots with the same height, width, and resolution that you want your final plot to be in. Simply set the `height`, `width`, and `dpi` (and optionally `units`) arguments in `gg_record()` to your desired values. Then what you see is what you save! The **`ggview`** [@ggview] package also provides similar functionality.\n\n::: {#tip-other-dpi .callout-tip}\n\n## Choosing a plot resolution\n\nThe RStudio Plots tab shows images at 96dpi, but the default in `ggsave()` is 300dpi. This is what causes the mismatch between the sizes of text and other elements. The default dpi in `gg_record()` is also 300dpi so it integrates nicely with `ggsave()`. \\index{ggplot2!ggsave}\n\n:::\n\n## Extracting information from plots {#sec-ggbuild}\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\nIn @sec-turbines, we reflected that it would be better to use a wind turbine icons instead of the fan icon - since the data is about wind turbines! An alternative to the Font Awesome icons we used in @sec-turbines are icons from [Flaticon](https://www.flaticon.com/). You can download Flaticon icons as PNG images for free, as long as you provide attribution. More specifically, you can download a **Wind Power** icon from [www.flaticon.com/free-icon/wind-power_5670189](https://www.flaticon.com/free-icon/wind-power_5670189) [@flaticon]. Let's save it in an `images/` project directory. \n\nNow instead of plotting icons as fonts, we want to plot icons as images. The problem is that:\n\n* we want to use the x- and y- coordinates for the icons provided by `geom_pictogram()`\n* we want to use an image instead of a font icon\n\nThese two things aren't currently compatible.\n\n### Extracting co-ordinates\n\nWe've already built the plot with `geom_pictogram()` from **`waffle`** so the x- and y- coordinates have already been calculated. Luckily, we can use the `ggplot_build()` function to extract from the `basic_plot` we created in @sec-turbines. \\index{waffle!geom\\_pictogram} \\index{ggplot2!ggplot\\_build}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbasic_built <- ggplot_build(basic_plot)\n```\n:::\n\n\n\n\n\n\nYou can save an `ggplot` plot as a variable, and then pass it into `ggplot_build()` to access the data associated with the plot (including data that was calculated by `geom` functions). The data is stored in the `basic_built$data[[1]]` element. The `x`, `y`, and `colour` variables are all stored in their respective columns. The variable used to define the facets, `Year_Group`, is stored in the `PANEL` column and is given by numbers rather than the original category names. \n\nUnfortunately, `PANEL` is a forbidden column name for a faceting variable, so we need to start by renaming this column. We also convert this renamed column into a factor, and pass in the `Year_Group` categories from @sec-turbines as labels. \\index{dplyr!rename} \\index{dplyr!mutate} \\index{base!factor}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_data <- basic_built$data[[1]] |>\n  rename(Year_Group = PANEL) |>\n  mutate(\n    Year_Group = factor(\n      Year_Group,\n      labels = c(\n        \"2000 - 2004\", \"2005 - 2009\",\n        \"2010 - 2014\", \"2015 - 2019\"\n      )\n    )\n  )\n```\n:::\n\n\n\n\n\n\nLet's use `geom_point()` as a quick sense check that the x- and y- coordinates are the values that we're expecting, faceting by our `Year_Group` column. You can see the similarity with @fig-turbines-base-plot.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = new_data,\n  mapping = aes(\n    x = x, y = y\n  )\n) +\n  geom_point() +\n  facet_wrap(~Year_Group, nrow = 1)\n```\n\n::: {.cell-output-display}\n![Waffle plot of the number of wind turbines commissioned in different time periods.](other-tricks_files/figure-pdf/fig-other-rebuild-1.pdf){#fig-other-rebuild fig-pos='H' fig-alt='Plot a faceted scatterplot with dots arranged in a grid. Each facet corresponds to a different time period (e.g., \"2000 - 2004\", \"2005 - 2009\", etc.), as indicated in the header above each panel. The x-axis is labeled \"x,\" and the y-axis is labeled \"y.\"'}\n:::\n:::\n\n\n\n\n\n\n### Plotting with **`ggpattern`**\n\nNow instead of using `geom_point()` we want to plot images. We could use **`ggimage`** [@ggimage], or alternatively **`ggpattern`** [@ggpattern]. The **`ggpattern`** package provides more **`ggplot2`** `geom` functions which support filled areas with geometric or image patterns. We can use the `geom_tile_pattern()` function, and specify that we want to use an `\"image\"` pattern and supply the file name of the Flaticon image to `pattern_filename`. Setting `fill = \"white\"` gives a white background to the icons. We can also set `theme_void()` to remove all of the distracting background elements.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = new_data,\n  mapping = aes(\n    x = x, y = y\n  )\n) +\n  geom_tile_pattern(\n    fill = \"white\",\n    pattern = \"image\",\n    pattern_filename = \"images/wind-power.png\"\n  ) +\n  facet_wrap(~Year_Group, nrow = 1) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![Pictogram of the number of wind turbines commissioned in different time periods, using the Flaticon.com wind power icon.](other-tricks_files/figure-pdf/fig-other-flaticon-1.pdf){#fig-other-flaticon fig-pos='H' fig-alt='The image is a bar graph with wind turbine icons representing quantities over time. From 2000–2004, the number is very low. It increases in 2005–2009, peaks in 2010–2014, and slightly declines in 2015–2019 while remaining relatively high.'}\n:::\n:::\n\n\n\n\n\n\nIf we wanted to color the icons based on the `Region` variable, we would need to have multiple copies of the image in different colors. We could combine the information in @sec-lemurs about manipulating and re-coloring images, along with the information in @sec-r-pkgs about defining image paths based on data values to do this programmatically.\n\nOne of the benefits of using **`ggplot2`** is that they are stored as lists, and all of the information about that plot is stored with it - even information you didn't pass in! This allows you to use `ggplot_build()` to take a layout created by one **`ggplot2`** extension package and use it in an entirely different extension - meaning you can create custom plots by mixing and matching features of different extensions.\n\n## Code formatting with **`lintr`** and **`styler`** {#sec-code-style}\n\nWriting code that follows a consistent style can make it easier for other people to read, makes collaboration simpler, and can help pick up errors in your code more quickly. In R, the **`lintr`** package [@lintr] checks for adherence to a specified coding style and identifies possible syntax errors, then reports them so you can take action. \\index{lintr}\n\nThe **`styler`** package [@styler] goes one step further in terms of code styling, and actually styles your code for you. Although you may be a little bit skeptical of packages that overwrite scripts you’ve written, it makes it quick and easy to style code. Creating a keyboard shortcut for the `style_active_file()` function means you can apply code styling easily, without having to call a function manually or click a specific button [@streamline]. \\index{styler!style\\_active\\_file}\n\n## Template files for TidyTuesday {#sec-template-files}\n\nYou may notice that each chapter of this book has followed a similar structure: load packages, read in some data, perform some exploratory analysis, load fonts and colors as variables, write relevant text, create a simple plot, add styling with **`ggtext`**, and save a PNG file. This means that for each plot, there's a lot of overlap in the structure of the .R files and the code they contain. \n\nIf you visualize data using R on a regular basis, you'll likely find yourself repeating similar steps. You might even find yourself copying and pasting code from a previous file to your new file. Like many things in the world of programming, if you find yourself copying and pasting the same thing several times, there is almost certainly a better way of doing it. And in this case there is - template files! \\index{templates}\n\nFor each TidyTuesday visualization, an .R script with the following file can be created [@template_files]:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndate_str <- \"2024-04-02\"\n\n# Load packages ----\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(patchwork)\nlibrary(camcorder)\nlibrary(ggtext)\nlibrary(glue)\n\nsource(\"source_caption.R\")\nsource(\"social_caption.R\")\n\n\n# Load data ----\n\ntuesdata <- tidytuesdayR::tt_load(date_str)\n\n\n# Load fonts ----\n\nfont_add_google(\"Roboto\", \"roboto\")\nshowtext_auto()\n\n\n# Define colors and fonts ----\n\nbg_col <- \"\"\ntext_col <- \"\"\nhighlight_col <- \"\"\n\nbody_font <- \"roboto\"\ntitle_font <- \"roboto\"\n\n\n# Data wrangling ----\n\n\n\n# Start recording ----\n\ngg_record(\n  dir = file.path(date_str, \"recording\"),\n  device = \"png\",\n  width = 7,\n  height = 5,\n  units = \"in\",\n  dpi = 300\n)\n\n\n# Define text ----\n\nsocial <- social_caption(\n  bg_color = bg_col,\n  icon_color = highlight_col,\n  font_color = text_col,\n  font_family = body_font\n)\ntitle <- \"\"\nsubtitle <- \"\"\ncaption <- source_caption(\n  source = \"\",\n  sep = \"<br>\",\n  graphic = social\n)\n\n\n# Plot ----\n\n\ntheme(\n  plot.margin = margin(5, 5, 5, 5),\n  plot.background = element_rect(\n    fill = bg_col,\n    color = bg_col\n  ),\n  panel.background = element_rect(\n    fill = bg_col,\n    color = bg_col\n  ),\n  plot.title = element_textbox_simple(\n    color = text_col,\n    hjust = 0.5,\n    halign = 0.5,\n    margin = margin(b = 10, t = 5),\n    lineheight = 0.5,\n    family = title_font\n  ),\n  plot.subtitle = element_textbox_simple(\n    color = text_col,\n    hjust = 0.5,\n    halign = 0.5,\n    margin = margin(b = 10, t = 5),\n    lineheight = 0.5,\n    family = body_font\n  ),\n  plot.caption = element_textbox_simple(\n    color = text_col,\n    hjust = 0.5,\n    halign = 0.5,\n    margin = margin(b = 5, t = 10),\n    lineheight = 0.5,\n    family = body_font\n  )\n)\n\n\n# Save gif ----\n\ngg_playback(\n  name = file.path(date_str, paste0(date_str, \".gif\")),\n  first_image_duration = 4,\n  last_image_duration = 20,\n  frame_duration = .25,\n  background = bg_col\n)\n```\n:::\n\n\n\n\n\n\nThere are several components of this script that make it useful: \n\n* It's separated into different sections which can help to break down the process of creating a visualization into smaller, more manageable chunks. In RStudio, the Ctrl+Shift+R keyboard shortcut can be used to add a new section.\n\n* It defines variables and code snippets that are used repeatedly in different visualizations. For example, defining variables for the colors and fonts, or using the theme elements from **`ggtext`** to style the title and subtitle text.\n\n* There are also some elements of the script that are similar for each plot, but not exactly the same. For example, reading in the data using the **`tidytuesdayR`** package or saving the gif created by **`gcamcorder`**. Here, the code is changing based on the date associated with the TidyTuesday data. Instead of manually editing the date in the script in each location, a `date_str` variable is defined at the top of the script - meaning you only need to set the date once. \n\nYou can also create template files for other aspects of your data visualization workflow. For example, creating a `README.md` file for each visualization.\n\n## Writing your own helper functions\n\nAs you've already seen in @sec-turbines and @sec-cats, creating functions for code you reuse frequently can save time and space. We created the `source_caption()` and `social_caption()` functions for adding a caption with data source attribution, and to write plot caption that contained Font Awesome icons. These functions have then been used in almost every subsequent chapter (and therefore also the template file described in the previous section). What other helper functions might be useful? \\index{source\\_caption} \\index{social\\_caption} \n\n* To use the Font Awesome icons, you need to load the Font Awesome font files. We did this using `sysfonts::font_add()` and specifying a path to the font file. You might also want to load other fonts that aren't normally available on your system or through Google Fonts. You could write a function that loads (multiple) font files that you use often. You could go one step further and place the fonts and your font loading function into an R package. \n\n* For the template file discussed in the previous section, the date was defined as a variable at the top of the script. Instead, you could create a function that takes the date as an argument. The function could then create your .R script, insert the date where it needs to go, and save the file to the desired location. \n\n* If you're creating plots for corporate reports, creating your own **`ggplot2`** theme and color palette functions can save time implementing the same styling and colors for every visualization. It can also make it easier for other people you work with to use the same styling.\n\n\\index{sysfonts!font\\_add} \n\nYou can create helper functions for anything that you do often. If you don't use Font Awesome icons in your captions, you don't need to create the `social_caption()` function. But if, for example, you always save your images in a specific size with a specific background color, create a function that does that. You'll be amazed at how much time you can save. \\index{social\\_caption} \n\n## Exercises\n\n* Browse through the available TidyTuesday datasets at [github.com/rfordatascience/tidytuesday](https://github.com/rfordatascience/tidytuesday), and choose one you find interesting.\n\n* Use the skills and techniques you've learned in this book to create your own visualization that tells a story about the data.\n",
    "supporting": [
      "other-tricks_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}