{
  "hash": "dd0161371ab3b70c6d660b4c353b9c89",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfilters:\n  - line-highlight\nexecute: \n  freeze: auto\nfig-width: 5\nfig-asp: 0.5\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n# US House elections: geography on a grid with {geofacet} {#sec-house}\n\nIn this chapter, we'll learn how to arrange faceted plots in a grid that resembles a geographic area with {geofacet}, and look at another approach for creating customized legends. \\index{geofacet} \\index{patchwork}\n\n## Data\n\n\\index{tidytuesdayR!tt\\_load}\n\n[@elections_data]\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata <- tidytuesdayR::tt_load(\"2023-11-07\")\nhouse <- tuesdata$house\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\\index{utils!head}\n\nLet's take a look at the first few rows of the data:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(house)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 20\n   year state  state_po state_fips state_cen state_ic office\n  <dbl> <chr>  <chr>         <dbl>     <dbl>    <dbl> <chr> \n1  1976 ALABA~ AL                1        63       41 US HO~\n2  1976 ALABA~ AL                1        63       41 US HO~\n3  1976 ALABA~ AL                1        63       41 US HO~\n4  1976 ALABA~ AL                1        63       41 US HO~\n5  1976 ALABA~ AL                1        63       41 US HO~\n6  1976 ALABA~ AL                1        63       41 US HO~\n# i 13 more variables: district <chr>, stage <chr>,\n#   runoff <lgl>, special <lgl>, candidate <chr>,\n#   party <chr>, writein <lgl>, mode <chr>,\n#   candidatevotes <dbl>, totalvotes <dbl>,\n#   unofficial <lgl>, version <dbl>, fusion_ticket <lgl>\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThere are many `state` columns, essentially providing similar information in different formats e.g. the `state` column provides the state name and the `state_po` column provides the state two letter abbreviation.\n\n## Exploratory work\n\n### Data exploration\n\nWe might be interested in whether or not the number of votes has changed over time. The data goes back to 1976 and the population of the USA has increased by over 150% between the 1970 and 2020 censuses [@UScensuspop] so might we also expect a similar increase in votes? Let's start by having a look at the number of candidate votes over time with a quick scatter plot made with `plot()`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  x = house$year,\n  y = house$candidatevotes,\n  xlab = \"\",\n  ylab = \"Candidate votes\"\n)\n```\n\n::: {.cell-output-display}\n![Bar chart ](us-elections_files/figure-pdf/fig-elections-scatterplot-1.pdf){#fig-elections-scatterplot}\n:::\n:::\n\n\n\n\n\n\nThere doesn't seem to be an especially interesting pattern in votes over time, at least at first glance, in @fig-elections-scatterplot. However, it has highlighted a potential data issue. In most years, the highest values are around 300,000 but there are two observations in 2022 where the values are well over 1,000,000. We had a similar issue in @sec-bees, where some observations were the sum of other observations. This doesn't seem to be the case here. For now, let's exclude these and look at data where the number of candidate votes is below 600,000.\n\nWe might also be interested in how the number of candidate votes varies by party, and we can create a box plot ...\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(\n  candidatevotes ~ party,\n  data = house[house$candidatevotes < 600000, ],\n  horizontal = TRUE,\n  cex.axis = 0.5,\n  cex.names = 0.5,\n  las = 1,\n  xlab = \"Number of candidate votes\",\n  ylab = NULL\n)\n```\n\n::: {.cell-output-display}\n![Box plot ](us-elections_files/figure-pdf/fig-elections-boxplot-1.pdf){#fig-elections-boxplot}\n:::\n:::\n\n\n\n\n\n\nIn @fig-elections-boxplot there are a couple of interesting points to note. First, there are many, many unique `party` names because every independent candidate is listed as a different party name. This means that not all party names can actually by read off from the chart. Secondly, there is a lot\n\n### Exploratory sketches\n\n![Initial sketch of a faceted area chart arranged in a grid shaped like the United States. An enlarged version of one area chart is used as a legend on the left hand side.](images/sketch-elections.png){#fig-elections-sketch fig-align=\"center\"}\n\n## Preparing a plot\n\n### Data wrangling\n\n\\index{dplyr!mutate}\n\n\\index{dplyr!case\\_when} \\index{dplyr!filter} \\index{dplyr!group\\_by} \\index{dplyr!summarise} \\index{dplyr!ungroup}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhouse_data <- house |>\n  dplyr::mutate(party = dplyr::case_when(\n    party == \"REPUBLICAN\" ~ \"Republican\",\n    party == \"DEMOCRAT\" ~ \"Democrat\",\n    TRUE ~ \"Other\"\n  )) |>\n  dplyr::filter(stage == \"GEN\") |>\n  dplyr::group_by(year, state_po, party) |>\n  dplyr::summarise(votes = sum(candidatevotes)) |>\n  dplyr::ungroup()\n```\n:::\n\n\n\n\n\n\nThere are some years for which there were no `\"Other\"` candidates in some states, and so there are no rows for these values i.e. they are implicitly missing. As we saw in @sec-r-pkgs, this can cause misleading area charts and results in a warning from {ggplot2}. As in @sec-r-pkgs, these *missing* values are not actually missing, they are simply 0. We'll do as we did before and make sure that every combination of `year`, `state_po`, and `party` exists in the data by using `complete()` from {tidyr}, and setting any *missing* combinations explicitly to 0. \\index{tidyr!complete}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data <- house_data |>\n  tidyr::complete(\n    year, state_po, party,\n    fill = list(votes = 0)\n  )\n```\n:::\n\n\n\n\n\n\n### The first plot\n\nWe're once again going to create a faceted plot, as we did in @sec-programming, @sec-museums, and @sec-technology. There are two key differences with this plot:\n\n* Instead of arranging the plots into a rectangular shape with a specified number of rows and columns, we want to arrange the plots in a way that resembles some underlying geography.\n* There are far more facets (over 50) compared to the previous plots we've made (which have mostly had less than 10). Sometimes creating a large number of facets can be slow.\n\nIt's this second issue that means when developing faceted plots, especially when using large data or a complex visualization, it can be useful to create a single plot first. That is, filter the data and create a chart for just one level of the faceting category. This allows you to get the basics of your chart correct, before you start worrying about facet layout.\n\nWe start by passing in our `plot_data` to to the `data` argument of `ggplot()`, wrapped inside the `filter()` function from {dplyr} which subsets the data to just California. We set up the aesthetic mapping to plot the year on the x-axis and the number of votes on the y-axis, split by party. \\index{dplyr!filter} \\index{ggplot2!ggplot} \\index{ggplot2!aes}\n\nWe've already seen examples of making area charts in @sec-museums and @sec-r-pkgs, but we're going to make a slight change in this chapter. Since we're going to be comparing states (which each have very different population sizes, and therefore will have very different numbers of votes), rather than considering an area chart of number of votes, we'll look at the proportion for each party. Luckily, we don't have to calculate these percentages ourselves, since setting `position = \"fill\"` inside `geom_area()` does this for us. \\index{ggplot2!geom\\_area}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(\n  data = dplyr::filter(plot_data, state_po == \"CA\")\n) +\n  geom_area(\n    mapping = aes(\n      x = year,\n      y = votes,\n      fill = party\n    ),\n    position = \"fill\"\n  )\n```\n\n::: {.cell-output-display}\n![Plot](us-elections_files/figure-pdf/fig-elections-single-plot-1.pdf){#fig-elections-single-plot fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\nWe now have a basic plot for one of the facet values.\n\n::: {#tip-elections-piping .callout-tip}\n\n## Piping data into `ggplot()`\n\nSince the first argument of `ggplot` is `data`, this means that we *could* pipe the data into the `ggplot()` function rather than explicitly stating it as the first argument. For example, the code above could be re-written as:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data |>\n  dplyr::filter(, state_po == \"CA\") |>\n  ggplot() +\n  geom_area(\n    mapping = aes(\n      x = year,\n      y = votes,\n      fill = party\n    ),\n    position = \"fill\"\n  )\n```\n:::\n\n\n\n\n\n\nThough this may arguably look neater than nesting `filter()` inside `ggplot()`, you're unlikely to see any other examples of piping into `ggplot()` for two reasons:\n\n* The combination of `+` and `|>` looks odd, and this outweighs the increased neatness from piping (personal opinion).\n* It makes it easier to end up with very long, complicated code. Keeping the data wrangling and the plotting code separate often makes more sense.\n\n:::\n\nWe can now pass the full data into `ggplot()` (rather than just the California subset) and add `facet_wrap()` to create an area chart for each value in `state_po`. \\index{ggplot2!ggplot} \\index{ggplot2!aes} index{ggplot2!geom\\_area} \\index{ggplot2!facet\\_wrap}\n\n\n\n\n\n\n::: {.cell source-line-numbers='1,10'}\n\n```{.r .cell-code}\nbasic_plot <- ggplot(data = plot_data) +\n  geom_area(\n    mapping = aes(\n      x = year,\n      y = votes,\n      fill = party\n    ),\n    position = \"fill\"\n  ) +\n  facet_wrap(~state_po)\nbasic_plot\n```\n\n::: {.cell-output-display}\n![Plot](us-elections_files/figure-pdf/fig-elections-basic-plot-1.pdf){#fig-elections-basic-plot fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\nIn @fig-elections-basic-plot, we can't actually see any of our area charts, only the facet labels. This is a very common problem when working with large numbers of facet categories, and smaller chart sizes. We'll deal with this problem a little bit later when adjusting the plot themes. \n\n### Faceting with {geofacet}\n\nTo arrange the faceted plots into a grid that resembles the underlying geography, we'll use the {geofacet} package [@geofacet]. The {geofacet} package makes it easier to arrange facets in the shape of a map. This makes it easier to compare data across regions, like states or countries, in a grid format. There are many built-in grids for different geographical regions, including the several for the United States of America. However, you can also create your own custom facet grid if you prefer a different layout, or if no grid exists for the region you are plotting.\n\nTo do faceting with {geofacet}, we use `facet_geo()` instead of `facet_wrap()`. It works in essentially the same way, and we start by using a `~` to indicate which column is the faceting column. However, there are two things that are a little bit different: \\index{geofacet!facet\\_geo} \\index{geofacet!facet\\_geo}\n\n* We need to specify which grid layout we want to use. You can use the `get_grid_names()` function in {geofacet} to get a list of all of the valid grid names. They are named sensibly based on what region the grid is for e.g. `\"us_state_grid1\"` and `\"eu_grid1\"`. Here, we'll use `\"us_state_grid2\"`. \n\n* In order to map the data to the correct facet position on the grid, one of the columns in the data must align with the value in the `code` column of your chosen grid. In the `\"us_state_grid2\"` grid, the `code` column contains the two letter state abbreviations which matches the `state_po` column in our data. If you didn't have the two letter abbreviations, you may need to do so data joining to attach them.\n\nIf you have additional *states* (e.g. Puerto Rico can sometimes be listed in a US state column even though it isn't) or are missing some states, you can still use `geo_facet()`. However, it will only plot states listed in the facet grid, and you may get a warning message.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(geofacet)\nmap_plot <- basic_plot +\n  geofacet::facet_geo(\n    ~state_po,\n    grid = \"us_state_grid2\"\n  )\nmap_plot\n```\n\n::: {.cell-output-display}\n![Plot](us-elections_files/figure-pdf/fig-elections-geofacet-plot-1.pdf){#fig-elections-geofacet-plot fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\nWe still have the same problem of not being able to see the details of the chart as there are so many, but you can see from just the facet titles, that the plots are now arranged in a grid that resembles the USA. \n\n## Advanced styling\n\nWe'll now style our charts to apply more intuitive colors, adjust the facet labels to allow the charts to be seen more easily, and create a custom legend that explains how to read this chart.\n\n### Colors\n\nIn the USA, the Republican party is represented by the color red and the Democrat party by blue. As we discussed in @sec-lemurs, when choosing which colors to use for well-known categories, it's important not to play into negative stereotypes (e.g. pink for girls). But it's also important to use what is intuitive. Since these are colors that the parties have chosen to represent themselves, and because they are so well recognized, we'll stick to red and blue. \n\nother colors\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblue_col <- \"#0015BC\"\nred_col <- \"#C41E3A\"\nother_col <- \"#AAAAAA\"\ntext_col <- \"#202A44\"\nbg_col <- \"#FAFAFA\"\n```\n:::\n\n\n\n\n\n\n\\index{ggplot2!scale\\_fill\\_manual}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_plot <- map_plot +\n  scale_fill_manual(\n    values = c(\n      \"Democrat\" = blue_col,\n      \"Republican\" = red_col,\n      \"Other\" = other_col\n    )\n  )\n```\n:::\n\n\n\n\n\n\n\\index{ggplot2!scale\\_fill\\_manual}\n\n### Text and fonts\n\n{sysfonts}\\index{sysfonts}\n{showtext}\\index{showtext}\n\n\\index{sysfonts!font\\_add\\_google}\n\\index{showtext!showtext\\_auto}\n\\index{showtext!showtext\\_opts}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsysfonts::font_add_google(\n  name = \"Roboto\", family = \"roboto\"\n)\nsysfonts::font_add_google(\n  name = \"Carter One\", family = \"carter\"\n)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font <- \"roboto\"\ntitle_font <- \"carter\"\n```\n:::\n\n\n\n\n\n\n\n\\index{glue!glue}\n\\index{base!paste0}\n\nAs in @sec-time-zones, we'll add the information about the source of the data on a new line at the end of subtitle, rather than in the caption. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle <- \"US House Election Results\"\nst <- glue::glue(\"Areas indicate the percentage of votes for <span style='color:{blue_col};'>Democrat</span>, <span style='color:{red_col};'>Republican</span>, and <span style='color:#aaaaaa;'>Other</span> parties in general elections between 1976 and 2022.<br><br>**Data**: U.S. House 1976–2022. MIT Election Data and Science Lab.\")\n```\n:::\n\n\n\n\n\n\nWe also define our `social_caption()` using the function we defined in @sec-cats: \\index{social\\_caption}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsocial <- social_caption(\n  icon_color = blue_col,\n  font_color = text_col,\n  font_family = body_font\n)\n```\n:::\n\n\n\n\n\n\nWe then pass our title, subtitle, and caption text intp the `labs()` function to add it to our plot. Since we want to position the subtitle text in an unusual place, we use the `tag` argument rather than `subtitle`, similar to what we did in @sec-time-zones. \\index{ggplot2!labs} \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext_plot <- col_plot +\n  labs(\n    title = title,\n    tag = st,\n    caption = social\n  )\n```\n:::\n\n\n\n\n\n\n\n### Adjusting themes\n\n\\index{ggplot2!geom\\_text} \\index{ggplot2!coord\\_cartesian}\n\\index{ggplot2!aes} \\index{ggplot2!alpha}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstyled_plot_1 <- text_plot +\n  geom_text(\n    mapping = aes(\n      x = mean(range(year)),\n      y = 0.5,\n      label = state_po\n    ),\n    family = title_font,\n    color = alpha(bg_col, 0.5),\n    size = 2.5\n  ) +\n  coord_cartesian(expand = FALSE)\n```\n:::\n\n\n\n\n\n\n\\index{ggplot2!theme\\_void}\n\n\\index{ggplot2!theme} \\index{ggplot2!element\\_rect} \\index{ggplot2!margin}\n\\index{ggplot2!element\\_blank} \\index{ggtext!element\\_textbox\\_simple}\n\\index{ggplot2!unit} \\index{ggplot2!rel}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstyled_plot_2 <- styled_plot_1 +\n  theme_void(base_size = 6, base_family = body_font) +\n  theme(\n    plot.background = element_rect(\n      fill = bg_col,\n      color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col,\n      color = bg_col\n    ),\n    plot.margin = margin(5, 5, 5, 125),\n    legend.position = \"none\",\n    plot.title = ggtext::element_textbox_simple(\n      hjust = -0.94,\n      halign = -0.94,\n      color = text_col,\n      face = \"bold\",\n      family = title_font,\n      size = rel(1.4)\n    ),\n    plot.tag = ggtext::element_textbox_simple(\n      hjust = 0,\n      color = text_col,\n      maxwidth = 0.65,\n      lineheight = 0.6,\n      size = rel(1.0)\n    ),\n    plot.caption = ggtext::element_textbox_simple(\n      hjust = 1,\n      halign = 1,\n      color = text_col,\n      maxwidth = 0.65,\n      margin = margin(b = 0, t = 10)\n    ),\n    strip.background = element_blank(),\n    strip.text = element_blank(),\n    panel.spacing = unit(0.05, \"lines\"),\n    plot.tag.position = c(-0.51, 0.74)\n  )\nstyled_plot_2\n```\n\n::: {.cell-output-display}\n![Plot](us-elections_files/figure-pdf/fig-elections-plot-style-2-1.pdf){#fig-elections-plot-style-2 fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n\n### Legend\n\nAs we did in @sec-time-zones, we'll design a custom legend. In @sec-time-zones, we used a bar chart as a legend which also served as another source of information in the visualization. In this chapter, our custom legend will instead serve as a *how to read this chart* explainer.\n\nWe can take one of the facets, enlarge it, and add annotations to explain what data is shown on the chart. To keep the main chart looking clean, we don't currently have any axes titles or labels. For example, it's not immediately clear what years are covered by the data. This doesn't need added to every chart, but should be annotated on the legend. To increase the accessibility of the chart, and to make sure we don't rely on color alone as discussed in @sec-lemurs, we'll also add direct labels to identify the *Democrat* and *Republican* areas on the chart.\n\nLet's start by filtering the data, to select only a single state. It doesn't really matter which one we choose, although ideally one that has enough space for us to add the party labels directly on the chart. Here, we'll use California (`\"CA\"`) for the legend plot. \\index{dplyr!filter}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nca_data <- dplyr::filter(plot_data, state_po == \"CA\")\n```\n:::\n\n\n\n\n\n\ndirect labeling as discusses \n\\index{ggplot2!ggplot} \\index{ggplot2!aes}\n\\index{ggplot2!geom\\_area}\n\\index{ggplot2!geom\\_text}\n\\index{ggplot2!scale\\_fill\\_manual}\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nca_plot <- ggplot(data = ca_data) +\n  geom_area(\n    mapping = aes(\n      x = year,\n      y = votes,\n      fill = party\n    ),\n    position = \"fill\"\n  ) +\n  # label for state\n  geom_text(\n    mapping = aes(\n      x = mean(range(year)),\n      y = 0.5,\n      label = state_po\n    ),\n    family = title_font,\n    color = alpha(bg_col, 0.7),\n    size = 4\n  ) +\n  # colors\n  scale_fill_manual(\n    values = c(\n      \"Democrat\" = blue_col,\n      \"Republican\" = red_col,\n      \"Other\" = other_col\n    ),\n    guide = \"none\"\n  )\n```\n:::\n\n\n\n\n\n\nWe then use the `annotate()` function to add: \\index{ggplot2!annotate}\n\n* Two labels for the start and end year of the data. To keep these within the bounds of the plot, we left align the start label on the left, and right align the end label on the right. \n\n* Two labels for the *Republican* and *Democrat* parties. We leave the *Other* category unlabeled as it's very small, and it's obviously the only category left over. \n\nAs in the main plot, we also set `expand = FALSE` inside `coord_cartesian()` to remove the additional space around the edges. We also use `theme_void()` to remove any additional chart elements, since the annotations convey all the necessary information. \\index{ggplot2!coord\\_cartesian} \\index{ggplot2!theme\\_void}\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_inset <- ca_plot +\n  # year labels\n  annotate(\n    geom = \"text\",\n    x = min(ca_data$year),\n    y = 0.1,\n    label = min(ca_data$year),\n    family = body_font,\n    color = bg_col,\n    size = 3,\n    hjust = 0\n  ) +\n  annotate(\n    geom = \"text\",\n    x = max(ca_data$year),\n    y = 0.1,\n    label = max(ca_data$year),\n    family = body_font,\n    color = bg_col,\n    size = 3,\n    hjust = 1\n  ) +\n  # Party labels\n  annotate(\n    geom = \"text\",\n    x = mean(range(ca_data$year)),\n    y = 0.8,\n    label = \"Democrat\",\n    family = body_font,\n    color = bg_col,\n    size = 3.5\n  ) +\n  annotate(\n    geom = \"text\",\n    x = mean(range(ca_data$year)),\n    y = 0.2,\n    label = \"Republican\",\n    family = body_font,\n    color = bg_col,\n    size = 3.5\n  ) +\n  coord_cartesian(expand = FALSE) +\n  theme_void()\np_inset\n```\n\n::: {.cell-output-display}\n![A custom legend plot consisting of a zoomed in version of the California facet with additional annotations indicating the time period and categories represented by different colors.](us-elections_files/figure-pdf/fig-elections-inset-plot-1.pdf){#fig-elections-inset-plot fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n### Joining with {patchwork}\n\nNow, the last step is to join together our custom legend with the main plot. We've already left some blank space on the main plot for the legend to go in, so we'll use the `inset_element()` function from {patchwork} [@patchwork] as we did in @sec-time-zones. \\index{patchwork} \\index{patchwork!inset\\_element}\n\n\n\n\n\n\\index{ggplot2!theme} \\index{ggplot2!element\\_rect}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\nstyled_plot_2 + inset_element(\n  p = p_inset,\n  left = 0.027,\n  bottom = 0.087,\n  right = 0.287,\n  top = 0.55,\n  align_to = \"full\",\n  clip = FALSE\n) +\n  theme(\n    plot.background = element_rect(\n      fill = bg_col,\n      color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col,\n      color = bg_col\n    )\n  )\n```\n\n::: {.cell-output-display}\n![Plot](us-elections_files/figure-pdf/fig-combine-plots-1.pdf){#fig-combine-plots fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n\n## Reflection\n\n* Other category\n\n* prcent\n\n::: {.content-visible when-format=\"html\"}\n\nEach plot created during the process of developing the original version of this visualization was captured using {camcorder}, and is shown in the gif below. If you'd like to learn more about how {camcorder} can be used in the data visualization process, see @sec-camcorder.\n\n![](images/elections.gif){fig-align=\"center\"}\n\n:::\n\n## Exercises\n\n::: {.callout-caution}\n\nExercises are coming soon!\n\n:::\n",
    "supporting": [
      "us-elections_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}