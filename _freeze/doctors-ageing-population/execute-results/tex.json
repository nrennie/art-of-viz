{
  "hash": "15376176246e92e4a6e556d8140a3fc0",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfig-width: 5\nfig-asp: 0.67\nfig-align: center\nfig-dpi: 300\nfilters:\n  - line-highlight\nexecute: \n  freeze: auto\n---\n\n\n\n# Doctors in an ageing population: making maps with {ggplot2} {#doctors}\n\nIn this chapter we'll learn how to identify open data sources, make maps with {ggplot2} using data from the {maps} package, and create title panels with an unorthodox use of facets.\n\n## Data \n\n* Bring your own data\n\n\\#TidyTuesday\\index{TidyTuesday} [@tidytuesday]\n\n\n* Common data sources\n\n* Doctors data\n\n\n\nThe ... comes from Our World in Data [@doctors_data]\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndoctors <- readr::read_csv(\"data/doctors.csv\")\n```\n:::\n\n\n\n\\index{readr!read\\_csv}\n\n## Exploratory work\n\n### Data exploration\n\nwhat does data look like\n\n### Exploratory sketches\n\n## Preparing a plot\n\n### Data wrangling\n\nSince this data is already fairly tidy, there isn't too much data wrangling to be done. The only processing we really need to do is getting rid of the data we don't need, and renaming a couple of columns to make them easier to work with. We can use the `rename()` function from {dplyr} to rename the `entity` column to `region` (for reasons that will become clear in the next paragraph!). We also rename the `Physicians (per 1,000 people)` column to `doctors` to make it easier to work with. The data has multiple entries for each country, spanning different years. We *could* make an animated map to show how the number of doctors is changing over time, but for now we'll keep it simple with a static map showing a snapshot at one point in time. However, there's a bit of a problem. If you inspect the data, you'll see that not every country has an entry for each year - let's use the most recent data available for each country. For each `region`, we keep the row with only the most recent year using a combination of `group_by()`\\index{dplyr!group\\_by} and `slice_max()`\\index{dplyr!slice\\_max} from {dplyr}.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndoctors <- doctors |>\n  dplyr::rename(\n    region = entity,\n    doctors = `Physicians (per 1,000 people)`) |>\n  dplyr::select(region, year, doctors) |>\n  dplyr::group_by(region) |>\n  dplyr::slice_max(year) |>\n  dplyr::ungroup()\n```\n:::\n\n\n\nTo plot this data on a world map, we also need data for the country borders. Luckily, the `map_data()` function built into {ggplot2}\\index{ggplot2!map\\_data} can help us with that! This function takes data from the {maps} package\\index{maps} and turns it into an object you can plot directly with {ggplot2}.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nworld <- map_data(\"world\")\n```\n:::\n\n\n\nOf course, it's never quite that straightforward. We need to join the `world` map data to our `doctors` data, and to do that we need a column in each data sets to join by - we'll use the `region` column. If you try to join these two data sets using the `region` column, you'll notice that you end up with some unexpected `NA` values. So what's going on?\n\n> You don't need to rename columns in your data to be able to join them, but for this example, I found it a little bit easier to work with the data after renaming `entity` to `region`.\n\nThere are two issues here. Firstly, there are more regions in the `world` data than there are in the `doctors` data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(unique(world$region))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 252\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(unique(doctors$region))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 221\n```\n\n\n:::\n:::\n\n\n\nIf you go ahead and inspect the country names, you'll see that for some countries, they are encoded differently. For example, in the `world` data, the United States is listed as `\"USA\"` whilst in the `doctors` data, it's listed as `\"United States\"`. Here, the easiest thing to do is manually rename the values that differ in one of the datasets. We can use the `recode()` function from {dplyr} to do that.\\index{dplyr!recode} Note that `recode()` has the rather unusual (for the {tidyverse}) syntax of `old_name = new_name`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data <- doctors |>\n  dplyr::mutate(\n    region =\n      dplyr::recode(region,\n        \"United Kingdom\" = \"UK\",\n        \"United States\" = \"USA\",\n        \"Congo, Dem. Rep.\" = \"Democratic Republic of the Congo\",\n        \"Cote d'Ivoire\" = \"Ivory Coast\",\n        \"Congo, Rep.\" = \"Republic of Congo\")\n  )\n```\n:::\n\n\n\n\\index{dplyr!left\\_join} and filter out Antarctica \\index{dplyr!filter}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_data <- dplyr::left_join(world, plot_data, by = \"region\") |>\n  dplyr::filter(region != \"Antarctica\")\n```\n:::\n\n\n\n\n### The first plot\n\n\\index{ggplot2!geom\\_map}\n\n\\index{map}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot <- ggplot(\n  data = map_data,\n  mapping = aes(\n    long,\n    lat,\n    map_id = region,\n    fill = doctors)) +\n  geom_map(map = map_data)\nbase_plot\n```\n\n::: {.cell-output-display}\n![Map of the world with countries colored based on number of doctors per 1,000 people. The map looks stretched.](doctors-ageing-population_files/figure-pdf/fig-doctors-basic-plot-1-1.pdf){#fig-doctors-basic-plot-1 fig-pos='H'}\n:::\n:::\n\n\n\n## Advanced styling\n\n### Colors\n\n\\index{MetBrewer}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MetBrewer)\ncol_palette <- met.brewer(\"Hokusai2\", n = 20)\ntext_col <- col_palette[18]\nhighlight_col <- col_palette[15]\nbg_col <- \"#EADEDA\"\n```\n:::\n\n\n\n\\index{ggplot2!scale\\_fill\\_gradientn}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_plot <- base_plot +\n  scale_fill_gradientn(\n    colors = col_palette,\n    limits = c(0, 10),\n    breaks = c(0.5, 9.5),\n    labels = c(\"Fewer doctors\", \"More doctors\")) +\n  guides(fill = guide_colorbar(ticks = FALSE))\ncol_plot\n```\n\n::: {.cell-output-display}\n![Map of the world with countries colored based on number of doctors per 1,000 people, showing a different color scheme.](doctors-ageing-population_files/figure-pdf/fig-doctors-style-plot-1-1.pdf){#fig-doctors-style-plot-1 fig-pos='H'}\n:::\n:::\n\n\n\n### Text and fonts\n\n{sysfonts}\\index{sysfonts}\n{showtext}\\index{showtext}\n\n\\index{sysfonts!font\\_add\\_google}\n\\index{showtext!showtext\\_auto}\n\\index{showtext!showtext\\_opts}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsysfonts::font_add_google(name = \"Roboto\", family = \"roboto\")\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font <- \"roboto\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle <- \"Doctors in an ageing population\"\nst <- \"This map show the number of doctors per thousand people, rescaled by the percentage of the population aged over 70, revealing which countries* may be more likely to struggle in providing care for an elderly population.<br> using most recent available data for each country.\"\ncap <- \"**Data**: Our World in Data | **Graphic**: N. Rennie\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntext_plot <- col_plot +\n  labs(title = title, subtitle = st, caption = cap)\n```\n:::\n\n\n\n### Adjusting themes\n\n\\index{ggtext!element\\_textbox\\_simple}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggtext)\ntext_plot +\n  theme_void(base_size = 8, base_family = body_font) +\n  theme(\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col),\n    plot.title = element_textbox_simple(\n      color = text_col),\n    plot.subtitle = element_textbox_simple(\n      color = text_col),\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col)\n  )\n```\n\n::: {.cell-output-display}\n![Map of the world with countries colored based on number of doctors per 1,000 people. Styling ...](doctors-ageing-population_files/figure-pdf/fig-doctors-style-plot-3-1.pdf){#fig-doctors-style-plot-3 fig-pos='H'}\n:::\n:::\n\n\n\n\nBox for title facets\n\n\\index{ggplot2!facet\\_wrap}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_data$label <- title\n```\n:::\n\n\n\nWhile we're here, let's lines of map same color as bg and a little bit thinner\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstyled_plot <- ggplot(\n  data = map_data,\n  mapping = aes(\n    long,\n    lat,\n    map_id = region,\n    fill = doctors)) +\n  geom_map(\n    map = map_data,\n    color = bg_col,\n    linewidth = 0.5) +\n  scale_fill_gradientn(\n    colors = col_palette,\n    limits = c(0, 10),\n    breaks = c(0.5, 9.5),\n    labels = c(\"Fewer doctors\", \"More doctors\")) +\n  guides(fill = guide_colorbar(ticks = FALSE)) +\n  labs(title = title, subtitle = st, caption = cap) +\n  facet_wrap(~label) +\n  theme_void(base_size = 8, base_family = body_font) +\n  theme(\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col),\n    plot.title = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5),\n    plot.subtitle = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5),\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col,\n      lineheight = 0.5),\n    strip.background = element_rect(\n      fill = highlight_col, color = highlight_col)\n  )\nstyled_plot\n```\n\n::: {.cell-output-display}\n![caption](doctors-ageing-population_files/figure-pdf/fig-doctors-style-plot-4-1.pdf){#fig-doctors-style-plot-4 fig-pos='H'}\n:::\n:::\n\n\n\nmove subtitle text \n\n::: {.callout-note icon=false appearance=\"simple\"}\n\nNote `legend.position.inside` used to be `legend.position` before ggplot2 3.5.0\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstyled_plot +\n  labs(\n    subtitle = NULL, tag = st\n  ) +\n  theme(\n    # move and format the tag (subtitle) text\n    plot.tag.position = c(0.03, 0.78),\n    plot.tag = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5,\n      hjust = 0\n    ),\n    # change title text color\n    plot.title = element_textbox_simple(\n      color = bg_col,\n      lineheight = 0.5\n    ),\n    # style the legend\n    legend.text = element_text(\n      color = text_col,\n      lineheight = 0.5,\n      hjust = 0.5\n    ),\n    legend.key.width = unit(2, \"cm\"),\n    legend.key.height = unit(0.3, \"cm\"),\n    legend.position.inside = c(0.645, -0.005),\n    legend.title = element_blank(),\n    legend.direction = \"horizontal\",\n    plot.margin = margin(0, 0, 10, 0)\n  )\n```\n\n::: {.cell-output-display}\n![caption](doctors-ageing-population_files/figure-pdf/fig-doctors-style-plot-5-1.pdf){#fig-doctors-style-plot-5 fig-pos='H'}\n:::\n:::\n\n\n\n\n## Reflection\n\n> Note: ℹ The package \"mapproj\" is required for `coord_map()`.\n✖ Would you like to install it?\n\n1: Yes\n2: No\n\nWhen the original plot of this data was created, it plotted the number of doctors per 1,000 people over the age of 70 and the colours were based on the log of this value. The raw values on the colour scale were hard to interpret, so the choice was made to use *Fewer doctors* and *More doctors* labels instead. For this version, where the underlying data is simpler and easier to ... \n\nWhen we were processing the data, we made the choice to plot a map showing the values for the most recently available data. That means that for some countries the data is more recent (and therefore perhaps more reliable), whilst for others it's much older. In fact, running `range(doctors$year)` shows that the most recent data in the plot is from 2019, whilst the oldest is from 1980 - a gap of almost 40 years! That makes it much harder to accurately compare between countries, and there's no indication for each country on this map how recent the data is. Showing uncertainty on maps is tricky, ... perhaps setting the colours ... above or below average, with the intensity ... . Or at least a more detailed \n\n::: {.content-visible when-format=\"html\"}\n\nEach plot created during the process of developing the original version of this visualisation was captured using {camcorder}, and is shown in the gif below. If you'd like to learn more about how {camcorder} can be used in the data visualisation process, have a read at @camcorder.\n\n![](images/doctors.gif){fig-align=\"center\"}\n\n:::\n",
    "supporting": [
      "doctors-ageing-population_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}