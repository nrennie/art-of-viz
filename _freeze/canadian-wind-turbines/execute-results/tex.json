{
  "hash": "5c9b885d993969dc08b47491ee727804",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfilters:\n  - line-highlight\nexecute: \n  freeze: auto\nfig-width: 5\nfig-asp: 0.75\n---\n\n::: {.cell}\n\n:::\n\n\n\n# Canadian Wind Turbines: waffle plots, pictograms, and icons {#sec-turbines}\n\nIn this chapter, we'll learn how to read in data from an Excel file via a URL, create waffle plots using the {waffle} package, and write a subtitle with colored text to be used as an alternative to a traditional legend.\n\n## Data\n\nBack in October 2020, data on wind turbines in Canada from the Government of Canada Open Data portal was used as a [TidyTuesday dataset](https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-10-27) [@tidytuesday]. The Canadian Wind Turbine Database provides information about wind turbines installed in Canada, including their power capacity and geographic location [@turbines_data]. Rather than reading in the data using the {tidytuesdayR} package as we've done in previous chapters, let's read in the data directly from the [open.canada.ca](https://open.canada.ca/en) website.\n\n::: {#tip-turbines-open .callout-tip}\n\n## Open Government data in Canada\n\nThe Canadian Wind Turbine data contains information licensed under the [Open Government Licence - Canada](https://open.canada.ca/en/open-government-licence-canada).\n\nYou can search for more open data at [search.open.canada.ca/opendata](https://search.open.canada.ca/opendata/). \n\n:::\n\n### Reading data with {openxlsx}\n\nThough the {readxl} package [@readxl] package can be used to read Excel files stored locally, it doesn't work for reading in Excel files directly from a URL. We could visit the relevant [open.canada.ca/data/dataset](https://open.canada.ca/data/dataset/) website, manually download the file, and then read it in using {readxl}. Alternatively, we can use the {openxlsx} package [@openxlsx] which allows us to pass in a URL.\n\nOf course, we still need to know what the URL of this file is. If you visit the following webpage for the wind turbines data ([open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070](https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070)), and right-click on the link to the Excel file you can then copy the link address. We save that link address as a character string called `url`.\n\nWe then use the `read.xlsx()` function from {openxlsx}, where we pass in the `url` variable to the `xlsxFile` argument: \\index{openxlsx!read.xlsx} \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://ftp.cartes.canada.ca/pub/nrcan_rncan/Wind-energy_Energie-eolienne/wind_turbines_database/Wind_Turbine_Database_FGP.xlsx\"\nwind_turbines <- openxlsx::read.xlsx(xlsxFile = url)\n```\n:::\n\n\n\n::: {#tip-turbines-excel .callout-tip}\n\n## Processing Excel files\n\nThere are some features of Excel files that can make them more human-friendly but less computer-friendly:\n\n* **Multiple sheets**: Excel files may contain multiple sheets of data. You can use the `sheet` argument in `read.xlsx()` to specify the name or index of the sheet you want to read in. Using the sheet name is usually a little bit more robust, as it means your code can withstand (accidental) changes to the order of sheets.\n\n* **Empty rows**: The `read.xlsx()` function always skips empty rows at the start of the file. However, sometimes the author of the spreadsheet may add a title row then a few empty rows before the *real* data begins. You can use the `startRow` argument to specify which rows the data actually starts on.\n\n* **Merged cells**: Merged cells are hard to deal with because it means your data no longer fits into a nice rectangular structure. It depends on where the merged cells are, and what they contain, how difficult they are to deal with. If they're at the top of the file (e.g. with the title information) then using `startRow` might be enough. Otherwise, setting `fillMergedCells = TRUE` in `read.xlsx()` means that *the value in a merged cell is given to all cells within the merge* [@openxlsx].\n\n:::\n\nWe don't want to have to re-download the data from the URL each time we want to work on it (especially if the data may be updated), so let's save a copy locally. We could simply save the Excel file (or we could have used `download.file()` instead of `read_csv()`). However, it would be better to save it as a CSV files instead because they smaller in size, and can be opened in a simple text editor. Luckily the `wind_turbines` data is well formatted - there are no merged cells, multiple sheets, or empty rows we need to deal with. This means we can save it as a CSV file using `write.csv()` using an appropriate file name (and setting `row.names = FALSE` to avoid adding an additional column of row names). \\index{utils!write.csv}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(wind_turbines, \"data/wind_turbines.csv\", row.names = FALSE)\n```\n:::\n\n\n\nWe can then use either `read.csv()` or `read_csv()` from {readr} to read the CSV file back in: \\index{readr!read\\_csv}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwind_turbines <- readr::read_csv(\"data/wind_turbines.csv\")\n```\n:::\n\n\n\nThe `wind_turbines` data has 6698 rows and 15 columns. The first few rows of the data are as follows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(wind_turbines)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 15\n  OBJECTID `Province/Territory`\n     <dbl> <chr>               \n1        1 Alberta             \n2        2 Alberta             \n3        3 Alberta             \n4        4 Alberta             \n5        5 Alberta             \n6        6 Alberta             \n# i 13 more variables:\n#   Project.name <chr>,\n#   `Total.project.capacity.(MW)` <dbl>,\n#   Turbine.identifier <chr>,\n#   Turbine.number.in.project <chr>,\n#   `Turbine.rated.capacity.(kW)` <chr>,\n#   `Rotor.diameter.(m)` <dbl>, ...\n```\n\n\n:::\n:::\n\n\n\nThe `OBJECTID` column is a unique row identifier. The data has a row for each wind turbine - with some of the data given on the turbine level and some data on the project level. For the variables related to project level data, this means values can be repeated multiple times within a column for turbines in the same project.\n\nThe `Province/Territory` column specifies which geographic region the turbine is in, with the `Latitude` and `Longitude` column giving the exact coordinates. The `Project.name` gives the name of the project that each wind turbine is associated with, and `Total.project.capacity.(MW)` the total power capacity of the project in megawatts. The `Turbine.identifier` column gives a unique ID for each turbine - it is a combination of an abbreviation of the project name, and a number identifying the number of the turbine within the project (also listed in the `Turbine.number.in.project` as a fraction of the total number of turbines per project). The capacity (in kilowatts) of each individual turbine is given in `Turbine.rated.capacity.(kW)` (adding up the individual capacities for all turbines in a project gives the value in `Total.project.capacity.(MW)` multiplied by 100).\n\nThe rotor diameter and hub height of each turbine are given by `Rotor.diameter.(m)` and `Hub.height.(m)`, respectively. The manufacturer and model are also given by the `Manufacturer` and `Model` columns. The commissioning date is given in the `Commissioning.date` column - it appears that some may be given on the project level, whereas others vary for turbines within a project. The `Notes` column contains free text data with additional information for some turbines. Most of these values are empty, but the column may provide information about whether the capacity of turbines have changed or assumptions about how values were calculated.\n\n## Exploratory work\n\nWhat are we looking at?\n\nWe might also want to look at the spatial distribution of turbines across Canada since we have the geographic coordinates - we'll look at plotting spatial data a little bit later in @sec-doctors, @sec-time-zones, and @sec-house.\n\n### Data exploration\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  wind_turbines$`Rotor.diameter.(m)`,\n  as.numeric(wind_turbines$`Turbine.rated.capacity.(kW)`),\n  xlab = \"Rotor diameter (m)\",\n  ylab = \"Turbine rated capacity (kW)\"\n)\n```\n\n::: {.cell-output-display}\n![Plot](canadian-wind-turbines_files/figure-pdf/fig-turbines-scatter-1.pdf){#fig-turbines-scatter fig-pos='H'}\n:::\n:::\n\n\n\nSome of the `\"1903/2126/2221\"`. many of the same value hard to see on this plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(\n  sort(table(wind_turbines$`Province/Territory`)),\n  # make labels smaller so they fit on the page\n  cex.axis = 0.5,\n  cex.names = 0.5,\n  las = 1,\n  horiz = TRUE\n)\n```\n\n::: {.cell-output-display}\n![Ordered bar chart showing the number of wind turbines commissioned in each province or territory.](canadian-wind-turbines_files/figure-pdf/fig-turbines-barplot-1.pdf){#fig-turbines-barplot fig-pos='H'}\n:::\n:::\n\n\n\n### Exploratory sketches\n\n![Initial sketch of a faceted area charts showing packages use over time](images/sketch-turbines.png){#fig-packages-sketch-1 fig-align=\"center\"}\n\n## Preparing a plot\n\n### Data wrangling\n\n\n\\index{dplyr!if\\_else} \\index{stringr!str\\_detect} \\index{stringr!str\\_match}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_after_last_slash <- function(texts) {\n  has_slash <- stringr::str_detect(texts, \"/\")\n  extracted <- stringr::str_match(texts, \".*/(.*)$\")[, 2]\n  output <- dplyr::if_else(has_slash, extracted, texts)\n  return(output)\n}\n```\n:::\n\n\n\n\\index{dplyr!select} \\index{base!as.numeric}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nturbines_year <- wind_turbines |>\n  dplyr::select(`Province/Territory`, Commissioning.date) |>\n  dplyr::mutate(\n    Year = extract_after_last_slash(Commissioning.date),\n    Year = as.numeric(Year)\n  )\n```\n:::\n\n\n\n\\index{dplyr!filter} \\index{dplyr!mutate} \\index{dplyr!case\\_when} \\index{base!factor}\n\nWe're going to make four categories\nWe start by filtering out any years that fall outside \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nturbines_year_group <- turbines_year |>\n  dplyr::filter(Year >= 2000 & Year <= 2019) |>\n  dplyr::mutate(\n    Year_Group = dplyr::case_when(\n      Year %in% seq(2000, 2004) ~ \"2000 - 2004\",\n      Year %in% seq(2005, 2009) ~ \"2005 - 2009\",\n      Year %in% seq(2010, 2014) ~ \"2010 - 2014\",\n      Year %in% seq(2015, 2019) ~ \"2015 - 2019\"\n    )\n  ) |>\n  dplyr::mutate(\n    Year_Group = factor(Year_Group, levels = c(\n      \"2000 - 2004\", \"2005 - 2009\", \"2010 - 2014\", \"2015 - 2019\"\n    ))\n  )\n```\n:::\n\n\n\n\\index{dplyr!rename} \\index{dplyr!mutate} \\index{dplyr!case\\_when} \\index{dplyr!count} \\index{dplyr!filter}\n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nturbines_area <- turbines_year_group |>\n  dplyr::rename(Area = `Province/Territory`) |>\n  dplyr::mutate(\n    Area = dplyr::case_when(\n      Area %in% c(\n        \"Northwest Territories\",\n        \"Newfoundland and Labrador\",\n        \"Prince Edward Island\",\n        \"New Brunswick\",\n        \"Manitoba\",\n        \"Saskatchewan\"\n      ) ~ \"other\",\n      TRUE ~ Area\n    )\n  ) |>\n  dplyr::count(Area, Year_Group) |>\n  dplyr::mutate(n = round(n / 20)) |>\n  dplyr::filter(n != 0)\n```\n:::\n\n\n\n\\index{dplyr!summarise} \\index{dplyr!arrange} \\index{dplyr!filter} \\index{dplyr!pull} \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narea_levels <- c(turbines_area |>\n  dplyr::summarise(n = sum(n), .by = Area) |>\n  dplyr::arrange(-n) |>\n  dplyr::filter(Area != \"other\") |>\n  dplyr::pull(Area), \"other\")\n```\n:::\n\n\n\nwaffle order based on order in data\n\n\\index{base!factor}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data <- turbines_area |> \n  dplyr::mutate(Area = factor(Area, levels = area_levels)) |> \n  dplyr::arrange(Area)\n```\n:::\n\n\n\n### Installing Font Awesome fonts\n\nfont awesome ref\n\nadd instructions about installing system through waffle, where to download\n\n\\index{sysfonts!font\\_add} \\index{showtext!showtext\\_auto} \\index{showtext!showtext\\_opts}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsysfonts::font_add(\n  family = \"Font Awesome 6\",\n  regular = \"fonts/Font-Awesome-6-Free-Solid-900.otf\"\n)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\n```\n:::\n\n\n\n\n### The first plot with {waffle}\n\n[@waffle]\n\n\\index{ggplot2!ggplot} \\index{ggplot2!aes} \\index{ggplot2!facet\\_wrap}\n\\index{waffle!geom\\_pictogram}\n\nalthough usually horizontal usually esaier to read,\nalso most common to put date on x-axis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nbase_plot <- ggplot(data = plot_data) +\n  waffle::geom_pictogram(\n    mapping = aes(\n      label = Area,\n      colour = Area,\n      values = n\n    ),\n    flip = TRUE,\n    n_rows = 10,\n    size = 3,\n    family = \"Font Awesome 6\"\n  ) +\n  facet_wrap(~Year_Group, nrow = 1, strip.position = \"bottom\")\nbase_plot\n```\n\n::: {.cell-output-display}\n![Plot](canadian-wind-turbines_files/figure-pdf/fig-turbines-base-plot-1.pdf){#fig-turbines-base-plot fig-pos='H'}\n:::\n:::\n\n\n\nturbine icons not free\n\n\\index{waffle!scale\\_label\\_pictogram}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nicons_plot <- base_plot +\n  waffle::scale_label_pictogram(\n    name = NULL,\n    values = c(\"fan\", \"fan\", \"fan\", \"fan\", \"fan\", \"fan\"),\n    guide = \"none\"\n  )\nicons_plot\n```\n\n::: {.cell-output-display}\n![Plot](canadian-wind-turbines_files/figure-pdf/fig-turbines-icons-plot-1.pdf){#fig-turbines-icons-plot fig-pos='H'}\n:::\n:::\n\n\n\n(alternatively, you can later set `theme(legend.position = \"none\")` as we did )\n\n## Advanced styling\n\n### Colors with {rcartocolor}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbg_col <- \"#fafafa\"\ntext_col <- \"black\"\n```\n:::\n\n\n\nLet's also define a color palette that we'll use for the color of the icons. We're looking for 6 different colors - one for area. The {rcartocolor} [@rcartocolor] package provides access to the [CARTOColors](https://carto.com/carto-colors/) color palettes for maps designed by [CARTO](https://carto.com/) [@cartocolors]. Although these palettes were primarily designed for coloring maps, the color palettes are also very effective for other types of graphics. \n\nIn the {rcartocolor} package, categorical palettes are referred to as *qualitative* palettes. We can see all available qualitative palettes with a sufficient number of colors using `display_carto_all()`: \\index{rcartocolor!display\\_carto\\_all}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrcartocolor::display_carto_all(\n  n = 6, type = \"qualitative\"\n)\n```\n\n::: {.cell-output-display}\n![All qualitative color palettes with at least 6 colors in the {rcartocolor} package.](canadian-wind-turbines_files/figure-pdf/fig-turbines-rcarto-1.pdf){#fig-turbines-rcarto fig-pos='H'}\n:::\n:::\n\n\n\nAlthough the {rcartocolor} package has the `scale_fill_carto_d()` which we could use directly in our plots, we'll still save the color palette as a vector of hex codes to allow us to re-use the colors more easily. As you can see in @fig-turbines-rcarto, in the qualitative palettes in the {rcartocolor} package, the last color is often a grey color. That's a great choice for representing missing data, but when we want different colors for categories it doesn't work as well. The trick is to ask for one more color than we need, and then throw away the last element in the color palette. We have 6 categories in our plot, so we ask for 7 colors using the `carto_pal()` function and then extract only the first 6. We'll use the `\"Vivid\"` palette here. \\index{rcartocolor!carto\\_pal}\n\nWe also make the `col_palette` vector a named vector by using the `names()` function, and using `area_levels` as the names. Although this isn't necessary for adding the colors to the plot, it will make it easier to extract the colors and ensure each color is mapped to the correct category label.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_palette <- rcartocolor::carto_pal(\n  n = length(unique(plot_data$Area)) + 1,\n  name = \"Vivid\"\n)[1:length(unique(plot_data$Area))]\nnames(col_palette) <- area_levels\n```\n:::\n\n\n\nWe can then pass this `col_palette` vector into `scale_color_manual()` to apply the colors to our plot. Since we'll be using colored text instead of a traditional legend, we set `guide = \"none\"` to remove the legend again. \\index{ggplot2!scale\\_color\\_manual}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_plot <- icons_plot +\n  scale_color_manual(\n    values = col_palette,\n    guide = \"none\"\n  )\n```\n:::\n\n\n\n### Adding styled text with {marquee}\n\nWe've already seen in @sec-programming and @sec-museums how to format the title or subtitle text to be bold using the `face = \"bold\"` argument inside `theme()` elements. But what if we want to make only *part* of the text bold? We can use the {marquee} package [@marquee] to add styling to text within in a string. The {marquee} package allows you to use Markdown syntax in text when you're making graphics in R, including in plots built with {ggplot2} or other graphics built on {grid}. \\index{marquee}\n\nIn Markdown, to make text bold, you enclose it inside two pairs of asterisks e.g. `**bold text**`. For example, if we wanted to put the entire title in bold font, we could write the title inside `**`. In the caption, we might want to embolden the words `Data` and `Graphic` to highlight that there are two different fields of information:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle <- \"**Canadian wind turbines are mostly found in Ontario**\"\ncap <- \"**Data**: Natural Resources Canada | **Graphic**: N. Rennie\"\n```\n:::\n\n\n\nThis type of formatting for the plot caption is something that we might like to re-use across multiple plots. And when we want to re-use code, it's almost always useful to make it into a function. Let's define a function called `source_caption()` which has three arguments:\n\n* `source`: a character string for the source of the data\n* `graphic`: a character string for the attribution of the visualization\n* `sep`: a character string for what should separate the two pieces of text, which has `\" | \"` as a default.\n\nWe then use `glue()` from {glue} to stick these three arguments together, and include the bold formatting using `**`. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource_caption <- function(source, graphic, sep = \" | \") {\n  caption <- glue::glue(\n    \"**Data**: {source}{sep}**Graphic**: {graphic}\"\n  )\n  return(caption)\n}\n```\n:::\n\n\n\nWe can construct the caption using our new `source_caption()` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncap <- source_caption(\n  source = \"Natural Resources Canada\",\n  graphic = \"N. Rennie\"\n)\ncap\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n**Data**: Natural Resources Canada | **Graphic**: N. Rennie\n```\n\n\n:::\n:::\n\n\n\nYou can see that it's identical to the one we manually created earlier. We'll also re-use the `source_caption()` function in later chapters.\n\nLet's move onto the subtitle. In this visualization, the subtitle will also be doubling as a legend as we'll use colored text to denote the different categories. In {marquee}, text can be colored by wrapping the text in curly brackets, where the first word is pre-fixed by a period and identifies the color of the text i.e. `{.color text to color}`. For example, `{.red This is red text.}`. \n\nWe want to add the colors and the text to be colored in a programmatic way. We'll use square brackets to subset the values and names stored in the `col_palette` vector. Here, `col_palette[[1]]` extracts the hex code for the color of the first category, and `names(col_palette)[[1]]` extracts the name of the first category.\n\nNormally, when we want to write character strings and insert variables into the string, we'd use `glue()` to combine them. However, the `{}` that we normally use for variables in `glue()` will get mixed up with the `{}` we'll use for text formatting with {marquee}. There are a couple of different ways we can get around this problem. One way is changing the delimiters used in `glue()`. For example, by setting `.open = \"[\"` and `.close = \"]\"` inside the `glue()` function. Alternatively, we can use `marquee_glue()` from the {marquee} package - an equivalent version of `glue()` that was built to deal with this problem.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst <- marquee::marquee_glue(\n  \"The Canadian Wind Turbine Database contains the geographic location and key technology details for wind turbines installed in Canada. It includes information about turbines installed in {.{col_palette[[1]]} {names(col_palette)[[1]]}}, {.{col_palette[[2]]} {names(col_palette)[[2]]}}, {.{col_palette[[3]]} {names(col_palette)[[3]]}}, {.{col_palette[[4]]} {names(col_palette)[[4]]}}, {.{col_palette[[5]]} {names(col_palette)[[5]]}}, and {.{col_palette[[6]]} {names(col_palette)[[6]]}} regions.\"\n)\n```\n:::\n\n\n\nLet's see what our subtitle looks like when the variables have been evaluated:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThe Canadian Wind Turbine Database contains the geographic location and key technology details for wind turbines installed in Canada. It includes information about turbines installed in {.#E58606 Ontario}, {.#5D69B1 Quebec}, {.#52BCA3 Alberta}, {.#99C945 Nova Scotia}, {.#CC61B0 British Columbia}, and {.#24796C other} regions.\n```\n\n\n:::\n:::\n\n\n\nThis is the reason that we wanted the `\"other\"` category to be in lower case and in last position when constructing `area_levels` - to make the sentence read better.\n\nWe add these text elements to out plot in the normal way, by passing them into the `labs()` function: \\index{ggplot2!labs}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext_plot <- col_plot +\n  labs(\n    title = title,\n    subtitle = st,\n    caption = cap\n  )\ntext_plot\n```\n\n::: {.cell-output-display}\n![Plot](canadian-wind-turbines_files/figure-pdf/fig-turbines-text-plot-1.pdf){#fig-turbines-text-plot fig-pos='H'}\n:::\n:::\n\n\n\nYou'll notice that the formatting hasn't been applied, and that the `**` have been rendered literally. We'll deal with this when we edit the arguments in `theme()` - we haven't actually used {marquee} yet to format the title text!\n\n### Adjusting scales and themes\n\n\\index{ggplot2!scale\\_x\\_continuous} \\index{ggplot2!scale\\_y\\_continuous}\n\\index{ggplot2!coord\\_fixed}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscale_plot <- text_plot +\n  scale_x_discrete(\n    expand = c(0, 0, 0, 0)\n  ) +\n  scale_y_continuous(\n    labels = function(x) format(x * 10 * 20, big.mark = \",\"),\n    expand = c(0, 0),\n    breaks = c(0, 5, 10, 15, 20),\n    limits = c(0, 20),\n    minor_breaks = NULL\n  ) +\n  coord_fixed()\n```\n:::\n\n\n\n\\index{ggplot2!theme\\_minimal} \\index{ggplot2!theme} \\index{ggplot2!element\\_rect}\n\\index{marquee!element\\_marquee} \\index{ggplot2!element\\_line} \\index{ggplot2!margin}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(dev = \"ragg_png\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nscale_plot +\n  theme_minimal(\n    base_size = 8\n  ) +\n  theme(\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.margin = margin(5, 10, 5, 10),\n    plot.background = element_rect(fill = bg_col, colour = bg_col),\n    panel.background = element_rect(fill = bg_col, colour = bg_col),\n    panel.grid.major = element_line(\n      linewidth = 0.4\n    ),\n    plot.title = marquee::element_marquee(\n      colour = text_col,\n      width = 1,\n      size = 12,\n      margin = margin(b = -10)\n    ),\n    plot.subtitle = marquee::element_marquee(\n      colour = text_col,\n      width = 1,\n      size = 9\n    ),\n    plot.caption = marquee::element_marquee(\n      hjust = 0,\n      lineheight = 0.5,\n      size = 8,\n      margin = margin(t = 5)\n    )\n  )\n```\n\n::: {.cell-output-display}\n![Plot](canadian-wind-turbines_files/figure-pdf/fig-turbines-theme-plot-1.png){#fig-turbines-theme-plot fig-pos='H'}\n:::\n:::\n\n\n\nfix order colors are plotted in\n\n## Reflection\n\n* turbines icon\n\n* ggpattern, geom_tile_pattern, flaticon, \n\n[@ggpattern]\n\nflaticon needs attrubtion\n\n[www.flaticon.com/free-icon/wind-power_5670189](https://www.flaticon.com/free-icon/wind-power_5670189)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract data\nbase_build <- ggplot_build(base_plot)\nnew_data <- base_build$data[[1]] |>\n  dplyr::rename(Area = PANEL) |> \n  dplyr::mutate(\n    Area = factor(Area, labels = levels(plot_data$Year_Group))\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check locations\nbase_plot2 <- ggplot(data = new_data) +\n  geom_point(\n    mapping = aes(\n      x = x, y = y, color = colour\n    )\n  ) +\n  facet_wrap(~Area, nrow = 1)\nbase_plot2\n```\n\n::: {.cell-output-display}\n![](canadian-wind-turbines_files/figure-pdf/unnamed-chunk-31-1.png){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = new_data,\n  mapping = aes(\n    x = x, y = y\n  )\n) +\n  ggpattern::geom_tile_pattern(\n    linewidth = 1,\n    fill = \"white\",\n    pattern = \"image\",\n    pattern_filename = \"images/wind-power.png\"\n  ) +\n  facet_wrap(~Area, nrow = 1) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](canadian-wind-turbines_files/figure-pdf/unnamed-chunk-32-1.png){fig-pos='H'}\n:::\n:::\n\n\n\nlearn more about image manipulation and recoloring in seafood, images paths based on data in r-pkgs\n\n::: {.content-visible when-format=\"html\"}\n\nEach plot created during the process of developing the original version of this visualisation was captured using {camcorder}, and is shown in the gif below. If you'd like to learn more about how {camcorder} can be used in the data visualisation process, see @sec-camcorder.\n\n![](images/turbines.gif){fig-align=\"center\"}\n\n:::\n",
    "supporting": [
      "canadian-wind-turbines_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}