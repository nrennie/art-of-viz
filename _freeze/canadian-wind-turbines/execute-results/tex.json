{
  "hash": "5700dc1b101135df4ca995fdde80a8a6",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfilters:\n  - line-highlight\nexecute: \n  freeze: auto\nfig-width: 5\nfig-asp: 0.75\n---\n\n::: {.cell}\n\n:::\n\n\n\n# Canadian Wind Turbines: waffle plots, pictograms, and icons {#sec-turbines}\n\nIn this chapter, we'll learn how \n\n## Data\n\n[https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070](https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070)\n\n[@readxl] [@openxlsx]\n\n\\index{readxl!read\\_xlsx}\n\n\\index{openxlsx!read.xlsx} \\index{utils!write.csv}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwind_turbines <- openxlsx::read.xlsx(\"https://ftp.cartes.canada.ca/pub/nrcan_rncan/Wind-energy_Energie-eolienne/wind_turbines_database/Wind_Turbine_Database_FGP.xlsx\", sheet = 1)\nwrite.csv(wind_turbines, \"data/wind_turbines.csv\", row.names = FALSE)\n```\n:::\n\n\n\n\\index{readr!read\\_csv}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwind_turbines <- readr::read_csv(\"data/wind_turbines.csv\")\n```\n:::\n\n\n\n\n## Exploratory work\n\n### Data exploration\n\n### Exploratory sketches\n\n## Preparing a plot\n\n### Data wrangling\n\n\n\\index{dplyr!if\\_else} \\index{stringr!str\\_detect} \\index{stringr!str\\_match}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_after_last_slash <- function(texts) {\n  has_slash <- stringr::str_detect(texts, \"/\")\n  extracted <- stringr::str_match(texts, \".*/(.*)$\")[, 2]\n  output <- dplyr::if_else(has_slash, extracted, texts)\n  return(output)\n}\n```\n:::\n\n\n\n\\index{dplyr!select} \\index{base!as.numeric}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nturbines_year <- wind_turbines |>\n  dplyr::select(`Province/Territory`, Commissioning.date) |>\n  dplyr::mutate(\n    Year = extract_after_last_slash(Commissioning.date),\n    Year = as.numeric(Year)\n  )\n```\n:::\n\n\n\n\\index{dplyr!filter} \\index{dplyr!mutate} \\index{dplyr!case\\_when} \\index{base!factor}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nturbines_year_group <- turbines_year |>\n  dplyr::filter(Year >= 2001 & Year <= 2020) |>\n  dplyr::mutate(\n    Year_Group = dplyr::case_when(\n      Year %in% seq(2001, 2005) ~ \"2001 - 2005\",\n      Year %in% seq(2006, 2010) ~ \"2006 - 2010\",\n      Year %in% seq(2011, 2015) ~ \"2011 - 2015\",\n      Year %in% seq(2016, 2020) ~ \"2016 - 2020\"\n    )\n  ) |>\n  dplyr::mutate(\n    Year_Group = factor(Year_Group, levels = c(\n      \"2001 - 2005\", \"2006 - 2010\", \"2011 - 2015\", \"2016 - 2020\"\n    ))\n  )\n```\n:::\n\n\n\n\\index{dplyr!rename} \\index{dplyr!mutate} \\index{dplyr!case\\_when} \\index{dplyr!count} \\index{dplyr!filter}\n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data <- turbines_year_group |>\n  dplyr::rename(Area = `Province/Territory`) |>\n  dplyr::mutate(\n    Area = dplyr::case_when(\n      Area %in% c(\n        \"Northwest Territories\",\n        \"Newfoundland and Labrador\",\n        \"Prince Edward Island\",\n        \"New Brunswick\",\n        \"Manitoba\",\n        \"Saskatchewan\"\n      ) ~ \"other\",\n      TRUE ~ Area\n    )\n  ) |>\n  dplyr::count(Area, Year_Group) |>\n  dplyr::mutate(n = round(n / 20)) |>\n  dplyr::filter(n != 0)\n```\n:::\n\n\n\n\\index{dplyr!summarise} \\index{dplyr!arrange} \\index{dplyr!filter} \\index{dplyr!pull} \\index{base!factor}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narea_levels <- c(plot_data |>\n  dplyr::summarise(n = sum(n), .by = Area) |>\n  dplyr::arrange(-n) |>\n  dplyr::filter(Area != \"other\") |>\n  dplyr::pull(Area), \"other\")\nplot_data$Area <- factor(plot_data$Area, levels = area_levels)\n```\n:::\n\n\n\n### Packages and functions\n\nfont awesome ref\n\nadd instructions about installing system through waffle, where to download\n\n\\index{sysfonts!font\\_add} \\index{showtext!showtext\\_auto} \\index{showtext!showtext\\_opts}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsysfonts::font_add(\n  family = \"Font Awesome 6\",\n  regular = \"fonts/Font-Awesome-6-Free-Solid-900.otf\"\n)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\n```\n:::\n\n\n\n\n### The first plot\n\n[@waffle]\n\n\\index{ggplot2!ggplot} \\index{ggplot2!aes} \\index{ggplot2!facet\\_wrap}\n\\index{waffle!geom\\_pictogram}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nbase_plot <- ggplot(data = plot_data) +\n  waffle::geom_pictogram(\n    mapping = aes(\n      label = Area,\n      colour = Area,\n      values = n\n    ),\n    flip = TRUE,\n    n_rows = 10,\n    size = 3,\n    family = \"Font Awesome 6\"\n  ) +\n  facet_wrap(~Year_Group, nrow = 1, strip.position = \"bottom\")\nbase_plot\n```\n\n::: {.cell-output-display}\n![Plot](canadian-wind-turbines_files/figure-pdf/fig-turbines-base-plot-1.pdf){#fig-turbines-base-plot fig-pos='H'}\n:::\n:::\n\n\n\nturbine icons not free\n\n\\index{waffle!scale\\_label\\_pictogram}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nicons_plot <- base_plot +\n  waffle::scale_label_pictogram(\n    name = NULL,\n    values = c(\"fan\", \"fan\", \"fan\", \"fan\", \"fan\", \"fan\"),\n    guide = \"none\"\n  )\nicons_plot\n```\n\n::: {.cell-output-display}\n![Plot](canadian-wind-turbines_files/figure-pdf/fig-turbines-icons-plot-1.pdf){#fig-turbines-icons-plot fig-pos='H'}\n:::\n:::\n\n\n\n(alternatively, you can later set `theme(legend.position = \"none\")` as we did )\n\n## Advanced styling\n\n### Colors\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbg_col <- \"#fafafa\"\ntext_col <- \"black\"\n```\n:::\n\n\n\nLet's also define a color palette that we'll use for the color of the icons. We're looking for 6 different colors - one for area. The {rcartocolor} [@rcartocolor] package provides access to the [CARTOColors](https://carto.com/carto-colors/) color palettes for maps designed by [CARTO](https://carto.com/) [@cartocolors]. Although these palettes were primarily designed for coloring maps, the color palettes are also very effective for other types of graphics. \n\nIn the {rcartocolor} package, categorical palettes are referred to as *qualitative* palettes. We can see all available qualitative palettes with a sufficient number of colors using `display_carto_all()`: \\index{rcartocolor!display\\_carto\\_all}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrcartocolor::display_carto_all(\n  n = 6, type = \"qualitative\"\n)\n```\n\n::: {.cell-output-display}\n![All qualitative color palettes with at least 6 colors in the {rcartocolor} package.](canadian-wind-turbines_files/figure-pdf/fig-turbines-rcarto-1.pdf){#fig-turbines-rcarto fig-pos='H'}\n:::\n:::\n\n\n\nAlthough the {rcartocolor} package has the `scale_fill_carto_d()` which we could use directly in our plots, we'll still save the color palette as a vector of hex codes to allow us to re-use the colors more easily. As you can see in @fig-turbines-rcarto, in the qualitative palettes in the {rcartocolor} package, the last color is often a grey color. That's a great choice for representing missing data, but when we want different colors for categories it doesn't work as well. The trick is to ask for one more color than we need, and then throw away the last element in the color palette. We have 6 categories in our plot, so we ask for 7 colors using the `carto_pal()` function and then extract only the first 6. We'll use the `\"Vivid\"` palette here. \\index{rcartocolor!carto\\_pal}\n\nWe also make the `col_palette` vector a named vector by using the `names()` function, and using `area_levels` as the names. Although this isn't necessary for adding the colors to the plot, it will make it easier to extract the colors and ensure each color is mapped to the correct category label.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_palette <- rcartocolor::carto_pal(\n  n = length(unique(plot_data$Area)) + 1,\n  name = \"Vivid\"\n)[1:length(unique(plot_data$Area))]\nnames(col_palette) <- area_levels\n```\n:::\n\n\n\nWe can then pass this `col_palette` vector into `scale_color_manual()` to apply the colors to our plot. Since we'll be using colored text instead of a traditional legend, we set `guide = \"none\"` to remove the legend again. \\index{ggplot2!scale\\_color\\_manual}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_plot <- icons_plot +\n  scale_color_manual(\n    values = col_palette,\n    guide = \"none\"\n  )\n```\n:::\n\n\n\n### Adding styled text\n\nWe've already seen in @sec-programming and @sec-museums how to format the title or subtitle text to be bold using the `face = \"bold\"` argument inside `theme()` elements. But what if we want to make only *part* of the text bold? We can use the {marquee} package [@marquee] to add styling to text within in a string. The {marquee} package allows you to use Markdown syntax in text when you're making graphics in R, including in plots built with {ggplot2} or other graphics built on {grid}. \\index{marquee}\n\nIn Markdown, to make text bold, you enclose it inside two pairs of asterisks e.g. `**bold text**`. For example, if we wanted to put the entire title in bold font, we could write the title inside `**`. In the caption, we might want to embolden the words `Data` and `Graphic` to highlight that there are two different fields of information:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle <- \"**Canadian wind turbines are mostly found in Ontario**\"\ncap <- \"**Data**: Natural Resources Canada | **Graphic**: N. Rennie\"\n```\n:::\n\n\n\nThis type of formatting for the plot caption is something that we might like to re-use across multiple plots. And when we want to re-use code, it's almost always useful to make it into a function. Let's define a function called `source_caption()` which has three arguments:\n\n* `source`: a character string for the source of the data\n* `graphic`: a character string for the attribution of the visualization\n* `sep`: a character string for what should separate the two pieces of text, which has `\" | \"` as a default.\n\nWe then use `glue()` from {glue} to stick these three arguments together, and include the bold formatting using `**`. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource_caption <- function(source, graphic, sep = \" | \") {\n  caption <- glue::glue(\n    \"**Data**: {source}{sep}**Graphic**: {graphic}\"\n  )\n  return(caption)\n}\n```\n:::\n\n\n\nWe can construct the caption using our new `source_caption()` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncap <- source_caption(\n  source = \"Natural Resources Canada\",\n  graphic = \"N. Rennie\"\n)\ncap\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n**Data**: Natural Resources Canada | **Graphic**: N. Rennie\n```\n\n\n:::\n:::\n\n\n\nYou can see that it's identical to the one we manually created earlier. We'll also re-use the `source_caption()` function in later chapters.\n\nLet's move onto the subtitle. In this visualization, the subtitle will also be doubling as a legend as we'll use colored text to denote the different categories. In {marquee}, text can be colored by wrapping the text in curly brackets, where the first word is pre-fixed by a period and identifies the color of the text i.e. `{.color text to color}`. For example, `{.red This is red text.}`. \n\nWe want to add the colors and the text to be colored in a programmatic way. We'll use square brackets to subset the values and names stored in the `col_palette` vector. Here, `col_palette[[1]]` extracts the hex code for the color of the first category, and `names(col_palette)[[1]]` extracts the name of the first category.\n\nNormally, when we want to write character strings and insert variables into the string, we'd use `glue()` to combine them. However, the `{}` that we normally use for variables in `glue()` will get mixed up with the `{}` we'll use for text formatting with {marquee}. There are a couple of different ways we can get around this problem. One way is changing the delimiters used in `glue()`. For example, by setting `.open = \"[\"` and `.close = \"]\"` inside the `glue()` function. Alternatively, we can use `marquee_glue()` from the {marquee} package - an equivalent version of `glue()` that was built to deal with this problem.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst <- marquee::marquee_glue(\n  \"The Canadian Wind Turbine Database contains the geographic location and key technology details for wind turbines installed in Canada. It includes information about turbines installed in {.{col_palette[[1]]} {names(col_palette)[[1]]}}, {.{col_palette[[2]]} {names(col_palette)[[2]]}}, {.{col_palette[[3]]} {names(col_palette)[[3]]}}, {.{col_palette[[4]]} {names(col_palette)[[4]]}}, {.{col_palette[[5]]} {names(col_palette)[[5]]}}, and {.{col_palette[[6]]} {names(col_palette)[[6]]}} regions.\"\n)\n```\n:::\n\n\n\nLet's see what our subtitle looks like when the variables have been evaluated:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThe Canadian Wind Turbine Database contains the geographic location and key technology details for wind turbines installed in Canada. It includes information about turbines installed in {.#E58606 Ontario}, {.#5D69B1 Quebec}, {.#52BCA3 Alberta}, {.#99C945 British Columbia}, {.#CC61B0 Nova Scotia}, and {.#24796C other} regions.\n```\n\n\n:::\n:::\n\n\n\nThis is the reason that we wanted the `\"other\"` category to be in lower case and in last position when constructing `area_levels` - to make the sentence read better.\n\nWe add these text elements to out plot in the normal way, by passing them into the `labs()` function: \\index{ggplot2!labs}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext_plot <- col_plot +\n  labs(\n    title = title,\n    subtitle = st,\n    caption = cap\n  )\ntext_plot\n```\n\n::: {.cell-output-display}\n![Plot](canadian-wind-turbines_files/figure-pdf/fig-turbines-text-plot-1.pdf){#fig-turbines-text-plot fig-pos='H'}\n:::\n:::\n\n\n\nYou'll notice that the formatting hasn't been applied, and that the `**` have been rendered literally. We'll deal with this when we edit the arguments in `theme()` - we haven't actually used {marquee} yet to format the title text!\n\n### Adjusting scales and themes\n\n\\index{ggplot2!scale\\_x\\_continuous} \\index{ggplot2!scale\\_y\\_continuous}\n\\index{ggplot2!coord\\_fixed}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscale_plot <- text_plot +\n  scale_x_discrete(\n    expand = c(0, 0, 0, 0)\n  ) +\n  scale_y_continuous(\n    labels = function(x) format(x * 10 * 20, big.mark = \",\"),\n    expand = c(0, 0),\n    breaks = c(0, 5, 10, 15, 20),\n    limits = c(0, 20),\n    minor_breaks = NULL\n  ) +\n  coord_fixed()\n```\n:::\n\n\n\n\\index{ggplot2!theme\\_minimal} \\index{ggplot2!theme} \\index{ggplot2!element\\_rect}\n\\index{marquee!element\\_marquee} \\index{ggplot2!element\\_line} \\index{ggplot2!margin}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(dev = \"ragg_png\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nscale_plot +\n  theme_minimal(\n    base_size = 8\n  ) +\n  theme(\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.margin = margin(5, 10, 5, 10),\n    plot.background = element_rect(fill = bg_col, colour = bg_col),\n    panel.background = element_rect(fill = bg_col, colour = bg_col),\n    panel.grid.major = element_line(\n      linewidth = 0.4\n    ),\n    plot.title = marquee::element_marquee(\n      colour = text_col,\n      width = 1,\n      size = 12,\n      margin = margin(b = -10)\n    ),\n    plot.subtitle = marquee::element_marquee(\n      colour = text_col,\n      width = 1,\n      size = 9\n    ),\n    plot.caption = marquee::element_marquee(\n      hjust = 0,\n      lineheight = 0.5,\n      size = 8,\n      margin = margin(t = 5)\n    )\n  )\n```\n\n::: {.cell-output-display}\n![Plot](canadian-wind-turbines_files/figure-pdf/fig-turbines-theme-plot-1.png){#fig-turbines-theme-plot fig-pos='H'}\n:::\n:::\n\n\n\nfix order colors are plotted in\n\n## Reflection\n\n* turbines icon\n",
    "supporting": [
      "canadian-wind-turbines_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}