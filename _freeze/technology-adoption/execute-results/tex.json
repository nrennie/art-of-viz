{
  "hash": "3cdcccde298c6dd4a0a6e27a52d149ea",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfilters:\n  - line-highlight\nexecute: \n  freeze: auto\nfig-asp: 0.7\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n# Technology adoption: making gauge charts with {ggforce} {#sec-technology}\n\nIn this chapter we'll discover how to create gauge charts, a type of chart not native to {ggplot2}, with the help of the {ggforce} extension package.\n\n**Packages required in this chapter**:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(colorblindr)\nlibrary(dplyr)\nlibrary(ggforce)\nlibrary(ggplot2)\nlibrary(ggtext)\nlibrary(scales)\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(tidyr)\nlibrary(tidytuesdayR)\n```\n:::\n\n\n\n\n\n\n## Data\n\nThe Cross‚Äêcountry Historical Adoption of Technology (CHAT) dataset [@technology_data] contains information on the adoption of over 100 technologies in more than 150 countries, spanning over 200 years. Most of the data is annual data, and covers technology categories including, but not limited to, agriculture, communications, transport, and finance - encompassing *as broad a definition of technology as possible* [@technology_data].\n\nThe CHAT dataset was used as a TidyTuesday dataset in July 2022 (after being suggested by [Tom Mock](https://github.com/jthomasmock)), so let's start by reading in the data using the `tidytuesdayR` R package [@tidytuesdayR] and looking at the definitions of the variables: \\index{tidytuesdayR!tt\\_load}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata <- tt_load(\"2022-07-19\")\ntechnology <- tuesdata$technology\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\nThe `technology` data is reasonably large with 491636 rows and 7 columns.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(technology)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 7\n  variable label            iso3c  year group category value\n  <chr>    <chr>            <chr> <dbl> <chr> <chr>    <dbl>\n1 BCG      % children who ~ AFG    1982 Cons~ Vaccines    10\n2 BCG      % children who ~ AFG    1983 Cons~ Vaccines    10\n3 BCG      % children who ~ AFG    1984 Cons~ Vaccines    11\n4 BCG      % children who ~ AFG    1985 Cons~ Vaccines    17\n5 BCG      % children who ~ AFG    1986 Cons~ Vaccines    18\n6 BCG      % children who ~ AFG    1987 Cons~ Vaccines    27\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThe data is in long format with the `variable` (and `label`) columns containing information on what variable the row relates to e.g. `\"% children who received a BCG immunization\"` or `\"Land naturally regenerating forest area 1000 ha\"`. The `iso3c` column gives the ISO3 code for the country the row relates to, and similarly the `year` column relates to the relevant year. The `group` column details whether the variable is related to `\"Consumption\"`, `\"Production\"`, `\"Non-Tech\"` (such as GDP), or `\"Creation\"`. The `category` column contains information about which category the variable falls into e.g. `\"Vaccines\"` or `\"Agriculture\"`. Finally, the `value` column provides the value of the variable for the given year and country.\n\n## Exploratory work\n\nGiven the large scale of this data (in terms of time frame, spatially, and range of variables), there are many aspects we could look into further. What might be an interesting aspect of this data to visualize?\n\n### Data exploration\n\nAs in other chapters in this book, we'll start with some basic exploratory plots in base R. For example, we may look at the distribution of variables in each `category` using the `barplot()` function\\index{graphics!barplot}:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(\n  table(technology$category),\n  las = 1,\n  horiz = TRUE\n)\n```\n\n::: {.cell-output-display}\n![Bar chart of number of observations (all years, countries, and variables) in each category.](technology-adoption_files/figure-pdf/fig-technology-barplot-1.pdf){#fig-technology-barplot}\n:::\n:::\n\n\n\n\n\n\nWe have lots of observations relating to variables in the agriculture and transport categories. We could also look at how the number of values in these categories has changed over time, using the `heatmap()` function in base R: \\index{stats!heatmap}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheatmap(\n  table(technology$category, technology$year),\n  # prevent re-ordering\n  Rowv = NA,\n  Colv = NA,\n  # make labels smaller so they fit on the page\n  margins = c(3, 6),\n  cexRow = 0.5,\n  cexCol = 0.5\n)\n```\n\n::: {.cell-output-display}\n![Heatmap of number of observations (all countries and variables) in each category, each year. An increasing number of observations are seen in recent years.](technology-adoption_files/figure-pdf/fig-technology-heatmap-1.pdf){#fig-technology-heatmap}\n:::\n:::\n\n\n\n\n\n\nLet's look into a specific variable in more detail. We need to narrow down the data we want to consider - there are 194 different questions (variables) contained in the data. You can check by running `length(unique(technology$label))`. One variable we could consider further is the percentage of children who received a measles immunization - indicated by the `\"pctimmunizmeas\"` level in the `variable` column. Let's create a quick scatter plot of how this percentage has been changing over time: \\index{scatter plot}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npctimmunizmeas_df <- subset(\n  technology, variable == \"pctimmunizmeas\"\n)\nplot(\n  x = pctimmunizmeas_df$year,\n  y = pctimmunizmeas_df$value,\n  xlab = \"\", ylab = \"\",\n  main = \"Percentage of children who received a measles immunization\"\n)\n```\n\n::: {.cell-output-display}\n![Scatter plot of percentage children who received a measles immunization between 1980 and 2019, hinting at an upward trend.](technology-adoption_files/figure-pdf/fig-technology-scatterplot-1.pdf){#fig-technology-scatterplot}\n:::\n:::\n\n\n\n\n\n\nFor obvious reasons (the timing of when the first measles vaccine was created and rolled out across the world), the data does not span for 200 years for this variable. Nonetheless, it looks like there is perhaps an increasing trend over time. It's a little bit difficult to see because we have data from lots of countries on one plot, including some whose values were already high at the start of the time series.\n\nA list of all ISO3 country codes can be obtained by running `unique(technology$iso3c)`, and from there we can choose a subset of countries we want to look at in more detail. Let's look at Great Britain, USA, Sweden, Brazil, New Zealand, and Venezuela, and store these choices in a vector called `countries`. \n\nAlthough including all years of data would better allow us to consider trends in the values, sometimes looking at a only a few snapshots can be more effective. For example, by considering only the years 1980 and 2010 as we'll do here, readers get a *Wow, look how much things have changed!* message rather than the perhaps less impactful visual of a gradual trend. We can use the `filter`\\index{dplyr!filter} function from {dplyr}\\index{dplyr} to filter our `technology` data set to consider only the rows showing data about the percentage of children who received a measles immunization, in the years 1980 or 2010, and relating to countries in our specified vector of `countries`.\n\nWe no longer need the `group`, `category`, `variable`, or `label` columns, as these are constant for our data so we can remove these columns using `select()`\\index{dplyr!select} from {dplyr}.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset of countries to look at further\ncountries <- c(\"GBR\", \"USA\", \"SWE\", \"BRA\", \"NZL\", \"VEN\")\n\n# subset data for specific topic, years, and countries\nmeasles_data <- technology |>\n  filter(\n    label == \"% children who received a measles immunization\",\n    year %in% c(1980, 2010),\n    iso3c %in% countries\n  ) |>\n  select(-c(group, category, variable, label))\nhead(measles_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 3\n  iso3c  year value\n  <chr> <dbl> <dbl>\n1 BRA    1980    57\n2 BRA    2010    99\n3 GBR    1980    53\n4 GBR    2010    89\n5 NZL    1980    80\n6 NZL    2010    91\n```\n\n\n:::\n:::\n\n\n\n\n\n\nOur tidier data now shows just the percentage (`value`) of children who received a measles immunization in each country (`iso3c`), in each of 1980 and 2010 (`year`), How might we visualize this data?\n\nThere are a couple of obvious options that come to mind: a simple grouped bar chart, a slope chart, or indeed the (not often popular) pie chart. Our choice of data visualization will depend on which aspects of the data we want to show. Do we want to compare 1980 to 2010? Do we want to compare countries to each other? Do we just want to show the range of values in the data? In this data, the most interesting example is a comparison between 1980 and 2010. Although a slope chart would likely work well for this data, we're going a little bit more experimental with a gauge chart.\n\nAt the time of writing, there isn't a built-in function in {ggplot2} to create gauge charts. If you've never heard of a gauge chart\\index{gauge chart}, this initial sketch might give you an idea of what we're aiming for.\n\n### Exploratory sketches\n\nYou can think of a gauge chart as being a stacked bar chart which is curved over a half circle. Here, rather than one stacked bar chart, we have two stacked bar charts. \n\n![Initial sketches of a ideas for visualising data for a single country.](images/sketch-technology.png){#fig-technology-sketch fig-align=\"center\" fig-alt=\"\"}\n\nGauge charts often also include a dial (or needle) to highlight the value further, but that gets a little bit complicated when we have multiple gauges. So let's leave that for now. \\index{gauge chart}\n\n## Preparing a plot\n\nGauge charts are not a built-in feature of {ggplot2}, so we're going to have to do a little bit of manual preparation before we start plotting.\n\n### Data wrangling\n\nWe *could* use `geom_col()` and `coord_polar()` to try to make a gauge chart natively in {ggplot2}. However, the use of polar coordinates in {ggplot2} often makes it difficult to add elements such as annotations in the position you'd like them to be in. So let's create a gauge chart a slightly different way! \\index{ggplot2!geom\\_col} \\index{ggplot2!coord\\_polar}\n\nThe `value` in the data currently tells us the percentage of children who did have an immunization, we also need to calculate the percentage of children who did not - by subtracting `value` from 100. We can then pivot the data such that each country has two rows in the data: (i) one row for the *did have immunization* value in 1980 and 2010, and (ii) one row for the *did not have immunization* value in 1980 and 2010. We end up with something halfway in between wide and long format data. Let's also make the `YN` column (indicating a did/did not have immunization row) into a factor.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeasles_YN <- measles_data |>\n  mutate(no_value = 100 - value) |>\n  pivot_longer(\n    cols = c(value, no_value),\n    names_to = \"YN\",\n    values_to = \"perc\"\n  ) |>\n  pivot_wider(\n    names_from = \"year\",\n    values_from = \"perc\"\n  ) |>\n  mutate(YN = factor(YN))\n```\n:::\n\n\n\n\n\n\nTo enable us to work with the percentages more easily, we can convert them into values between 0 and 1 by dividing by 100, and drop the original columns. If you think about creating a stacked bar chart, we need to know the end point of each bar (the maximum y-axis value for each bar). This isn't the percentage of each group, it's the cumulative percentage of each group and the ones stacked below it. We use the `cumsum()` function to calculate the cumulative sum of the percentages across each year and country: \\index{cumsum}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data <- measles_YN |>\n  mutate(\n    perc_1980 = `1980` / 100,\n    perc_2010 = `2010` / 100\n  ) |>\n  select(-c(`1980`, `2010`)) |>\n  group_by(iso3c) |>\n  mutate(\n    ymax_1980 = cumsum(perc_1980),\n    ymax_2010 = cumsum(perc_2010)\n  )\nhead(plot_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 6\n# Groups:   iso3c [3]\n  iso3c YN       perc_1980 perc_2010 ymax_1980 ymax_2010\n  <chr> <fct>        <dbl>     <dbl>     <dbl>     <dbl>\n1 BRA   value         0.57      0.99      0.57      0.99\n2 BRA   no_value      0.43      0.01      1         1   \n3 GBR   value         0.53      0.89      0.53      0.89\n4 GBR   no_value      0.47      0.11      1         1   \n5 NZL   value         0.8       0.91      0.8       0.91\n6 NZL   no_value      0.2       0.09      1         1   \n```\n\n\n:::\n:::\n\n\n\n\n\n\nYou'll notice that the `ymax_*` values are always `1` for the `no_value` rows - this is because the `no_value` is the last bar so we will always have plotted 100% of the data by the time we've finished that bar. Note that the data is currently still grouped by `iso3c` - this will be important later!\n\n### The {ggforce} extension package\n\nThe {ggforce}\\index{ggforce} extension package [@ggforce] contains many useful functions which extend the behavior of {ggplot2}, many of them aimed at exploratory data visualization. We won't cover many of it's functions in this chapter, and instead we'll focus on how to use it to create gauge charts. {ggforce} is available on CRAN and can be installed with the usual `install.packages(\"ggforce\")` command.\n\n### Gauge charts with {ggforce}\n\nThe function that we're interested in for the purposes of creating a gauge chart is `geom_arc_bar()` \\index{ggforce!geom\\_arc\\_bar}. The `geom_arc_bar()` function makes it possible to draw arcs in {ggplot2}. You can also use this function to create visualizations such as donut charts or sunburst plots. We'll use two calls to `geom_arc_bar()` to create the double gauge chart - one for the 1980 arc, and one for the 2010 arc. There are several required aesthetics when using `geom_arc_bar()`:\n\n* `x0`: The x-coordinate of the center of the circle that the gauge chart lies on. For us, this will be a constant value so we can choose any number - `0` seems like an obvious choice.\n* `y0`: The y-coordinate of the center of the circle that the gauge chart lies on. For us, this will be a constant value so we can choose any number - `0` seems like an obvious choice again.\n* `r0`: The inner radius (from `x0` and `y0`) of the arc.\n* `r`: The outer radius (from `x0` and `y0`) of the arc. The difference between `r0` and `r` determines how thick the gauge chart will be. For each of the two arcs we will draw, these will be constant. For the outer arc (2010), we can set `r0 = 0.7` and ` r = 1`, and for the inner arc (1980), we can set `r0 = 0.2` and ` r = 0.5`. Note that the difference between the radii is 0.3 for both arcs so they are equally thick.\n* `start`: The starting angle for each segment in the arc.\n* `end`: The ending angle for each segment in the arc.\n\nThe last part of data wrangling we need to do is compute the `start` and `end` values. \n\n### Computing aesthetics\n\nThe end values are easy - these are the `ymax_1980` and `ymax_2010` columns that we already have. We need to compute the equivalent `ymin_1980` and `ymin_2010` values: what are the minimum values in each stacked bar chart?\n\nThink again about stacked bar charts instead of gauge charts for a second (since it's a little bit easier to visualise). The minimum value for the first bar at the bottom of the stack will always be zero - it's right at the bottom. For the rest of the stacked bars, the minimum value will be equal to the maximum value of the bar stacked below it. This means that we've actually already computed all the values we need and stored them in `plot_data`. We just need to rearrange them a bit...\n\n::: {#tip-technology-ymin .callout-tip}\n\n## Just because you can doesn't mean you should\n\nThere is almost certainly a nicer way of doing this in base R that contains fewer lines of code and is easier to read. Consider the following code block as an experiment in seeing whether we *could* do this in a piped workflow, without considering whether we *should*...\n\n:::\n\nLet's start with the 1980 data. We start off by creating the `0` values for the minimum in the first stacked bar using `rep(0, length(countries))` - since we need one `0` for each country in 1980. We then want to get the `ymax_1980` values from `plot_data` except the last one. We therefore use `slice_head()` to get this subset of the rows (missing the last one in each country). Remember that `plot_data` is still grouped by `iso3c`. We then stick these `ymax_1980` to the `0` we created and pass them into a new column called `ymin_1980` using `mutate()`. The code for the 2010 arc is analogous. \\index{dplyr!mutate} \\index{dplyr!slice\\_head} \\index{dplyr!pull}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nymin_data <- plot_data |>\n  ungroup() |>\n  # start values for 1980 arc\n  mutate(\n    ymin_1980 = c(rbind(\n      rep(0, length(countries)),\n      (slice_head(plot_data, n = -1) |>\n        pull(ymax_1980))\n    ))\n  ) |>\n  # repeat for 2010\n  mutate(\n    ymin_2010 = c(rbind(\n      rep(0, length(countries)),\n      (slice_head(plot_data, n = -1) |>\n        pull(ymax_2010))\n    ))\n  )\n```\n:::\n\n\n\n\n\n\nAll of our variables are currently scaled between 0 and 1 (since they relate to percentages). To plot this as an arc however, we need to convert this to polar coordinates. We want to start our arc at $-\\pi/2$ (instead of 0) and end at $\\pi/2$ (instead of 1). We can use the `rescale()` function from the {scales} package [@scales] to define the range we want to scale `from` and `to`. \\index{scales!rescale} \n\nWe want to apply this to every column of `ymin_data` that starts with a lowercase `\"y\"` i.e. all of the `ymax_*` and `ymin_*` columns so we use `mutate()` and `across()` from {dplyr} in conjunction with the `starts_with()` column selector function. We need to make sure we set `ignore.case = FALSE` to prevent {dplyr} from trying to rescale the `YN` column as well. \\index{dplyr!starts\\_with} \\index{dplyr!across} \\index{dplyr!mutate}\n\n::: {#tip-technology-mutate .callout-tip}\n\n## Older versions of `mutate()`\n\nIn older versions of {dplyr} (including when this plot was originally made), the `mutate_at()` function would have been used instead of `mutate()` and `across()`. The `mutate_at()` function has now been superseded. \n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngauge_data <- ymin_data |>\n  mutate(\n    across(\n      starts_with(\"y\", ignore.case = FALSE),\n      ~ rescale(.,\n        to = pi * c(-0.5, 0.5),\n        from = 0:1\n      )\n    )\n  )\nhead(gauge_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 8\n  iso3c YN       perc_1980 perc_2010 ymax_1980 ymax_2010\n  <chr> <fct>        <dbl>     <dbl>     <dbl>     <dbl>\n1 BRA   value         0.57      0.99    0.220       1.54\n2 BRA   no_value      0.43      0.01    1.57        1.57\n3 GBR   value         0.53      0.89    0.0942      1.23\n4 GBR   no_value      0.47      0.11    1.57        1.57\n5 NZL   value         0.8       0.91    0.942       1.29\n6 NZL   no_value      0.2       0.09    1.57        1.57\n# i 2 more variables: ymin_1980 <dbl>, ymin_2010 <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### The first plot\n\nWe're now finished with the data wrangling (finally!) and ready to create our first plot. As always, we start with the `ggplot()` function and pass in `gauge_data` that will be used for plotting the arcs. The aesthetics for each arc will vary so we'll hold off on passing them in globally. \\index{ggplot2!ggplot} \\index{ggplot2!aes}\n\nWe then add two arcs by using `geom_arc_bar()` twice. We set the `x0`, `y0`, `r0`, and `r` constants as we described above. Even though we have chosen constant values for the aesthetics, they still need to be inside the `aes()` function because they are *required* aesthetics. We then pass the `ymin_*` and `ymax_*` columns in as the `start` and `end` aesthetics, and set the `fill` color based on the `YN` column. \\index{ggforce!geom\\_arc\\_bar}\n\nWe also use `facet_wrap()` to draw a pair of arcs for each country in a separate facet, choosing to use `nrow = 2` to give us a nice rectangular 3x2 grid of facets for our six countries. \\index{ggplot2!facet\\_wrap} \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbasic_plot <- ggplot(data = gauge_data) +\n  # Outer 2010 arc\n  geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010,\n      fill = YN\n    )\n  ) +\n  # Inner 1980 arc\n  geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980,\n      fill = YN\n    )\n  ) +\n  facet_wrap(~iso3c, nrow = 2)\nbasic_plot\n```\n\n::: {.cell-output-display}\n![Initial plot created using `geom_arc_bar()` from {ggforce}, facetted by different countries.](technology-adoption_files/figure-pdf/fig-technology-basic-plot-1-1.pdf){#fig-technology-basic-plot-1 fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n## Advanced styling\n\nWe now have a double gauge chart - but it could look a lot nicer (and more informative)!\n\n### Colors\n\nLet's start by defining some variables for our colors. Here, we define a pink `highlight_col` which we'll use for the segment showing the percentage who did have immunizations. This should be a bright, eye-catching color as it's the main point we're trying to communicate. The `second_col` will be used to show the percentage who did not have immunizations, so we can choose a color that is a little bit more similar to the background. The background (`bg_col`) will be a light gray, the `second_col` will be a medium gray, and the text (`text_col`) will be black. \\index{color}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhighlight_col <- \"#990C58\"\nsecond_col <- \"#949398\"\nbg_col <- \"#DEDEDE\"\ntext_col <- \"black\"\n```\n:::\n\n\n\n\n\n\nBefore we add the new colors to our gauge chart, let's remove the black outline from around the segments - they're quite thick lines which don't add anything to the plot. There will be sufficient contrast between the segments with the new colors we've chosen. You can remove the outline from the arc by setting `color = NA` outside of the aesthetic mapping: \\index{ggforce!geom\\_arc\\_bar} \\index{ggplot2!ggplot} \\index{ggplot2!facet\\_wrap} \\index{ggplot2!aes}\n\n\n\n\n\n\n::: {.cell source-line-numbers='9,18'}\n\n```{.r .cell-code}\nbasic_plot <- ggplot(data = gauge_data) +\n  geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010,\n      fill = YN\n    ),\n    color = NA\n  ) +\n  geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980,\n      fill = YN\n    ),\n    color = NA\n  ) +\n  facet_wrap(~iso3c, nrow = 2)\n```\n:::\n\n\n\n\n\n\nNow we can apply the colors using `scale_fill_manual()` from {ggplot2}, setting both the color values but also more informative labels for the legend at the same time. \\index{ggplot2!scale\\_fill\\_manual}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolor_plot <- basic_plot +\n  scale_fill_manual(\n    breaks = c(\"value\", \"no_value\"),\n    labels = c(\"Immunized\", \"Not Immunized\"),\n    values = c(highlight_col, second_col)\n  )\ncolor_plot\n```\n\n::: {.cell-output-display}\n![Edited version of the previous plot with colors changed from defaults to gray and dark pink.](technology-adoption_files/figure-pdf/fig-technology-color-plot-1.pdf){#fig-technology-color-plot fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\nWhen choosing colors for a visualization, it's important not to rely too heavily on colors and legends for differentiating groups or communicating information. Color blindness comes in many different forms, and different types affect how people perceive colors in different ways. One way to check if your chart is accessible to people with color blindness, is to view it in grayscale (black and white) and consider if it can be understood without color. If it can't, consider choosing different colors, or using shapes and patterns to differentiate groups instead. Direct labeling of data and making sure that the order of the legend matches the order of the data can help when legends are unavoidable [@GAcharts]. \\index{accessibility} \\index{legend} \\index{color}\n\nThere are several packages in R that can be used to investigate the accessibility of color palettes. One of them is {colorblindr} [@colorblindr]. The {colorblindr} package allows you to create simulations of what your chart may look like to someone with color blindness. The package also includes colorblind friendly qualitative palettes with associated {ggplot2} functions. At the time of writing, {colorblindr} is not available on CRAN but can be installed from GitHub, using the methods described in @sec-bees. \\index{colorblindr!cvd\\_grid}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncvd_grid(color_plot)\n```\n\n::: {.cell-output-display}\n![A 2x2 grid of charts showing simulations of what our chart looks like with four different types of color vision deficiency.](technology-adoption_files/figure-pdf/fig-technology-cvd-1.pdf){#fig-technology-cvd}\n:::\n:::\n\n\n\n\n\n\nNote that the default color palette in {ggplot2} does not show any differentiation when viewed in grayscale, so it's important to think about which colors you're using for any chart.\n\n### Text and fonts\n\nAs we've seen in previous chapters, we can load in Google fonts using the {sysfonts}\\index{sysfonts} and {showtext}\\index{showtext} packages. Here, we'll keep it clean and minimal by using the `\"Ubuntu\"` font for both the title and the body font. \\index{sysfonts!font\\_add\\_google} \\index{showtext!showtext\\_auto} \\index{showtext!showtext\\_opts}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfont_add_google(name = \"Ubuntu\")\nshowtext_auto()\nshowtext_opts(dpi = 300)\nbody_font <- \"Ubuntu\"\n```\n:::\n\n\n\n\n\n\nLet's define some text for the title and subtitle. Here, the title asks the reader a question, encouraging them to think and directing them to what they are looking at in the chart. The subtitle gives a brief explanation of how to interpret the plot, and the main conclusion that we want the reader to take away. The `caption` variable identifies the source of the data for this visualization, as well as the chart creator.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle <- \"What percentage of children are immunized against measles?\"\nsubtitle <- \"The inner pink bar represents the percentage of children who received a measles immunization in 1980, whilst the outer pink bar represents the percentage in 2010. An increase in immunization levels between 1980 and 2010 is seen across all six countries.\"\ncaption <- \"Data: data.nber.org (10.3386/w15319) | Graphic: N. Rennie\"\n```\n:::\n\n\n\n\n\n\nSince the axis labels do not make too much sense for `geom_arc_bar()` plots, we'll remove them later when using the `theme`\\index{ggplot2!theme} functions. Instead, we can add our own labels using `geom_text()`\\index{ggplot2!geom\\_text} to the end of the gauges. To make it easier, we can construct a small `data.frame` specifically for adding text labels. This includes the `x`, and `y` coordinates where the text should be positioned (you can read these off from the graph we already have since we haven't yet deleted the axis labels), as well as the `label` that should appear.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext_df <- data.frame(\n  x = c(0.35, 0.85),\n  y = c(-0.1, -0.1),\n  label = c(1980, 2010)\n)\n```\n:::\n\n\n\n\n\n\nWe can then add this text to the existing plot by adding a layer with `geom_text()`\\index{ggplot2!geom\\_text}, noting that we need to specify the `data` argument as using the text `data.frame` we just created. We also need to specify the font family and size directly within the `geom_text()` function, and can add the title and subtitle text created earlier using the `labs()` function\\index{ggplot2!labs} from {ggplot2}.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext_plot <- color_plot +\n  geom_text(\n    data = text_df,\n    mapping = aes(x = x, y = y, label = label),\n    family = body_font,\n    size = 3\n  ) +\n  labs(\n    title = title,\n    subtitle = subtitle,\n    caption = caption\n  )\ntext_plot\n```\n\n::: {.cell-output-display}\n![Previous plot with additional labels indicating the year on each gauge chart, as well as an added title and subtitle.](technology-adoption_files/figure-pdf/fig-technology-text-1.pdf){#fig-technology-text fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n### Adjusting themes\n\nWe'll start by removing all of the theme elements such as the gray background, grid lines, and axis labels. The easiest way to do this is using `theme_void()`\\index{ggplot2!theme\\_void}. We can use the `base_family` argument of `theme_void()` to set the font family that will be used by default for any non-geom text elements that remain. \n\nYou may have noticed that the current gauge plots look a bit squashed and not exactly semi-circular. We can fix this by adding `coord_fixed()` \\index{ggplot2!coord\\_fixed} which forces a 1:1 aspect ratio on the plot panel.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_plot <- text_plot +\n  coord_fixed() +\n  theme_void(base_size = 8.5, base_family = body_font)\ntheme_plot\n```\n\n::: {.cell-output-display}\n![Edited version of previous plot with fixed coordinate system to prevent squashing, and all theme elements removed.](technology-adoption_files/figure-pdf/fig-technology-style-1-1.pdf){#fig-technology-style-1 fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\nThis looks better but it's still not great. What do we still need to improve with styling?\n\n* The title text doesn't stand out and blends in too easily with the subtitle, similarly for the facet text. Perhaps a **bold** font would help?\n* The subtitle text doesn't fit onto the page but we can fix that with the help of the hopefully now familiar `element_textbox_simple()` function from {ggtext}.\n* Since we're using `coord_fixed()` to force a specific aspect ratio, there are now some odd spacing issues - there is a large white gap at the top and bottom of the plot, and the year labels are slightly cut off at the bottom.\n* The legend takes up a lot of space and isn't very informative.\n\n\\index{ggplot2!coord\\_fixed} \\index{ggtext!element\\_textbox\\_simple}\n\nLet's fix the first two of these issues by editing the `theme()` elements:\n\n* We use `element_textbox_simple()` for the subtitle, making sure to left align the text. \n* We set `face = \"bold\"` for the title and facet `strip.text` and increase the font size using the `rel()` function.\n* As we've done in previous visualizations, we also set the background colors to `bg_col` and add some padding around the edges by setting the `plot.margin` argument.\n\n\\index{ggplot2!rel}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstyled_plot <- theme_plot +\n  theme(\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    strip.text = element_text(\n      face = \"bold\", size = rel(1.2)\n    ),\n    plot.title = element_text(\n      margin = margin(b = 10),\n      hjust = 0,\n      face = \"bold\",\n      size = rel(1.2)\n    ),\n    plot.subtitle = element_textbox_simple(\n      margin = margin(b = 10),\n      hjust = 0,\n      halign = 0\n    ),\n    plot.caption = element_text(\n      margin = margin(t = 10),\n      hjust = 0\n    ),\n    plot.margin = margin(5, 5, 5, 5)\n  )\nstyled_plot\n```\n\n::: {.cell-output-display}\n![Further styling of gauge chart to change background color, prevent overlapping in the subtitle text, and increase the size of the title.](technology-adoption_files/figure-pdf/fig-technology-style-2-1.pdf){#fig-technology-style-2 fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\nWe're almost there, but the year label text remains slightly squashed. Part of the problem is how much space the legend takes up - it's leaving too much empty space in the top and bottom right corners, whilst taking away space from other places where we need more of it. The highlights a common problem when developing charts - how big should the visualization be? Choosing the right size of image is especially important when using fixed aspect ratios in your plot e.g. when using `coord_fixed()` or spatial co-ordinates as we'll see in @sec-time-zones, since the wrong choice can result in cropped plots or extra white space. \\index{ggplot2!coord\\_fixed} \n\n::: {#tip-technology-aspect .callout-tip}\n\n## Choosing an aspect ratio\n\nRather than thinking about width and height, it can often be more helpful to think about aspect ratio and width (or height). This often makes the process of increasing the image size a little bit easier. \\index{aspect ratio}\n\nThere are some aspect ratios that are commonly used e.g. 4x6, 5x7, or 1x1. Choosing a commonly used aspect ratio can make it easier to arrange multiple plots, especially in websites or slide. If you're creating a plot as part of a publication, some academic journals or magazines may have specific aspect ratio requirements. Otherwise, use your exploratory sketches as a way of determining which aspect ratio might be appropriate.\n\n:::\n\n::: {#tip-technology-width .callout-tip}\n\n## Choosing a width \n\nOften the choice of width can be based on physical constraints. For example, the visualizations in this book are all around 5 inches wide to fit on the page of the print edition. You may also wish to have multiple sizes of images e.g. low and high resolution.\n\nChanging the width (or resolution) of a plot, often also means changing other aspects e.g. the font sizes, which don't necessarily rescale larger. By setting a `base_size` and using `rel()` to edit individual font size elements, you minimize the amount of work. Viewing the plot in at desired size and resolution also makes it easier to set the sizes correctly. See @sec-camcorder for more information.\n\n:::\n\n### Alternatives to a traditional legend\n\nAlthough we could simply increase the height of the plot to stop the year labels from becoming squashed, an alternative approach is to address the source of the issue and edit the legend.\n\nWe have a few different options for dealing with the legend. Some options might be:\n\n* Leave the legend as it is but reposition it to above or below the main chart, rather than to the right, and put it into a single row. Then it would take up less space. Repositioning the legend will be discussed in @sec-doctors.\n\n* We could design a custom legend. This might be a good option as double gauge charts are not so common and readers might be less familiar with them. Adding additional information about how they work might prove helpful. We'll look at how to design and use a custom in @sec-time-zones and @sec-house. \n\n* We could instead use colored text in the subtitle to indicate what the categories are. For this visualization, highlighting the *Immunized* would be enough as there are only two categories. We'll look at ways to do this in R in @sec-turbines and @sec-cats. \nHere, there's an argument to be made that any form of legend is in fact unnecessary. The current choice of colors and title of the chart makes it clear enough that the pink color represents the positive response data (percentage who have been immunized). \n\nSo let's remove the legend, by setting `legend.position = \"none\"` inside `theme()`: \\index{ggplot2!theme}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstyled_plot +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![Final styling of gauge chart to remove the legend, providing more space for the chart area.](technology-adoption_files/figure-pdf/fig-technology-style-3-1.pdf){#fig-technology-style-3 fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\nThen save it with `ggsave()`: \\index{ggplot2!ggsave}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\n  filename = \"technology-adoption.png\",\n  width = 5,\n  height = 0.7 * 5\n)\n```\n:::\n\n\n\n\n\n\n## Reflection\n\nAre gauge charts the most effective method of visualising this data? No. Gauge charts have their own problems, some of which you can see here. Since the ring representing 2010 is on the outside, the radius is larger, and therefore the area is as well. If you measure the change on arc length between 1980 and 2010, you'll get different answers to if you measured the proportional change in area for the two. Assuming we stick with the gauge chart idea, what further changes could be made to this plot to improve it?\n\n* There's no reason to use country codes instead of country names in this situation, other than perhaps laziness. There is space available for the full names. Though many people could likely work out which countries are shown here by their country codes, there's no need to make readers figure it out on their own. Providing the country names explicitly gives a reader less work to do, meaning they can focus on what you're actually trying to show. \n\n* Similarly, providing the exact percentages as labelled text would make it easier to see what the change in immunization coverage is. It's pretty clear that there has been an increase across all six countries, but the nature of gauge charts (no grid lines) makes it quite difficult to get the exact values. What's the difference between Brazil and Sweden in 2010? It's too difficult to tell here.\n\n* Although a full, traditional legend is may be unnecessary here, the addition of some colored text may add clarification that the pink area is what represents that data. We'll look at using colored text instead of a legend in @sec-turbines and @sec-cats.\n\n## Exercises\n\n* Redesign this visualization using a bar chart instead of a gauge chart, and add labels to show the percentage values directly on the chart.\n\n* Do you need to change the aspect ratio or coordinate system to improve the layout?\n",
    "supporting": [
      "technology-adoption_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}