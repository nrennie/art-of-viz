{
  "hash": "457a1a260770172018081808d8f8c630",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfilters:\n  - line-highlight\nexecute: \n  freeze: auto\nfig-width: 5\nfig-asp: 0.5\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n# R Packages: using images for custom facet labels {#sec-r-pkgs}\n\nIn this chapter, we'll learn about how to collect data on which packages and functions are used in R code, replacing the underlying data in a plot that's already been made, and how to use images as category labels.\n\n## Data\n\nAll of the directories containing code for visualisation are in file based on dates in the following structure: `yyyy/yyyy-mm-dd/yyyymmdd.R`. Since it takes a while to run, let's it to code for visualisations created in `2023`. We can use `str_detect()` from {stringr} to find any ... in the `relative_paths` column that contain `\"2023\"` and then `filter()` from {dplyr} to keep only those rows.  \\index{stringr!str\\_detect}\n\nsee [@streamline].\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiles_to_check <-\n  funspotr::list_files_github_repo(\"nrennie/tidytuesday\",\n    branch = \"main\"\n  ) |>\n  dplyr::filter(stringr::str_detect(relative_paths, \"2023\"))\n```\n:::\n\n\n\n\n\n\nThen pass intp `spot_funs_files()` from {funspotr}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_funs <- files_to_check |>\n  funspotr::spot_funs_files(\n    show_each_use = TRUE,\n    keep_in_multiple_pkgs = TRUE\n  )\n```\n:::\n\n\n\n\n\n\ngot a few errors here, maybe try re-running or debugging\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_pkgs <- rfuns |>\n  funspotr::unnest_results()\nwrite.csv(r_pkgs, \"data/r_pkgs.csv\", row.names = FALSE)\n```\n:::\n\n\n\n\n\n\nWe can then read the CSV back in using `read_csv()` from {readr} at any ... \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_pkgs <- readr::read_csv(\"data/r_pkgs.csv\")\n```\n:::\n\n\n\n\n\n\n## Exploratory work\n\n### Data exploration\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(\n  sort(table(r_pkgs$pkgs)),\n  # make labels smaller so they fit on the page\n  cex.axis = 0.5,\n  cex.names = 0.5,\n  las = 1,\n  horiz = TRUE\n)\n```\n\n::: {.cell-output-display}\n![Plot](r-packages_files/figure-html/fig-r-pkgs-barplot-1.png){#fig-r-pkgs-barplot}\n:::\n:::\n\n\n\n\n\n\n(base R + tidyverse) is better than base R or tidyverse\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_pkgs <- r_pkgs |>\n  dplyr::mutate(\n    pkgs = dplyr::case_when(\n      pkgs == \"ggplot\" ~ \"ggplot2\",\n      TRUE ~ pkgs\n    )\n  )\n```\n:::\n\n\n\n\n\n\n\n### Exploratory sketches\n\n![Initial sketches of a faceted area charts showing packages use over time](images/sketch-packages-1.png){#fig-packages-sketch-1 fig-align=\"center\"}\n\nReplace \n\n![Initial sketches of a faceted area charts showing packages use over time, with hex stickers instead of text labels](images/sketch-packages-2.png){#fig-packages-sketch-2 fig-align=\"center\"}\n\n## Preparing a plot\n\n### Data wrangling\n\nWe're going to focus on the [core {tidyverse}](https://www.tidyverse.org/packages/#core-tidyverse) packages [@tidyverse]\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncore_tidyverse <- c(\n  \"dplyr\", \"forcats\", \"ggplot2\", \"purrr\",\n  \"readr\", \"stringr\", \"tibble\", \"tidyr\"\n)\n```\n:::\n\n\n\n\n\n\nWe use \n\n\\index{dplyr!filter} \\index{tidyr!separate\\_wider\\_delim} \\index{dplyr!mutate} \\index{dplyr!count} \\index{lubridate!ymd}\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_pkgs_date <- r_pkgs |>\n  dplyr::filter(pkgs %in% core_tidyverse) |>\n  tidyr::separate_wider_delim(\n    relative_paths,\n    delim = \"/\",\n    names = c(NA, \"date\", NA)\n  ) |>\n  dplyr::mutate(date = lubridate::ymd(date)) |>\n  dplyr::count(date, pkgs)\n```\n:::\n\n\n\n\n\n\n\n\\index{dplyr!summarise} \\index{dplyr!arrange} \\index{dplyr!pull}\n\nor use `desc()` \\index{dplyr!desc}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npkgs_ordered <- r_pkgs_date |>\n  dplyr::summarise(n = sum(n), .by = pkgs) |>\n  dplyr::arrange(-n) |>\n  dplyr::pull(pkgs)\npkgs_ordered\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ggplot2\" \"dplyr\"   \"readr\"  \n[4] \"stringr\" \"tidyr\"   \"purrr\"  \n[7] \"forcats\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\\index{dplyr!mutate} \\index{base!factor}\n\nnotice that tibble is missing\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npkgs_levels <- c(\n  pkgs_ordered,\n  setdiff(core_tidyverse, pkgs_ordered)\n)\nplot_data <- r_pkgs_date |>\n  dplyr::mutate(\n    pkgs = factor(pkgs, levels = pkgs_levels)\n  )\n```\n:::\n\n\n\n\n\n\nor use desc\n\n\n\n### Packages and functions\n\n### The first plot\n\n\\index{ggplot2!ggplot} \\index{ggplot2!geom\\_area} \\index{ggplot2!aes} \\index{ggplot2!facet\\_wrap}\n\nWe set `drop = FALSE` to allow the {tibble}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nbase_plot <- ggplot(plot_data) +\n  geom_area(\n    mapping = aes(\n      x = date,\n      y = n,\n      fill = pkgs\n    )\n  ) +\n  facet_wrap(~pkgs, nrow = 1, drop = FALSE)\nbase_plot\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in min(diff(unique_loc)): no\nnon-missing arguments to min; returning\nInf\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Plot](r-packages_files/figure-html/fig-r-pkgs-base-plot-1-1.png){#fig-r-pkgs-base-plot-1}\n:::\n:::\n\n\n\n\n\n\nget a warning\n\nYou'll also notice there's one week 141 times. I double checked this data and it is actually correct\n\nmisleading - stringr and readr have same number of uses, but it looks like stringr is used significantly more - 0 is not included\nforcats has only one use - but represented 0 times since \n\n\\index{tidyr!complete}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_plot_data <- plot_data |>\n  tidyr::complete(\n    date, pkgs,\n    fill = list(n = 0)\n  )\n```\n:::\n\n\n\n\n\n\n\\index{utils!head}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(new_plot_data, n = 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 Ã— 3\n  date       pkgs        n\n  <date>     <fct>   <int>\n1 2023-01-03 ggplot2    24\n2 2023-01-03 dplyr       9\n3 2023-01-03 readr       2\n4 2023-01-03 stringr     0\n5 2023-01-03 tidyr       3\n6 2023-01-03 purrr       0\n7 2023-01-03 forcats     0\n8 2023-01-03 tibble      0\n```\n\n\n:::\n:::\n\n\n\n\n\n\nnotice that tibble now included as well\n\nupdating data set on plot, could just rerun\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot <- base_plot %+% new_plot_data\nbase_plot\n```\n\n::: {.cell-output-display}\n![Plot](r-packages_files/figure-html/fig-r-pkgs-base-plot-2-1.png){#fig-r-pkgs-base-plot-2}\n:::\n:::\n\n\n\n\n\n\n## Advanced styling\n\n### Colours\n\n[@rcartocolor]\n\n\\index{rcartocolor!carto\\_pal}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbg_col <- \"#3A3B3C\"\ntext_col <- \"white\"\ncol_palette <- rcartocolor::carto_pal(9, \"Bold\")[1:8]\nhighlight_col <- col_palette[1]\n```\n:::\n\n\n\n\n\n\n\\index{ggplot2!scale\\_fill\\_manual}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_plot <- base_plot +\n  scale_fill_manual(\n    values = col_palette,\n    drop = FALSE\n  )\ncol_plot\n```\n\n::: {.cell-output-display}\n![Plot](r-packages_files/figure-html/fig-r-pkgs-col-plot-1.png){#fig-r-pkgs-col-plot}\n:::\n:::\n\n\n\n\n\n\n### Fonts\n\n\\index{sysfonts!font\\_add\\_google} \\index{showtext!showtext\\_auto} \\index{showtext!showtext\\_opts}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsysfonts::font_add_google(\n  name = \"Source Code Pro\",\n  family = \"source\"\n)\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi = 300)\nbody_font <- \"source\"\n```\n:::\n\n\n\n\n\n\n### Adding text\n\nAs we've done in previous chapters, we'll use the `social_caption()` function we defined in @sec-cats to create a caption containing Font Awesome icons with social media handles: \\index{social\\_caption}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsocial <- social_caption(\n  bg_color = bg_col,\n  icon_color = highlight_col,\n  font_color = text_col,\n  font_family = body_font\n)\n```\n:::\n\n\n\n\n\n\n, ... quote from the ... [... website]() in italics using `*`.\n\nWe also join together the subtitle text, data source information, and social media caption using `paste0()` (although you could use `glue()` instead). \\index{base!paste0}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle <- \"How many times did I use {tidyverse} packages for TidyTuesday?\"\nst <- \"The tidyverse is a collection of open source R packages that *share an underlyingdesign philosophy, grammar, and data structures of tidy data*. Of the 8 core tidyverse packages, {ggplot2} was my most used package for TidyTuesday visualisations in 2023.\"\ncap <- paste0(\n  st,\n  \"<br>**Data**: github.com/nrennie/tidytuesday<br>**Graphic**:\",\n  social\n)\n```\n:::\n\n\n\n\n\n\nWe can then pass this text into the `labs()` function to apply it to our plot. We also set `x = \"\"` to remove the x-axis text, and define a more informative y-axis title. \\index{ggplot2!labs}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext_plot <- col_plot +\n  labs(\n    title = title,\n    subtitle = cap,\n    x = \"\",\n    y = \"Number of package calls\"\n  )\n```\n:::\n\n\n\n\n\n\n::: {#tip-packages-axis .callout-tip}\n\n## Removing axis titles\n\nThere are multiple different ways to remove the axis labels. You can set `x = \"\"` as we've done here, or `x = NULL`. You can also set `axis.text.x = element_blank()` inside `theme()` to remove the text. \\index{ggplot2!theme} \\index{ggplot2!element\\_theme}\n\n:::\n\n### Adjusting themes\n\n\\index{ggplot2!scale\\_x\\_date} \\index{ggplot2!scale\\_y\\_continuous} \\index{ggplot2!coord\\_cartesian} \\index{lubridate!ymd}\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlimits_plot <- text_plot +\n  scale_x_date(\n    limits = c(\n      lubridate::ymd(20230101), lubridate::ymd(20231231)\n    ),\n    breaks = c(\n      lubridate::ymd(20230101), lubridate::ymd(20230701)\n    ),\n    labels = c(\"Jan\", \"Jul\")\n  ) +\n  scale_y_continuous(\n    limits = c(0, 150),\n    breaks = c(0, 50, 100, 150)\n  ) +\n  coord_cartesian(expand = F)\nlimits_plot\n```\n\n::: {.cell-output-display}\n![Plot](r-packages_files/figure-html/fig-r-pkgs-limits-plot-1.png){#fig-r-pkgs-limits-plot}\n:::\n:::\n\n\n\n\n\n\n\\index{ggplot2!theme\\_dark} \\index{ggplot2!theme} \\index{ggplot2!element\\_rect} \\index{ggplot2!element\\_text} \\index{grid!unit} \\index{ggplot2!element\\_blank} \\index{ggplot2!element\\_line} \\index{ggtext!element\\_textbox\\_simple}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_plot <- limits_plot +\n  theme_dark(\n    base_size = 6,\n    base_family = body_font\n  ) +\n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(5, 10, 5, 10),\n    # plot background\n    plot.background = element_rect(\n      fill = bg_col, colour = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, colour = bg_col\n    ),\n    # facet strip text and background\n    strip.background = element_rect(\n      fill = bg_col, colour = bg_col\n    ),\n    strip.text = element_text(\n      face = \"bold\"\n    ),\n    panel.spacing = unit(0.5, \"lines\"),\n    # title and subtitle text\n    plot.title.position = \"plot\",\n    plot.title = ggtext::element_textbox_simple(\n      colour = text_col,\n      hjust = 0,\n      halign = 0,\n      margin = margin(b = 5, t = 5),\n      face = \"bold\",\n      size = rel(1.4)\n    ),\n    plot.subtitle = ggtext::element_textbox_simple(\n      colour = text_col,\n      hjust = 0,\n      halign = 0,\n      margin = margin(b = 5, t = 0)\n    ),\n    # axes styling and grid lines\n    axis.text = element_text(\n      colour = text_col\n    ),\n    axis.title = element_text(\n      colour = text_col\n    ),\n    axis.ticks = element_blank(),\n    panel.grid.major = element_line(\n      colour = alpha(text_col, 0.2),\n      linewidth = 0.2\n    ),\n    panel.grid.minor = element_line(\n      colour = alpha(text_col, 0.3),\n      linewidth = 0.2\n    )\n  )\ntheme_plot\n```\n\n::: {.cell-output-display}\n![Plot](r-packages_files/figure-html/fig-r-pkgs-theme-plot-1.png){#fig-r-pkgs-theme-plot}\n:::\n:::\n\n\n\n\n\n\n## Using images as facet labels\n\nPackages such as {ggimage} [@ggimage] or {ggtextures} [@ggtextures] can be used to plot images based on columns in the data. For example, ... . However, here we want to plot images based on ...\n\nno need for PNG, ggimage etc. adding images outside of the plotting area.\n\nwe've already ... the package we need - ggtext\ncan also do with marquee\n\n\\index{glue!glue}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_levels <- glue::glue(\n  \"&nbsp;&nbsp;&nbsp;&nbsp;<img src='images/hex/{pkgs_levels}.png' width='20'>\"\n)\n```\n:::\n\n\n\n\n\n\n\\index{dplyr!mutate} \\index{glue!glue} \\index{base!factor}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_img_data <- new_plot_data |>\n  dplyr::mutate(\n    pkgs = glue::glue(\"&nbsp;&nbsp;&nbsp;&nbsp;<img src='images/hex/{pkgs}.png' width='20'>\")\n  ) |>\n  dplyr::mutate(\n    pkgs = factor(pkgs, levels = new_levels)\n  )\n```\n:::\n\n\n\n\n\n\nAs we did earlier, let's update the data\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimg_plot <- theme_plot %+% plot_img_data\n```\n:::\n\n\n\n\n\n\nWe also \n\n\\index{ggplot2!theme} \\index{ggtext!element\\_textbox\\_simple}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimg_plot +\n  theme(\n    strip.text.x = ggtext::element_textbox_simple(\n      color = text_col,\n      face = \"bold\",\n      hjust = 0.5,\n      halign = 0.5\n    ),\n  )\n```\n\n::: {.cell-output-display}\n![Plot](r-packages_files/figure-html/fig-r-pkgs-final-plot-1.png){#fig-r-pkgs-final-plot}\n:::\n:::\n\n\n\n\n\n\n## Reflection\n\nmaybe a lgo scale - skewed by ne big value (maybe point out the big value - hard to see)\n\nimportance of explcitly capturing 0 (implicitly not good)\nimplicit/explicit missing data - does it mean 0 \n\nmatch the colors to the image colors - green for stringr\n\n::: {.content-visible when-format=\"html\"}\n\n## The making of...\n\nEach plot created during the process of developing the original version of this visualisation was captured using {camcorder}, and is shown in the gif below. If you'd like to learn more about how {camcorder} can be used in the data visualisation process, see @sec-camcorder.\n\n![](images/r-pkgs.gif){fig-align=\"center\"}\n\n:::\n",
    "supporting": [
      "r-packages_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}