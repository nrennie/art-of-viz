---
filters:
  - line-highlight
execute: 
  freeze: true
---

# Programming Languages: dumbbell charts with {ggplot2} {#programming}

IN this cahpter, dumbeell charts, data-driven captions with {glue}, and styling using fonts and colours, wrapping text with ggtext

## Data

[@pldb]

The PLDB was used as a \#TidyTuesday dataset in March 2023, meaning we can load the data into R using the {tidytuesdayR} R package [@tidytuesdayR]. 

might be multiple datasets 

```{r}
#| label: langauges-load-data-show
#| eval: false
#| echo: true
tuesdata <- tidytuesdayR::tt_load("2023-03-21")
languages <- tuesdata$languages
```

```{r}
#| label: langauges-load-data-hide
#| output: false
#| echo: false
#| eval: true
languages <- readr::read_csv("data/languages.csv")
```

You can alternatively read the data in via {tidytuesdayR} using the year and week. For example `languages <- tidytuesdayR::tt_load(2023, week = 12)`, but personally I find remember the date much easier! You can also read the data in directly from the CSV file on GitHub using `read.csv()` or `read_csv()` from {readr}. 

What does the data look like?

```{r}
#| label: langauges-data-head
head(languages)
```

checks it's read in correctly 
View

The data has x rows and columsn

What are the variables?

there are many variables, many of them have lots of NA vaues

## Exploratory work

what is table - bar charts if categories, box plots if one cont one cat, scatter plot if two cont, line plot if over time

### Data exploration

rank i smost obvious "response" if stat

appeared last activ

```{r}
#| label: fig-languages-scatter
#| fig-cap: ""
plot(
  languages$last_activity, languages$language_rank
)
```

straight away highights the role of data vis in exploratory lang

- are these incorrect values
- are dates anchored wrong 01011970

in this case actually years so prob correct we could filter out,

first programming lang 1950s (need source)

```{r}
#| label: fig-languages-scatter-filter
#| fig-cap: ""
lang_df <- subset(languages, last_activity >= 1950)
plot(
  lang_df$last_activity, lang_df$language_rank
)
```

callout tip - dplyr/base R

are pl

```{r}
#| label: fig-languages-pl-barplot
#| fig-cap: ""
barplot(
  table(lang_df$type)
)
```

```{r}
#| label: fig-languages-comment-barplot
#| fig-cap: ""
barplot(
  sort(table(lang_df$line_comment_token))
)
```

### Exploratory sketches

## Preparing a plot

### Data wrangling

```{r}
#| label: langauges-data-wrangling-1
comment_df <- lang_df |>
  dplyr::filter(type == "pl") |>
  dplyr::filter(line_comment_token %in% c("//", "#", ";")) |>
  dplyr::select(title, appeared, line_comment_token, last_activity, language_rank) |>
  tidyr::drop_na()
```

```{r}
#| label: langauges-data-wrangling-2
comment_df2 <- comment_df |> 
  dplyr::mutate(label = paste("Comment token:", line_comment_token)) |>
  dplyr::group_by(label) |>
  dplyr::slice_head(n = 10) |>
  dplyr::mutate(n = factor(dplyr::row_number(), levels = 1:10)) |>
  dplyr::ungroup() |>
  dplyr::select(label, n, title, appeared, last_activity, language_rank)
```

need to rename to something better

```{r}
#| label: langauges-data-wrangling-3
plot_data <- comment_df2 |> 
  tidyr::pivot_longer(
    cols = c(appeared, last_activity),
    names_to = "type",
    values_to = "year"
  )
```

### Packages and functions

### The first plot

maybe split into two or three

```{r}
#| label: fig-langauges-basic-plot1
#| warning: false
library(ggplot2)
basic_plot <- ggplot(data = plot_data) +
  geom_line(mapping = aes(x = year, y = n, group = n)) +
  geom_point(mapping = aes(x = year, y = n)) +
  facet_wrap(~label)
basic_plot
```

reorder axes

```{r}
#| label: fig-langauges-scales-plot
basic_plot +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = c(1970, 1990, 2010, 2030),
    limits = c(1930, 2030),
    expand = c(0, 0)
  )
```

update to open ended

## Advanced styling

### Colours

Why save colours as variables?

```{r}
#| label: langauges-colour-vars
bg_col <- "grey5"
main_col <- "#66FF00"
```

redo plot

```{r}
#| label: fig-langauges-basic-plot2
basic_plot <- ggplot(data = plot_data) +
  geom_line(
    mapping = aes(x = year, y = n, group = n),
    colour = main_col
  ) +
  geom_point(
    mapping = aes(x = year, y = n),
    colour = main_col,
    fill = bg_col,
    pch = 22
  ) +
  facet_wrap(~label) +
  # add scales back in
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = c(1970, 1990, 2010, 2030),
    limits = c(1930, 2030),
    expand = c(0, 0)
  )
basic_plot
```

### Text and fonts

{sysfonts}\index{sysfonts}
{showtext}\index{showtext}

Text as variables

```{r}
#| label: langauges-text-vars
title <- "Programming Languages"
subtitle <- "Of the 4,303 programming languages listed in the Programming Language DataBase, 205 use //, 101 use #, and 64 use ; to define which lines are comments. 3,831 languages do not have a comment token listed."
caption <- "Data: Programming Language DataBase | Graphic: N. Rennie"
```

subtitle ... can wegenerate from text - use glue 

add to plot

```{r}
#| label: fig-langauges-text_plot
text_plot <- basic_plot +
  labs(
    title = title,
    subtitle = subtitle,
    caption = caption
  )
text_plot
```

runs off the edge - we'll deal with that later
Choosing a font

showtext
google fonts

```{r}
#| label: langauges-showtext
sysfonts::font_add_google("VT323", "vt")
sysfonts::font_add_google("Share Tech Mono", "share")
showtext::showtext_auto()
showtext::showtext_opts(dpi = 300)
```

font as variables


```{r}
#| label: langauges-font-vars
body_font <- "share"
title_font <- "vt"
```


basic theming

```{r}
#| label: langauges-minimal-theme
theme_plot1 <- text_plot +
  theme_minimal(
    base_size = 8,
    base_family = body_font
  )
```

### Adjusting themes

better theme

```{r}
#| label: fig-langauges-style1
theme_plot1 +
  theme(
    plot.background = element_rect(
      fill = bg_col,
      colour = bg_col
    ),
    panel.background = element_rect(
      fill = bg_col,
      colour = alpha(main_col, 0.5),
      linewidth = 0.4
    ),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_line(
      colour = alpha(main_col, 0.5),
      linewidth = 0.2
    ),
    panel.grid.major.y = element_blank(),
    strip.text = element_text(
      colour = main_col
    ),
    axis.text.y = element_blank(),
    axis.text.x = element_text(
      colour = main_col,
      vjust = 2
    ),
    plot.title = element_text(
      colour = main_col,
      family = title_font
    ),
    plot.subtitle = element_text(
      colour = main_col,
      margin = margin(b = 5)
    ),
    plot.caption = element_text(
      colour = main_col,
      margin = margin(b = 5),
      hjust = 0
    ),
    axis.ticks = element_blank(),
    plot.margin = margin(10, 15, 5, 0)
  )
```

make title bigger
stop subtitle running off
ggtext

```{r}
#| label: fig-langauges-style2
theme_plot2 <- theme_plot1 +
  theme(
    plot.background = element_rect(
      fill = bg_col,
      colour = bg_col
    ),
    panel.background = element_rect(
      fill = bg_col,
      colour = alpha(main_col, 0.5),
      linewidth = 0.4
    ),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_line(
      colour = alpha(main_col, 0.5),
      linewidth = 0.2
    ),
    panel.grid.major.y = element_blank(),
    strip.text = element_text(
      colour = main_col
    ),
    axis.text.y = element_blank(),
    axis.text.x = element_text(
      colour = main_col,
      vjust = 2
    ),
    plot.title = element_text(
      colour = main_col,
      family = title_font,
      size = rel(2)
    ),
    plot.subtitle = ggtext::element_textbox_simple(
      colour = main_col,
      margin = margin(b = 5),
      lineheight = 0.5
    ),
    plot.caption = element_text(
      colour = main_col,
      margin = margin(b = 5),
      hjust = 0
    ),
    axis.ticks = element_blank(),
    plot.margin = margin(10, 15, 5, 0)
  )
theme_plot2
```

Add labels

```{r}
#| label: fig-langauges-add-labels
theme_plot2 +
  geom_text(
    mapping = aes(x = 1932, y = n, label = title),
    family = body_font,
    vjust = 0.5,
    hjust = 0,
    size = 3,
    colour = main_col
  )
```


make better labels

```{r}
#| label: langauges-better-labels
plot_data <- plot_data |>
  dplyr::mutate(rank_label = glue::glue("{title}\nRank: {language_rank}"))
```

plot

```{r}
#| label: fig-langauges-add-better-labels
theme_plot2 +
  geom_text(
    data = plot_data,
    mapping = aes(x = 1932, y = n, label = rank_label),
    family = body_font,
    vjust = 0.5,
    lineheight = 0.7,
    hjust = 0,
    size = 2.5,
    colour = main_col
  )
```

make html labels instead

```{r}
#| label: langauges-html-labels
plot_data <- plot_data |>
  dplyr::mutate(rank_label = glue::glue("<p>{title}</p><p style='font-size:6pt;'>(Rank: {language_rank})</p>"))
```

plot with geom_richtext ggtext

```{r}
#| label: fig-langauges-add-html-labels
theme_plot2 +
  ggtext::geom_richtext(
    data = plot_data,
    mapping = aes(x = 1932, y = n, label = rank_label),
    family = body_font,
    fill = "transparent",
    label.colour = "transparent",
    vjust = 0.5,
    hjust = 0,
    size = 2.5,
    colour = main_col
  )
```

Saving an image

comments on dpi

```{r}
#| label: langauges-save
#| eval: false
#| echo: true
ggsave()
```

## Reflection

open ended

::: {.content-visible when-format="html"}

## The making of...

Each plot created during the process of developing the original version of this visualisation was captured using {camcorder}, and is shown in the gif below. If you'd like to learn more about how {camcorder} can be used in the data visualisation process, see @sec-camcorder.

![](images/languages.gif){fig-align="center"}

:::
