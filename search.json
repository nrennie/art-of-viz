[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Art of Data Visualization with ggplot2",
    "section": "",
    "text": "Preface\n\n\n\n\n\n\nWelcome to the online version of The Art of Data Visualization with ggplot2 also known as The TidyTuesday Cookbook by Nicola Rennie.\nThis book is currently a work-in-progress. This book will be published by CRC Press.\n\n\n\nWelcome to The Art of Data Visualization with ggplot2 (also known as The TidyTuesday Cookbook). TidyTuesday is a weekly social data project which aims to make learning to work with data easier, by providing real-world datasets. Participants are encouraged to explore the data shared via GitHub each week, create an output such as a data visualization, and share their output alongside their code, with the community.\nAfter three years of weekly contributions, I’ve worked with around 150 datasets and created over 150 data visualizations. Each chapter of this book will cover a different data visualization, showing: the data exploration process; the choice of data visualization type; the initial design ideas with hand-drawn sketches; the first build of a plot; and the iterative process of styling plots. For each plot, full R code is provided and explained for each step of the creative process. None of the visualizations you’ll see were created specifically for this book - each one is an original data visualization created using real TidyTuesday datasets over a series of years. Think of each chapter as a case study starting with a new data set you’ve never seen before, and working through a process to get to an insightful, artistic visualization. This book is all about that process. Sometimes the data is messy. Sometimes the code is hacky. Sometimes, upon reflection, the data could be visualized better.\nData visualization can be a very effective and efficient means of communicating information. Visualizing your data typically serves one of two purposes: (i) as part of exploratory analysis to help uncover discrepancies in data and identify interesting relationships to measure; or (ii) to communicate key insights and messages to a broader audience. The case-study nature of this book means that we’ll talk about both of these aspects, though we ’ll focus mostly on the second. Choosing an appropriate type of visualization and making careful choices about design can clarify the message you are trying to convey to a reader. That does not necessarily mean that every chart must follow a set of rules and stick to a rigid format. Instead, data visualization is a blend of science and creativity - many of the key landmark data visualizations held up as excellent examples don’t fit into the standard categories of bar charts, scatter plots, or line graphs.\nThat being said, the visualizations in this book are not necessarily always the most effective choice of visualization for the data and relationship shown. Rather, this book aims to show you examples of the end-to-end process of creating data visualizations, with a focus on the technical details of building them in R. You’ll see some non-standard solutions and unusual ideas that you can use to transform your data visualizations.\n\n\nAcknowledgements\nThis book would never have been possible if I hadn’t stumbled upon TidyTuesday several years ago, and so I’m exceptionally grateful for the team behind it. In particular, Jon Harmon who has spent much of his own free time building a wonderful community of data science folks, and maintaining the TidyTuesday datasets alongside other open source projects. Special thanks also to Tom Mock, Tracy Teal, Lydia Gibson, and Tan Ho for their work in supporting TidyTuesday and the wider Data Science Learning Community. Many thanks to those who have curated and submitted datasets for TidyTuesday over the years.\nMore broadly, the R and Data Visualization communities have been a source of inspiration, support, and odds bits of knowledge both before and during the writing of this book. I’m sure they will continue to be afterwards.\nThanks also to Emanuele Giorgi and Claudio Fronterrè for their help in reviewing early drafts, and for their encouragement throughout the process of writing this book. Thank you to CRC Press for agreeing to publish this book, and special thanks to Lara Spieker for her guidance and support.\nBasically, in short, I’m very grateful for the big, nerdy data community around me.\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "author.html",
    "href": "author.html",
    "title": "Author",
    "section": "",
    "text": "Nicola Rennie\n\n nicola-rennie\n nrennie\n fosstodon.org/@nrennie\n nrennie\n nrennie.rbind.io\n\n\nNicola Rennie is a data visualization specialist and enthusiast, with an academic background in mathematics and statistics. She holds a PhD in Statistics and Operational Research, which focused on analysing and visualising transport demand. She is particularly interested in how we use data visualization to communicate complex, quantitative information in an accessible way, as well as the intersection of visualization and art. She has experience of teaching at both undergraduate and postgraduate level, in courses covering fundamentals of data science, statistical methods, and programming. Nicola has also previously worked in data science consultancy, and delivered training courses covering topics including advanced data visualization with R, statistical modelling, and reproducible reporting. She is the author and maintainer of several R packages, including multiple ggplot2 extension packages. Nicola is a regular speaker at R and data science meetups, has been the chapter organizer of R-Ladies Lancaster, and part of the R-Ladies Global Team. She is co-author of the Royal Statistical Society’s Best Practices for Data Visualisation Guide, and is an active member of the Royal Statistical Society. Several of her data visualizations have been long-listed at the Information is Beautiful Awards.\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Author"
    ]
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 Who is this book aimed at?\nThis book is primarily aimed at those who wish to develop their data visualization skills in R. Readers of this book may find a basic knowledge of R, more specifically of the tidyverse ecosystem, useful - although all code used in examples is fully explained. Readers do not need to be experienced in ggplot2, though this book will also be of interest to those who are. This book will also be of interest to those who are already familiar with R (including ggplot2), and wish to develop their skills in designing data visualizations further. It will also interest those who already design data visualizations using other tools, and want to learn how to do the equivalent in R.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "introduction.html#what-do-you-need-to-know-before-reading-this-book",
    "href": "introduction.html#what-do-you-need-to-know-before-reading-this-book",
    "title": "1  Introduction",
    "section": "1.2 What do you need to know before reading this book?",
    "text": "1.2 What do you need to know before reading this book?\nThis book assumes you know the basics of using R and know what the tidyverse is. For example, you’ll be able to:\n\ninstall and load packages\ncall a function and save the output to variables\n\nIf you’re not that familiar with R, any of the following books should provide some good pre-reading:\n\nR for Data Science (Second Edition) by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund. It can be found online at r4ds.hadley.nz (Wickham, Çetinkaya-Rundel, and Grolemund 2023).\nR for the Rest of Us: A Statistics-Free Introduction by David Keyes. It can be found online at book.rfortherestofus.com (Keyes 2024).\nLearn R: As a Language by . It can be found online at www.learnr-book.info (Aphalo 2024).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "introduction.html#code-style-used-in-this-book",
    "href": "introduction.html#code-style-used-in-this-book",
    "title": "1  Introduction",
    "section": "1.3 Code style used in this book",
    "text": "1.3 Code style used in this book\nThere are many different versions of R, many different packages in R, and many different styles of writing code - and there isn’t a single best way of doing things. You may write code differently from the way you see it written in this book, and that’s perfectly fine. Throughout the book, a few choices have been made to keep code consistent:\n\nIn R, the pipe operator takes the thing on its left and passes it along to the function on its right (Wickham, Çetinkaya-Rundel, and Grolemund 2023). You can find a full description of the pipe operator in R for Data Science. The pipe (%&gt;%) was first introduced to R via the magrittr package. Since version 4.1.0 of R, a version of the pipe (|&gt;) has existed in base R. The base R version of the pipe is used throughout the book. Although there are some differences between the two version of the pipe, in this book they can be used interchangeably.\n\n \n\nIn this book, we’ll primarily use base R for initial exploration and visualization, and then ggplot2 and it’s associated extension packages to create our final graphic in each chapter.\nIn R, functions can be loaded from packages in different ways: through loading the entire package via the library() function; using namespacing (the pre-fixing of functions with the package name and ::); or (since R version 4.5.0) through using the use() function. Namespacing is useful for two reasons (i) from a learning perspective, it makes it easier to recognize where functions come from and how they connect together, and (ii) from a programming perspective, it reduces conflicts and errors - something we all want less of! However, to make this book more accessible to beginners and to ensure code works with earlier versions of R, we’ll be using library() throughout. Each chapter begins with a section discussing which packages will be used, and where functions come from is explained throughout.\n\n \n\nPackage names are identified in a bold, monospaced typeface to help differentiate them from functions with the same or similar names. For example ggplot2.\nAll software requirements, including a complete list of package versions, can be found in the Appendix.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "introduction.html#code-evolves-over-time",
    "href": "introduction.html#code-evolves-over-time",
    "title": "1  Introduction",
    "section": "1.4 Code evolves over time",
    "text": "1.4 Code evolves over time\nYou may also notice that some of the final images differ slightly from those initially created and published on social media. You might also find some small differences in the code used to produce them if you compare the contents of this book to original scripts in the github.com/nrennie/tidytuesday GitHub repository. These differences are likely due to one of four reasons:\n\nPackages have since been updated and code has been changed to use newer syntax. Many of the code changes relate to changes in ggplot2 version 3.5.0;\nSome aspects have been omitted from a visualization to avoid explaining everything in the first chapter - but those aspects are all covered and linked to in later chapters;\nAfter several years of practice, there may be more efficient ways of re-writing code from some of the earlier plots. Any changes are clearly labelled and discussed;\nSome images may be different due to copyright reasons.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "introduction.html#the-structure-of-this-book",
    "href": "introduction.html#the-structure-of-this-book",
    "title": "1  Introduction",
    "section": "1.5 The structure of this book",
    "text": "1.5 The structure of this book\nThere are four main sections in this book:\n\nCommon charts don’t need to be boring!: which teaches you how to make classic chart types such as lines charts, and bar charts more effective and more interesting.\nMaking use of icons, fonts, and text: where you’ll see different ways to load fonts into R, be able to use icons within charts, and use colored text as an alternative to a traditional legend.\nWorking with images: where you’ll see examples of loading and processing images in R, and learn how to add them to plots to create custom labels.\nVisualizing spatial data: where you’ll learn how to manipulate spatial data, create choropleth maps, coordinate plots, and arranging small multiples in a geographic grid.\n\nEach chapter is a case study of a different visualization, which follows roughly the same structure:\n\nData: an introduction to the data set used in each chapter and how to load it into R. Across the chapters, you’ll see ways of loading data via R packages, local CSV files, APIs, and directly from URLs.\nExploratory work: exploring the structure of the dataset, identifying issues, and considering potential approaches to visualizaton.\nPreparing a plot: performing the data wrangling needed to make the plot, and creating a first draft using basic ggplot2 functionality.\nAdvanced styling: editing the basic plot to make it of publication quality with custom styling, including fonts, colors, text, and legends.\nReflection: some thoughts on how the visualization created in each chapter may be improved, and what aspects of its design are successful.\nExercises: a few questions for following up on improving the visualizations. These exercises are purposefully left open-ended, rather than prescriptive questions with defined answers. You’re encouraged to think about how you would design and implement different solutions - sharing them on social media is optional!\n\nThere is an additional chapter at the end with some further tips and tricks for improving your plots.\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "common-charts.html",
    "href": "common-charts.html",
    "title": "Common charts don’t need to be boring!",
    "section": "",
    "text": "When you say the word chart, there are a few common types of plot that spring to mind: bar charts, scatter plots, and line charts. The fact that these charts are common often makes them good choices for communicating data because they don’t require as much effort from a reader to understand. However, some chart designers may see these as boring charts because they don’t require a lot of time or effort to create, and they’re very standard. This section discusses some examples of these common charts, and shows you how to elevate them to become anything but boring!\n\nChapter 2  Programming languages: dumbbell charts with ggplot2 will teach you how to make a dumbbell chart with ggplot2, and discuss styling charts thematically based on the data they contain.\nChapter 3  UK museums: highlighting line charts with gghighlight covers line charts, including how to retain clarity and enable better comparisons when plotting many lines.\nChapter 4  Bee colony losses: visualizing quantities with Poisson disk sampling describes the process of transforming data to present it in a different way, and how to arrange a grid of small multiple charts based on different categories.\nChapter 5  Technology adoption: making gauge charts with ggforce discusses how to use the ggforce extension package to build your own customized charts, and convert a bar chart into a gauge chart.\n\nThis section also covers loading fonts into R, and installing packages from GitHub.\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Common charts don't need to be boring!"
    ]
  },
  {
    "objectID": "programming-languages.html",
    "href": "programming-languages.html",
    "title": "2  Programming languages: dumbbell charts with ggplot2",
    "section": "",
    "text": "2.1 Data\nIn this chapter we’ll learn how to combine points and lines to create dumbbell charts, create data-driven captions, and understand how to style charts using themes, fonts, and colors.\nBy the end of this chapter, you’ll be able to:\nWe begin by loading the packages required in this chapter.\nIt’s assumed that you’re already a little bit familiar with the dplyr and tidyr packages that we’ll be using for data wrangling, alongside ggplot2 itself of course! We’ll introduce each of the other packages as we use them, but the following provides a brief summary of each package’s purpose:\nIn this chapter, we’re going to explore the Programming Languages Database (PLDB) (PLDB contributors 2022). This database is an encyclopedia of programming languages, containing information on ranking, when it was created, what type of language it is, and how many GitHub repositories use the language - to name just a few variables. Programming language creators can use the database to help design and improve programming languages, whilst programming language users can use the database to help make decisions about which languages to use or learn.\nThe PLDB is published to the public domain and can be found online at pldb.io, where you can make queries and view the data. You can also download the data in CSV or JSON format. The PLDB data was used as a TidyTuesday dataset in March 2023 (after being suggested by Jesus M. Castagnetto), meaning we can also easily load the data into R using the tidytuesdayR R package (Hughes 2022b).\nThe tidytuesdayR R package has several functions for helping to get data and information about TidyTuesday data into R. One of the most commonly used functions is the tt_load() function, which loads the data from a specific week (specified by the date) into your R session. For a given week, there may be multiple datasets, and a specific one can be accessed using the $ notation:\ntuesdata &lt;- tt_load(\"2023-03-21\")\nlanguages &lt;- tuesdata$languages\nYou can alternatively read the data in via tidytuesdayR using the year and week. For example languages &lt;- tt_load(2023, week = 12). You can also read the data in directly from the CSV file on GitHub using read.csv() from base R or read_csv() from readr.\nWhat does the data look like? We can inspect the first six rows of the data using head():\nhead(languages)\n\n# A tibble: 6 × 49\n  pldb_id  title description type  appeared creators website\n  &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;  \n1 java     Java  &lt;NA&gt;        pl        1995 James G… https:…\n2 javascr… Java… &lt;NA&gt;        pl        1995 Brendan… &lt;NA&gt;   \n3 c        C     &lt;NA&gt;        pl        1972 Dennis … &lt;NA&gt;   \n4 python   Pyth… &lt;NA&gt;        pl        1991 Guido v… https:…\n5 sql      SQL   &lt;NA&gt;        quer…     1974 Donald … &lt;NA&gt;   \n6 cpp      C++   &lt;NA&gt;        pl        1985 Bjarne … http:/…\n# ℹ 42 more variables: domain_name &lt;chr&gt;,\n#   domain_name_registered &lt;dbl&gt;, reference &lt;chr&gt;,\n#   isbndb &lt;dbl&gt;, book_count &lt;dbl&gt;, semantic_scholar &lt;dbl&gt;,\n#   language_rank &lt;dbl&gt;, github_repo &lt;chr&gt;,\n#   github_repo_stars &lt;dbl&gt;, github_repo_forks &lt;dbl&gt;,\n#   github_repo_updated &lt;dbl&gt;,\n#   github_repo_subscribers &lt;dbl&gt;, …\nYou can also use View() to open a new tab in RStudio to inspect the data in something that resembles a non-editable spreadsheet file if you prefer a more human-readable format. Inspecting the data in this very basic way (simply looking at it with our eyes first) helps to ensure that the data has been read in correctly. This dataset has 4303 rows and 49 columns - giving us many options for variables to explore further. What variables do we have? The data description contained in the TidyTuesday GitHub repository is often a good place to start. A table containing the column names and what the data in each column means, can help give you some more context for the data you are looking at - especially since columns are not always named intuitively! For the PLDB dataset, you can also look at an even more in-depth description of the variables on the dataset’s website at pldb.io/csv.html. Here, you’ll also notice that the TidyTuesday version of this dataset is a subset of a larger dataset which contains 356 variables - we’ll stick with the smaller version for this chapter!\nThere are many variables with missing (NA) values in the data. Few languages have an entry in the description column, github_ columns, reference column, or is_open_source column. Missing values are highly important. We don’t always want to simply discard rows or columns with missing values as they can often tells us a lot of important information about our data. For example, the many missing values in the github_ columns might be related to the fact that many programming languages precede GitHub’s creation in 2008. Discarding rows if they have any missing values in these columns might mean we bias any analysis to newer programming languages. There are many methods of dealing with missing data, and which method you use will depend on what you are trying to achieve. Having said that, this isn’t a statistics book, so for the purposes of visualization we’ll focus on columns that are mostly complete. Further discussion of missing data can be found in Chapter 4 and Chapter 10.\nSo which columns should we explore first? Often when we’re working with data, there is some outcome that we’re interested in. Depending on your field, you might instead hear this called the response variable or the dependent variable. You might have multiple outcomes of interest. For example, in the PLDB data, we might be interested in what affects the ranking and/or the number of GitHub stars for a programming language. These are often the variables we want to tell a story about. However, it’s also important to think about exploring relationships between other variables to make sure that the story you’re telling is the correct one. It might seem obvious that there could be a relationship between github_repo_stars and github_repo_forks, but what exactly is that relationship? What about a less obvious connection between last_activity and number_of_jobs - is there a relationship there?",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming languages: dumbbell charts with **`ggplot2`**</span>"
    ]
  },
  {
    "objectID": "programming-languages.html#exploratory-work",
    "href": "programming-languages.html#exploratory-work",
    "title": "2  Programming languages: dumbbell charts with ggplot2",
    "section": "\n2.2 Exploratory work",
    "text": "2.2 Exploratory work\nBeyond looking at the data, counting the rows and columns, and inspecting the values in different columns, a key part of exploratory work is visualizing data. These initial visualizations can help you to check if there are any issues with your data (e.g. a misspelling Monday as Mnoday). They can also help to identify interesting relationships or patterns in the data, which can guide you to further avenues for exploration and appropriate modelling techniques.\nThere are many different types of plot, and you’ll see several different examples in this book - some you may have seen before, others you may have not. But often, for those initial exploratory plots, the classic charts are a good place to start: scatter plots, bar charts, box plots, density plots, and line charts. Scatter plots are useful for exploring a relationship between two continuous variables; multiple density plots or box plots for exploring a relationship between a categorical and continuous variable; bar charts for exploring a relationship between multiple categorical variables; and line charts for how continuous variables how change over time.\n\n2.2.1 Data exploration\nWe can’t explore every column in this chapter, but you’re encouraged to do so at home. So we’ll start with language_rank - the most obvious outcome that we might want to consider. Note that, in this data, the rank starts at 0 (insert your own joke about indexing from 1 being better here…). We might want to look at the last_activity column in relation to the rank: are programming languages with more recent activity also more popular? Let’s start by making a scatter plot of last activity (on the x-axis) and language rank (on the y-axis). Adding better axis titles with xlab and ylab in Figure 2.1 isn’t necessary if it’s just you looking at these plots, but if you’re sharing them with anyone else it can be a useful thing to do. Especially if the column names are less descriptive than we see here! \n\nplot(\n  x = languages$last_activity,\n  y = languages$language_rank,\n  xlab = \"Last activity\",\n  ylab = \"Rank\"\n)\n\n\n\n\n\n\nFigure 2.1: A basic scatter plot of how language rank varies based on last activity, showing some unusual date values.\n\n\n\n\nStraight away this highlights the role of data visualization in exploratory analysis. This scatter plot don’t look quite right - the last_activity data ranges from around -1000 to just over 2000, with most of the values close to the 2000 mark. If this is supposed to be a date column, we need to think about whether these values are correct.\n\nAre these simply incorrect entries?\nAre these missing values? It’s not uncommon for missing values to be encoded as -999 for example. This is especially true if data has been processed in some other software before it’s loaded into R. Just because you have NA values in your data, doesn’t mean you can’t also have these unusually coded missing values. Values can be missing for different reasons, and sometimes they are encoded in multiple ways to demonstrate this difference.\nAre these values transformed in some way we don’t expect? Dates can be encoded as integer values - often as number of days since some origin time. The origin time used in R is often \"1970-01-01\", so it’s perfectly reasonable to have negative dates if you’re dealing with data pre-1970.\n\nIn this case, the dates are actually given as just a year (rather than a Date object) so the negative values are unlikely to be incorrectly transformed values. If we’re going to filter out these rows, which year do we use to filter them out? Before 1500? Before 1970? Let’s actually look at these rows:\n\nlanguages[order(languages$last_activity), ] |&gt; head()\n\n# A tibble: 6 × 49\n  pldb_id  title description type  appeared creators website\n  &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;  \n1 roman-n… Roma…  &lt;NA&gt;       nume…     -900 &lt;NA&gt;     &lt;NA&gt;   \n2 etrusca… Etru…  &lt;NA&gt;       nume…     -700 &lt;NA&gt;     &lt;NA&gt;   \n3 attic-n… Atti…  &lt;NA&gt;       nume…     -600 &lt;NA&gt;     &lt;NA&gt;   \n4 greek-n… Gree…  &lt;NA&gt;       nume…     -300 &lt;NA&gt;     &lt;NA&gt;   \n5 arezzo-… arez… \"The stave… musi…     1033 &lt;NA&gt;     &lt;NA&gt;   \n6 fibonac… Libe… \"The Arabi… nota…     1202 &lt;NA&gt;     &lt;NA&gt;   \n# ℹ 42 more variables: domain_name &lt;chr&gt;,\n#   domain_name_registered &lt;dbl&gt;, reference &lt;chr&gt;,\n#   isbndb &lt;dbl&gt;, book_count &lt;dbl&gt;, semantic_scholar &lt;dbl&gt;,\n#   language_rank &lt;dbl&gt;, github_repo &lt;chr&gt;,\n#   github_repo_stars &lt;dbl&gt;, github_repo_forks &lt;dbl&gt;,\n#   github_repo_updated &lt;dbl&gt;,\n#   github_repo_subscribers &lt;dbl&gt;, …\n\n\nThough the name of the Programming Languages Database may suggest that it focuses exclusively on programming languages, this isn’t true. It also includes information on query languages, stylesheet languages, and protocols, among other things. Including numeral systems as you can see here.\nLet’s look at the balance between these different types of languages in the data using a bar chart created using the barplot() function from the {graphics} package in base R. The barplot() function takes a (named) vector or matrix of counts for each category. We can create this vector of counts using the table() function from base R. Wrapping the vector inside sort() means that the bars will be plotted in ascending order. \n\nbarplot(\n  height = sort(table(languages$type)),\n  las = 2\n)\n\n\n\n\n\n\nFigure 2.2: A bar chart showing the number of different languages of each type, sorted in ascending in order from left to right.\n\n\n\n\nAlmost all of them are programming languages so let’s focus on them only, and recreate our last_activity against language_rank scatter plot. We can use the subset() function to extract only rows of the data where the type is \"pl\" and save this to a new object called pl_df. \n\npl_df &lt;- subset(languages, type == \"pl\")\nplot(\n  x = pl_df$last_activity,\n  y = pl_df$language_rank,\n  xlab = \"Last activity\",\n  ylab = \"Rank\"\n)\n\n\n\n\n\n\nFigure 2.3: A basic scatter plot of how language rank varies based on last activity, showing clustering of languages with last activity before and after 2000.\n\n\n\n\nNow, our scatter plot looks much more reasonable - with the first entries in the early 1950’s. It also presents an interesting pattern where the programming languages are split into two different clusters. Languages with last_activity after 2000 are higher ranked (in the top 3000), and those with their last activity before the year 2000 mostly ranked below. Although this is interesting, remember that we can’t really make any directional statements here. Do people prefer using languages that are more actively maintained? Or are languages more actively maintained because people prefer using them?\n\n\n\n\n\n\nTip 2.1: Subsetting data in R\n\n\n\nYou can also subset the data using the filter() function from dplyr, either with or without the use of the pipe operator: \n\npl_df &lt;- filter(languages, type == \"pl\")\n\nBoth approaches are equally valid. For this book, if we’re plotting in ggplot2, we’ll prepare data using other tidyverse packages. But if we’re plotting in base R, we’ll prepare data using base R as well.\n\n\nWhich other columns might we explore? In R, we write comments using the # symbol. For personal curiosity, we might be interested in how common that is. Of these programming languages, which symbols are used to denote comments? We can create a bar chart of the different types of line_comment_token using the barplot() function again: \n\nbarplot(\n  height = sort(table(pl_df$line_comment_token)),\n)\n\n\n\n\n\n\nFigure 2.4: A bar chart showing the number of different programming languages that each each comment symbol, sorted in ascending in order from left to right.\n\n\n\n\nUsing # for comments is the second most common symbol behind //. Is this a new trend?\n\n2.2.2 Exploratory sketches\nThe aspects of the data that we are interested in visualizing are:\n\nwhen the programming language has been used (the time between appeared and last_activity_date)\nwhat the comment symbol is\nthe ranking of the programming languages\n\nTo visualize the time between two things happening, e.g. time between appeared and last_activity_date, we could use a dumbbell chart. Essentially, a point at each of the time points and a (usually horizontal) line connecting the two - named for their resemblance to dumbbell weights. Dumbbell charts are also commonly used to show the difference between values for two categories e.g. heights for men and women, or blood pressure readings before and after a treatment. \n\n\n\n\n\n\nTip 2.2: The importance of sketching\n\n\n\nWhether you choose to use pen and paper or digital drawing tools, sketching is an important part of the design process. Sketching is for exploring visualizations (in the same way you explore the data before you decide how to process it) and refining your design ideas. It’s a quick way to describe an idea, it’s an easy way to collaborate with other people, and (because it’s just a sketch) it’s easy to throw it away if it doesn’t work. You’ll see exploratory sketches in every chapter of this book - you shouldn’t expect them to look polished or pretty!\n\n\nA dumbbell chart for the timelines of languages that use a # for comments might look something like this:\n\n\n\n\n\nFigure 2.5: Initial sketch of a dumbbell chart showing the time frame that different languages are active for a specific comment character.\n\n\nTo show how this differs between different comment symbols, we might create small multiples of this chart - essentially creating the same plot multiple times for different subsets of the data. In ggplot2, these are called facets, and might look something like this:\n\n\n\n\n\nFigure 2.6: Initial sketch of a dumbbell chart showing the time frame that different languages are active for a specific comment character.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming languages: dumbbell charts with **`ggplot2`**</span>"
    ]
  },
  {
    "objectID": "programming-languages.html#preparing-a-plot",
    "href": "programming-languages.html#preparing-a-plot",
    "title": "2  Programming languages: dumbbell charts with ggplot2",
    "section": "\n2.3 Preparing a plot",
    "text": "2.3 Preparing a plot\nDumbbell charts are essentially a combination of two things: lines and points. Although there isn’t a built-in function for creating dumbbell charts in ggplot2, there are built-in functions for creating lines and points so we have everything we need to make a dumbbell chart.\nThere are a few extensions packages that can help you to make dumbbell charts without having to assemble the lines and points yourself. The ggalt package (Rudis, Bolker, and Schulz 2017) which provides additional coordinate systems, geoms, statistical transformations, and scales for ggplot2, includes the geom_dumbbell() function which, as the name suggests, provides a quick and easy way to create dumbbell charts. The dumbbell package (Cheung 2021) also provides functionality for creating dumbbell charts.\nIn this chapter, we’re not going to use either of those for a couple of reasons:\n\nExtension packages are perfect for making charts quickly and easily, and I would encourage you to try them. But it’s also really useful to understand that, as long as you can break down the chart you want into lines, points, and polygons, then you can make it with ggplot2. That’s, at least in part, what this book is about.\nWe’re going to apply reasonably advanced customization to our dumbbell chart, and it’s useful to see how these work in ggplot2 first so that you can later apply them to other plot types more easily.\n\n\n2.3.1 Data wrangling\nWe’ll start by sub-setting the data to keep only the rows relating to languages that use one of the comment symbols that we’re interested in. If we want to look at only languages that use a //, #, or ; for comments, we can use the filter() function from dplyr in conjunction with the %in% operator. This keeps only rows where the value in the line_comment_token column is in the vector c(\"//\", \"#\", \";\"). We’ll be faceting by line_comment_token, and we want to make sure that the title of the facet is informative - not just a # symbol on its own. Although we could create a labeling function to do this, it’s even easier to just edit the text in the line_comment_token token. We use the paste() function to add the phrase \"Comment token:\" before each symbol and add this as a new column called label using mutate() from dplyr. \nTo keep our data tidy and manageable, we can drop the columns we no longer need using the select() function from dplyr to keep only the five columns we’ll be using in the visualization. We’ll also discard any rows that contain an NA value in any of these columns using drop_na() from tidyr. \n\ncomment_df &lt;- pl_df |&gt;\n  filter(\n    line_comment_token %in% c(\"//\", \"#\", \";\")\n  ) |&gt;\n  mutate(\n    label = paste(\"Comment token:\", line_comment_token)\n  ) |&gt;\n  select(\n    title, appeared, last_activity, label, language_rank\n  ) |&gt;\n  drop_na()\n\nIn each facet, we could list all programming languages that use the comment symbol related to that facet. This would also display information about how many languages use each symbol. Alternatively, we may choose to use only the top 10 ranked languages for each symbol.\nWe can extract the top 10 using slice_min() from dplyr and select the 10 with the smallest values in language_rank. Alternatively, since the data is already sorted in rank order, we can use slice_head() from dplyr to extract the first 10 rows. Since we want the top 10 rows from each comment symbol category (not just the top 10 overall), we need to group() the data based on the label column. Before we ungroup() the data, we also want to create a new column that defines the within-group ranking as this will help with plotting. The row_number() function from dplyr identifies the row number within each group so is used to define this within-group ranking. We add it as a new column called n using mutate(). \nTo aid in plotting, we also want to reformat the data to put both year columns (appeared and last_activity) into one column. We can do this using pivot_longer() from tidyr. \n\nplot_data &lt;- comment_df |&gt;\n  group_by(label) |&gt;\n  slice_head(n = 10) |&gt;\n  mutate(\n    n = factor(row_number(), levels = 1:10)\n  ) |&gt;\n  ungroup() |&gt;\n  pivot_longer(\n    cols = c(appeared, last_activity),\n    names_to = \"type\",\n    values_to = \"year\"\n  )\n\nOur plot_data looks like this:\n\nhead(plot_data)\n\n# A tibble: 6 × 6\n  title  label            language_rank n     type      year\n  &lt;chr&gt;  &lt;chr&gt;                    &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt;    &lt;dbl&gt;\n1 Python Comment token: #             3 1     appeared  1991\n2 Python Comment token: #             3 1     last_ac…  2022\n3 Perl   Comment token: #             9 2     appeared  1987\n4 Perl   Comment token: #             9 2     last_ac…  2022\n5 Ruby   Comment token: #            12 3     appeared  1995\n6 Ruby   Comment token: #            12 3     last_ac…  2022\n\n\nNow we’re ready to start plotting!\n\n2.3.2 The first plot\nOne of the especially nice features of ggplot2 is the ability to save plots as variables, and iteratively add (using +) layers to it. To make the code a little bit clearer, we’ll be creating each aspect of our plot in stages, and gradually adding more complex styling to it. We’ll save the first plot we create as basic_plot.\nAs with most plots created with ggplot2, we’ll start by calling the ggplot() function. We can define which data and aesthetic mapping we want to use either globally (in the ggplot() function) or in each individual layer. We’ll be using the same data (plot_data) for all layers, so we pass it into the data argument of ggplot(). \nNext, we start adding geometries: lines and points. The order we add the geometries is important here. We want the points to be plotted on top of the lines so that we don’t see the lines overlapping with the points. This means we need to plot the lines first, then the points. We add geometries using the different geom_* functions. To add lines, we use geom_line(). Although ggplot2 is smart, it’s not smart enough to guess which variables will be plotted on each axis. We need to specify an aesthetic mapping using the aes() function - to define which columns from the data are going on the x and y axes. We want to draw horizontal lines for our dumbbell chart, meaning that year goes on the x-axis, and the rank category, n, goes on the y-axis. By default, geom_line() draws lines between the co-ordinates in the order of the variable on the x-axis. That’s not really what we want here. We want a separate line drawn for each language, i.e. each rank, n. So we pass this into the group argument as well. This will still draw lines between co-ordinates in order of the variable of the x-axis, but separately for each rank category. To add points at each end of the dumbbell, we add geom_point() - specifying the aesthetic mapping to put the year on the x-axis and the rank on the y-axis again. We don’t need to specify a group here, although it won’t make any difference if we do. \nFinally, we also add facet_wrap() to create a small multiple plot (facet) for each category in the label column. Note the ~ required before the name of the column we wish to facet by. \n\nbasic_plot &lt;- ggplot(data = plot_data) +\n  geom_line(mapping = aes(x = year, y = n, group = n)) +\n  geom_point(mapping = aes(x = year, y = n)) +\n  facet_wrap(~label)\nbasic_plot\n\n\n\n\n\n\nFigure 2.7: A faceted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol.\n\n\n\n\nIn ggplot2 (and most other plotting software) the y-axis starts with 0 at the bottom with increasing values going upwards. However, when we visualize rankings, we usually want to put the smallest number (highest rank) at the top. So we want to reverse the y-axis here. In ggplot2, for a discrete axes, we do this by passing the rev() (short for reverse) function to the limits argument of scale_y_discrete(). \nThe current y-axis labels are not especially informative - it would be more useful to add in the names of the languages or the overall ranking rather than simply the numbers 1 to 10. Later, we’re going to add some labels in each facet to provide this information, so we’ll expand the left hand side of the x-axis to leave some space for those labels. By setting expand = expansion(0, 0) we remove the extra space that’s automatically added at either side of the axis.\n\nbasic_plot +\n  scale_y_discrete(limits = rev) +\n  scale_x_continuous(\n    breaks = c(1970, 1990, 2010, 2030),\n    limits = c(1930, 2030),\n    expand = expansion(0, 0)\n  )\n\n\n\n\n\n\nFigure 2.8: A faceted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol. High ranked languages are at the top of the chart, and the x-axis extends from 1930 to 2030.\n\n\n\n\nWe now have a basic plot that looks a little bit like the sketch in Figure 2.6. But it doesn’t look great yet. It needs a bit more work to improve both the aesthetics and the clarity of the visualization.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming languages: dumbbell charts with **`ggplot2`**</span>"
    ]
  },
  {
    "objectID": "programming-languages.html#advanced-styling",
    "href": "programming-languages.html#advanced-styling",
    "title": "2  Programming languages: dumbbell charts with ggplot2",
    "section": "\n2.4 Advanced styling",
    "text": "2.4 Advanced styling\nThere are lots of different elements of applying more advanced styling to charts, and we’ll cover a few of them in this section: colors, fonts, and themes.\n\n2.4.1 Colors\nLet’s start with colors. How do you decide which colors to use? The more complex case is where color represents a variable in the data - either through a color gradient for continuous variables, or a set of distinct colors for discrete, categorical data. We’ll come back to choosing colors for this setting in Chapter 3 and Chapter 9. Here, it’s a little bit easier since we only need to think about a few colors: the background color(s), the text color(s), and the colors for the different geometric elements. \nTo make visualizations that are more aesthetically pleasing, it’s often useful to think about whether you can match your color choices to the theme of the data. For example, if you’re creating a bar chart of pumpkin sizes, you might want to use orange for the bar color. Here, we’re creating a chart about programming languages. What color do you associate with programming languages? Personally, I think of green. Specifically, the green used in green screens (monochrome monitors that used green phosphor screens) typically in the early days of computing.\nWe can define some variables to store our colors in: a variable called bg_col that’s dark gray color we’ll use for the background; and a variable called main_col that’s a hex code for a bright green color we’ll use for the text and other geometric elements.\n\n\n\n\n\n\nTip 2.3: Colors in R\n\n\n\nThe dark gray, \"gray5\", is a pre-defined color in R. Run colors() to see the list of all 657 pre-defined colors available. \n\n\nIt’s useful to save colors as variables because it makes it much easier to edit colors later on. We could just use the hex code directly in each argument where we want to use the color. But as you’ll see when we start applying the colors to our chart, this can be many different arguments. If we decided we actually want to use a slightly different shade of green, we’d have to manually change all of them. By using a variable, we only need to change it once.\n\nbg_col &lt;- \"gray5\"\nmain_col &lt;- \"#66FF00\"\n\nAlthough you can use update_geom_defaults() to change the default colors used for lines, points, and text, this approach also changes the colors for all future plots in your R session and it’s quite tricky to return to the previous defaults. Instead, we can simply rewrite the code we already have and add in the additional colors. Note that these colors are added outside of the aes() function since they are not mapped to variables in the data. \nThe point character (pch) for geom_point() is also set to 22 - a square which allows you to color the square and its outline different colors. The outline color is set to our green main_col and the square fill color is set to the dark gray bg_col.\n\nbasic_plot &lt;- ggplot(data = plot_data) +\n  geom_line(\n    mapping = aes(x = year, y = n, group = n),\n    color = main_col\n  ) +\n  geom_point(\n    mapping = aes(x = year, y = n),\n    color = main_col,\n    fill = bg_col,\n    pch = 22\n  ) +\n  facet_wrap(~label) +\n  # add scales back in\n  scale_y_discrete(limits = rev) +\n  scale_x_continuous(\n    breaks = c(1970, 1990, 2010, 2030),\n    limits = c(1930, 2030),\n    expand = c(0, 0)\n  )\nbasic_plot\n\n\n\n\n\n\nFigure 2.9: A faceted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol with green lines and green-outlined dark gray points.\n\n\n\n\n\n2.4.2 Text and fonts\nAdding text to a visualization is important - a title, subtitle, and perhaps caption can add information to make it easier for a reader to understand what’s going on. A title quickly explains what the chart is about. Though more informative titles may be viewed as more aesthetically pleasing, there’s no evidence that they are more effective for conveying information (Wanzer et al. 2021). A subtitle might give some more information about the underlying data, explain how to interpret more complex charts, or state the conclusions a reader should come to. Captions are a good place to put information such as who made the graphic, what the source of the data is, or other important conditions on the data.\nAs with colors, we’ll define text as variables. This helps to keep the plotting code looking a little bit cleaner. It’s often easier to write the text after you’ve made the plot, and defining variables make it easy to add placeholder text while you’re working on the plot.\n\ntitle &lt;- \"Programming Languages\"\ncaption &lt;- \"Data: Programming Language DataBase | Graphic: N. Rennie\"\n\nSince our visualization doesn’t give information on how many languages use each comment symbol and just focuses on the top 10, we might want to instead present this information in the subtitle instead:\n\nsubtitle &lt;- \"Of the 4,303 programming languages listed in the Programming Language DataBase, 205 use //, 101 use #, and 64 use ; to define which lines are comments. 3,831 languages do not have a comment token listed.\"\n\nThe problem with writing out the values into a text string like this is that it’s hard to update. The snapshot of data we’re working with here is from March 2023. If we updated the data to a more recent version, we’d have to recalculate these values manually then copy and paste them into the text string. A better approach is to use data-driven text - combine calculation with text.\nThe glue package (Hester and Bryan 2024) makes it easy to combine text with variable values. The glue() function evaluates R code inside curly brackets {} and inserts it into the string. Alternatively, you can use paste() as we did earlier for the facet labels, or sprintf() in base R.\n\n\n\n\n\n\nTip 2.4: Opening and closing brackets in glue()\n\n\n\nIf you need to use a curly bracket inside the string text, you can change the .open and .close arguments of glue() to a different delimiter.\n\n\nSince the values are going into a sentence we can make use of the format() function to add commas into the number formatting - showing 4,303 instead of 4303: \n\nsubtitle &lt;- glue(\"Of the {format(nrow(languages), big.mark = ',')} programming languages listed in the Programming Language DataBase, {sum(languages$line_comment_token == '//', na.rm = TRUE)} use //, {sum(languages$line_comment_token == '#', na.rm = TRUE)} use #, and sum(languages$line_comment_token == ';', na.rm = TRUE) use ; to define which lines are comments. {format(sum(is.na(languages$line_comment_token)), big.mark = ',')} languages do not have a comment token listed.\")\n\nLet’s add the title, subtitle, and caption to the plot using the labs() function: \n\ntext_plot &lt;- basic_plot +\n  labs(\n    title = title,\n    subtitle = subtitle,\n    caption = caption\n  )\ntext_plot\n\n\n\n\n\n\nFigure 2.10: A faceted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol. An unformatted title, subtitle, and caption have been added.\n\n\n\n\nYou’ll notice that the subtitle text runs off the edge of the plot here - we’ll deal with that a little bit later. Let’s first decide on a typeface to use in the plot. As with choosing colors, when choosing typefaces it’s useful to think about choosing one that fits with the theme. Think about the typefaces used in horror films posters. Isn’t it quite different to the typefaces used in marketing children’s toys? Since we’re going with a monochrome monitor theme for the colors, we can extend that to the typeface choice by choosing a monospace typeface reminiscent of early computers.\nWorking with fonts in R isn’t always easy. When it comes to using a different font for text in R, you can use fonts that come installed with your operating system or download font files from elsewhere and load them into R. An easy way to use external fonts is through the font_add_google() function from sysfonts (Qiu 2022). This function allows you to load Google Fonts in R without worrying about downloading or installing font files. You can browse Google Fonts at fonts.google.com. The VT323 and Share Tech Mono typefaces both look like they’ll fit in with our theme. The font_add_google() function looks through the Google Fonts database for the specified typeface name (e.g. \"VT323\") and loads the font files you’ll need. The second argument, family is how we’ll refer to the typeface when using it in R. By default it’s the same as the name but it’s often useful to change it to something else (e.g. \"vt\"), especially for long typeface names. \nWe also need to make sure that whichever graphics device we are using, is able to make use of these fonts. This is where the showtext package (Qiu 2023) comes in. By running showtext_auto(), this means that the showtext package is automatically used to render text. We can also set showtext_opts(dpi = 300) to use fonts in the resolution we plan to save our image in later - see Section 2.4.4 for more details on image resolution. \n\nfont_add_google(\n  name = \"VT323\", family = \"vt\"\n)\nfont_add_google(\n  name = \"Share Tech Mono\", family = \"share\"\n)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n\n\n\n\nTip 2.5: Alternatives to showtext\n\n\n\nThere are several alternatives to showtext for working with fonts in R. Depending on what you’re creating, you might find one of these works better for you:\n\nThe `ragg`` package (Pedersen and Shemanarev 2023) uses a different graphics device, and allows to use any fonts installed on your system. You can usually install additional fonts by downloading the relevant font files, then right clicking and choosing the install option.\nThe systemfonts package (Pedersen, Ooms, and Govett 2024) allows you to locate or load local font files based on font family and style. We’ll look at an example of using {systemfonts} in Chapter 9.\nThe extrafont package (Chang 2023) which focuses on using TrueType fonts in PDF formats.\n\n\n\nExactly, as we did with colors, we’ll save typeface names as variables to make it easier to see how our plots look with different typefaces. We’ll save two variables: title_font that store the typeface for the title (and other important elements), and body_font for all other text.\n\nbody_font &lt;- \"share\"\ntitle_font &lt;- \"vt\"\n\nWhen it comes to styling to all of the non-geom elements of your plot (such as the background color, the typeface used for the title, or how the caption is aligned) this is handled by the theme() function in ggplot2. There are several built-in themes which pre-set some of the arguments such as theme_classic(), theme_minimal(), or theme_gray(). The default theme is theme_gray() - this is where the default gray background comes from. \nNormally, we want the title text to appear larger than other text. Similarly, we might want the axis text to be smaller than other text. In ggplot2, all text is defined relative to some baseline text size. If we want to increase (or decrease) the size of all text used in the plot, changing the base_size argument in the built-in themes sets the baseline text size used for all elements. This means you don’t have to individually increase the size of every single text element. Similarly, the base_family changes the default typeface used for all (non-geom) text elements.\nHere, we might start with theme_minimal() and set the base_size to 8. This is quite a small font size (smaller than the default size of 11) to make sure the plot fits within the width of the printed version of this book.\nWe can also set the base_family equal to body_font - the variable we defined earlier to store the name of the typeface we want to use for the text. \n\ntheme_plot1 &lt;- text_plot +\n  theme_minimal(\n    base_size = 8,\n    base_family = body_font\n  )\ntheme_plot1\n\n\n\nA facetted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol. The default font has been changed, and the font made slightly smaller.\n\n\n\n\n2.4.3 Adjusting themes\nWe can make some further adjustments to the styling by editing individual arguments in the theme() function. When editing theme() arguments, many arguments are specified as a type of element: element_text(), element_line(), element_rect(), element_grob(), element_render(), or element_blank().\n\n2.4.3.1 Background color\nWe can edit the background color using the panel.background and plot.background arguments. The panel.background refers to the area within the plot e.g. the area that is gray by default. The plot.background refers to area outside of this. Both of these are specified using element_rect() since they are effectively just rectangles. We want to change both the fill (inner color of the rectangle) and color (outline color of the rectangle to our chosen background color.)\n\n2.4.3.2 Grid lines\nGrid lines in ggplot2 fall into two categories: major and minor. Major grid lines are usually slightly bolder and correspond to the axis text labels. Minor grid lines are usually lighter and unlabeled. They can be controlled using the panel.grid.major and panel.grid.minor arguments, with finer control possible for x- and y-axis gridlines. They are all defined using element_line(). We can change the color of the major x-axis gridlines using the color element. To ensure the bright green color doesn’t become distracting as a background element, we can make it semi-transparent using the alpha() function from ggplot2 - 0 means fully transparent and 1 means fully opaque. The linewidth controls the width of the lines. We remove all the y-axis grid lines and all minor grid lines by setting both panel.grid.major.y and panel.grid.minor to element_blank() which removes the elements completely. We can also remove all axis ticks using axis.ticks = element_blank().\n\n2.4.3.3 Text elements\nUnfortunately, there is no base_color argument that allows us to change the color of all text elements in the same way as the base_size and base_family arguments. Within the theme() function, we can edit the text argument:\n\ntheme(\n  text = element_text(color = text_col)\n)\n\nHowever, this unfortunately misses some of the text elements in the chart such as the axis labels which retain their default colors. To make sure we edit all the text elements we need to, we can edit the color of the relevant text elements individually and change them to the green main_col color. This includes the strip.text (the facet title text) and axis.text (axis value labels), as well as the plot.title, plot.subtitle, and plot.caption. For the x-axis text, we also adjust the vjust argument to move the text slightly higher up closer to the plot area. For the y-axis text, we’ll remove it using element_blank() as well add our own labels later. The family of the title text can also be adjusted to the title_font variable we defined earlier to change the typeface. We may also want to make the title font even larger by adjusting the size element. Instead of specifying a number directly in the size argument, we instead use the rel() function. The rel() function defines the font size relative to the base size - meaning that if you change the base size, the title will also rescale accordingly. \n\n2.4.3.4 Margins\nTo add a little bit of space around the outside edge of the plot, we can define the plot.margin argument. This is specified using the margin() function (instead of one of the element_*() functions) which takes four arguments: the top, right, bottom, and left margins. A little bit of trial and error can help you to find values that look good.\n\ntheme_plot1 +\n  theme(\n    # Background color\n    plot.background = element_rect(\n      fill = bg_col,\n      color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col,\n      color = alpha(main_col, 0.5),\n      linewidth = 0.4\n    ),\n    # Grid lines\n    panel.grid.major.x = element_line(\n      color = alpha(main_col, 0.5),\n      linewidth = 0.2\n    ),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.ticks = element_blank(),\n    # Text elements\n    strip.text = element_text(\n      color = main_col\n    ),\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(\n      color = main_col,\n      vjust = 2\n    ),\n    plot.title = element_text(\n      color = main_col,\n      family = title_font,\n      size = rel(2),\n    ),\n    plot.subtitle = element_text(\n      color = main_col,\n      margin = margin(b = 5)\n    ),\n    plot.caption = element_text(\n      color = main_col,\n      margin = margin(b = 5),\n      hjust = 0\n    ),\n    # Margins\n    plot.margin = margin(10, 15, 5, 0)\n  )\n\n\n\n\n\n\nFigure 2.11: A facetted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol, with a dark gray background and green text.\n\n\n\n\nWe also need to deal with the fact that the subtitle text is too long and is running off the side of the page. There are a few options for this:\n\nWe can manually add line breaks by adding in \"\\n\" to the subtitle string where we want the line to break. This is very much a manual approach that requires a lot of trial and error.\nWe can use str_wrap() from stringr to split the text with a specified number of characters per line. This still involves a bit of trial and error to find the best line length. It also means you need to re-optimize the line length if you change the text size.\nOne of the best solutions is to use element_textbox_simple() from the ggtext package (C. O. Wilke and Wiernik 2022). The ggtext package provides improved text rendering support for ggplot2, including support for using Markdown and HTML text which you’ll see several examples of in later chapters. The element_textbox_simple() function enables you to places text in a box, with word wrapping.\nThe marquee package provides a similar functionality to ggtext, which we’ll cover in Chapter 6.\n\n \nWe can replace element_text() with element_textbox_simple() in the theme() argument for plot.subtitle to wrap the subtitle text at any font size:\n\ntheme_plot2 &lt;- theme_plot1 +\n  theme(\n    plot.background = element_rect(\n      fill = bg_col,\n      color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col,\n      color = alpha(main_col, 0.5),\n      linewidth = 0.4\n    ),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_line(\n      color = alpha(main_col, 0.5),\n      linewidth = 0.2\n    ),\n    panel.grid.major.y = element_blank(),\n    strip.text = element_text(\n      color = main_col\n    ),\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(\n      color = main_col,\n      vjust = 2\n    ),\n    plot.title = element_text(\n      color = main_col,\n      family = title_font,\n      size = rel(2)\n    ),\n    plot.subtitle = element_textbox_simple(\n      color = main_col,\n      margin = margin(b = 5),\n      lineheight = 0.5\n    ),\n    plot.caption = element_text(\n      color = main_col,\n      margin = margin(b = 5),\n      hjust = 0\n    ),\n    axis.ticks = element_blank(),\n    plot.margin = margin(10, 15, 5, 0)\n  )\ntheme_plot2\n\n\n\n\n\n\nFigure 2.12: A facetted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol. The subtitle text now wraps to the width of the page.\n\n\n\n\nFinally, since we’ve removed the y-axis labels, we need to add in some labels using geom_text(). The geom_text() function has three required aesthetics: the x and y co-ordinates of where the label should be placed, and label which defines what text is written. Here, we use the language title as the label, and put a label in each rank category, n, on the y-axis. We override the x aesthetic to place all labels in the same horizontal alignment - the exact value will take a little bit of trial and error to get right.\nWe also need to edit the appearance of the text, since its styling is separate from the theme elements. We pass out body_font variable into the family argument to set the font family for the labels, and set hjust = 0 to left-align the text. The size and color arguments can also be adjusted.\n\n\n\n\n\n\nTip 2.6: Default font sizes in geom_text()\n\n\n\nThe default font size of geom_text() is 3.88. This is slightly confusing because the size in geom_text() is defined in mm whereas the size in theme() elements is defined in pt. To match the font size in geom_text() to the theme’s font size, specify size.unit = \"pt\" in geom_text(). This argument is available from version 3.5.0 of ggplot2.\n\n\n\ntheme_plot2 +\n  geom_text(\n    mapping = aes(x = 1932, y = n, label = title),\n    family = body_font,\n    hjust = 0,\n    size = 3,\n    color = main_col\n  )\n\n\n\n\n\n\nFigure 2.13: A facetted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol, with labels added to denote the langauge.\n\n\n\n\nAlthough these labels are an improvement on not having any language label, they’re still not as informative as they could be. There’s no information about the overall rank included in the plot. There’s no way to tell if the top ranked language that uses # as a comment symbol is also the top ranked language overall or ranked as low as 1000! Let’s create a more informative label using the glue package again. We can create a new rank_label column using mutate() which combines the language name from the title column, the text \"Rank:, and the rank from the language_rank column. The \\n adds a line break between the language name and rank text. \n\nplot_data &lt;- plot_data |&gt;\n  mutate(\n    rank_label = glue(\n      \"{title}\\nRank: {language_rank}\"\n    )\n  )\n\nLet’s add these new and improved labels to our plot using geom_text(). Note that since we’ve updated the plot_data object, we need to pass the data in again: \n\ntheme_plot2 +\n  geom_text(\n    data = plot_data,\n    mapping = aes(x = 1932, y = n, label = rank_label),\n    family = body_font,\n    vjust = 0.5,\n    lineheight = 0.7,\n    hjust = 0,\n    size = 2.5,\n    color = main_col\n  )\n\n\n\n\n\n\nFigure 2.14: A facetted dumbbell chart showing time between language appearance and last activity, for the top 10 languages that use each of #, //, and ; as a comment symbol, with labels added to denote the langauge and rank.\n\n\n\n\nAnd we’re finished!\n\n2.4.4 Saving to an image file\nThere are many different options available for saving plots created with R to a file you can later use in presentations, on social media, in publications, or anywhere else you might need to: \n\nYou can use the interactive interface in RStudio by going to the Plots tab, then clicking Export and Save as Image. This creates a pop-up window where you can choose your desired file type, set the size, and choose a location to save the file in. However, this approach doesn’t allow you to set the resolution (image quality) of the file you save.\nThe base R grDevices package provides several functions for saving to different file types. For example, the png() function enables you to save PNG files with a specific height, width, and resolution. You can also set other arguments such as the background color in the png() function. The **ragg``** package [@ragg] provides a similar set of functions. For example, theagg_png()` function.\nIf you are using ggplot2 to create your plots, the ggsave() function is the easiest way to save your visualizations to a file. As detailed in the help file it defaults to saving the last plot that you displayed, using the size of the current graphics device. It also guesses the type of graphics device from the extension.\n\n\nIt’s recommended to save your images in a specific size, rather than using the size of the current graphics device in RStudio - it makes it much easier to reproduce the same image again! You can set the width and height in ggsave(), using a calculation instead of a specific value if you want a specific aspect ratio: \n\nggsave(\n  filename = \"programming-languages.png\",\n  width = 5,\n  height = 0.67 * 5\n)\n\nBy default, the width and height is given in inches (though you can change this with the unit argument) and the resolution (set with the dpi argument) is 300. If you’ve saved your final plot to a variable in R, you can pass this directly to ggsave() instead of printing the object first:\n\nggsave(\n  filename = \"programming-languages.png\",\n  plot = final_plot,\n  width = 5,\n  height = 0.67 * 5\n)\n\nIf you’re creating plots with other R packages, some of those packages will also come with their own built-in save functions.\nIf you’re saving images at a different size or resolution (e.g. 300 dpi) to the resolution that you preview images in (e.g. 96 dpi), then your saved image might not look quite how you expect. The lines and text might appear much thinner or thicker than you expect. The scale argument in ggsave() or the scaling argument in the ragg``** family of functions is one option for dealing with this. These arguments apply a scaling factor to line and text sizes allowing you to scale up (or down) your plot if it appears too small (or large) at your desired size and resolution. An even easier way to deal with this problem is to make sure you are previewing your plot at the same size and resolution as you'd like your final image to be. The **camcorder` (Hughes 2022a) package provides a solution to this issue, and you can read more about how to use it in Chapter 14.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming languages: dumbbell charts with **`ggplot2`**</span>"
    ]
  },
  {
    "objectID": "programming-languages.html#reflection",
    "href": "programming-languages.html#reflection",
    "title": "2  Programming languages: dumbbell charts with ggplot2",
    "section": "\n2.5 Reflection",
    "text": "2.5 Reflection\nEven though we’re essentially finished with this visualization, it’s useful to get some feedback on how effective it is. You could share your visualization with a colleague or friend and ask for them to critique it. Alternatively, you can reflect on your own work with a critical eye. Reflecting on your own work is often more successful if you leave your visualization alone for a little while first. When you come back to it, think about whether your choice of plot was the best one, whether the fonts need re-sizing, or if you should use a different color scheme. So, which elements of this visualization could still be improved?\nWhen using dumbbell charts to show time frames like this, the dots at each end are often taken as start and end time points. In this chart, that doesn’t quite make sense. Imagine a programming language that was last active twenty years ago and is officially no longer maintained. Then imagine a different language that was last updated last week. The end time point (showing last_activity) is represented the same way in these two cases. Using an open-ended dumbbell for languages that are still actively being maintained might be more representative of what’s actually happening in the data.\nThe labels showing the name and rank of the programming languages are a little bit hard to read. Each label isn’t distinct enough from the labels above or below it. One option would be to change the size of the image - making the image taller would allow more space between each label. A second option would be to make the language name a slightly larger bold font, with the rank in a slightly smaller font below. This would make it clearer that there are ten labels rather than 20! We’ll discuss how to add more complex formatting to text labels in Chapter 7, using the ggtext package.\n\nEach plot created during the process of developing the original version of this visualization was captured using camcorder, and is shown in the gif below. If you’d like to learn more about how camcorder can be used in the data visualization process, see Section 14.1.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming languages: dumbbell charts with **`ggplot2`**</span>"
    ]
  },
  {
    "objectID": "programming-languages.html#exercises",
    "href": "programming-languages.html#exercises",
    "title": "2  Programming languages: dumbbell charts with ggplot2",
    "section": "\n2.6 Exercises",
    "text": "2.6 Exercises\n\nUse open-ended dumbbells for languages that were last active in 2023 i.e. don’t plot a closing point.\nInstead of showing the top 10 ranked languages for these three comment symbols, recreate the visualization showing all languages that use each symbol.\n\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming languages: dumbbell charts with **`ggplot2`**</span>"
    ]
  },
  {
    "objectID": "museums.html",
    "href": "museums.html",
    "title": "3  UK museums: highlighting line charts with gghighlight",
    "section": "",
    "text": "3.1 Data\nIn this chapter we’ll consider different ways of visualising data that varies over time, aiming to avoid spaghetti charts, and instead highlight subsets of the data to better demonstrate trends and relationships.\nBy the end of this chapter, you’ll be able to:\nWe begin by loading the packages required in this chapter.\nThe new packages we’ll be exploring for the first time in this chapter are:\nThe Mapping Museums project (Mapping Museums 2021) has collected data relating to over 4,000 museums in the UK, covering museums from 1960 onward. The data can be downloaded from the Mapping Museums website at museweb.dcs.bbk.ac.uk. It was also used as a TidyTuesday (R4DS Online Learning Community 2023) data set in November 2022 (after being suggested by Tom Mock), and we’ll use that version for this chapter.\nLet’s start by reading in the data using the tidytuesdayR R package (Hughes 2022b) and looking at the definitions of the variables:\ntuesdata &lt;- tt_load(\"2022-11-22\")\nmuseums &lt;- tuesdata$museums\nThe data contains information for 35 different variables on 4191 museums. After the first museum_id columns, the next 8 columns provide information on the location of the museum - including address and co-ordinates. The next set of columns provides information about the museums such as whether it’s an accredited museum, how it’s governed, what types of items it has, and when it was open. Since this is a collated data set, information is also provided on the original source of the data for some of these variables. The remaining columns provide information on the area in which the museum is located, including information about different deprivation indices and geo-demographic group (type of area e.g. \"University Towns and Cities\"). A full glossary of the terms used can be found on the Mapping Museums website at museweb.dcs.bbk.ac.uk/glossary.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>UK museums: highlighting line charts with **`gghighlight`**</span>"
    ]
  },
  {
    "objectID": "museums.html#exploratory-work",
    "href": "museums.html#exploratory-work",
    "title": "3  UK museums: highlighting line charts with gghighlight",
    "section": "\n3.2 Exploratory work",
    "text": "3.2 Exploratory work\nLet’s start exploring what these variables look like!\n\n3.2.1 Data exploration\nThere are many different aspects of this data we could inspect:\n\nHow are museums spread out across the UK? Is there a higher concentration of museums in more affluent areas?\nWhat types of museums are most prevalent in the UK? Does this vary based on whether the museum is accredited?\nHow is the number of open museums changing over time? Are more museums opening than closing?\n\nSome of the variables, such as DOMUS_Subject_Matter have quite a lot of missing values which makes it more difficult to visualize and interpret them. Although these columns definitely warrant further exploration, we’ll ignore them for now.\nGiven the wealth of information around deprivation indices (8 different variables), that’s the first aspect of the data that jumps out. How does the number of museums vary by index of deprivation?\n\nbarplot(table(museums$Area_Deprivation_index))\n\n\n\n\n\n\nFigure 3.1: Bar chart of number of museums per level of deprivation, with higher numbers of museums shown in levels 5 and 6.\n\n\n\n\nHere, 1 is the most deprived, and 10 is the least deprived. This is quite an interesting relationship - there have been more museums in places with a moderate level of deprivation compared to higher or lower level. This might feel a little bit counter-intuitive, we might expect there to be more museums in more affluent areas.\n\n\n\n\n\n\nTip 3.1: Alternative graphics packages\n\n\n\nThis book focuses on building graphics with ggplot2 (and its various extension packages), in combination with using base R graphics for basic data exploration. However, these are not the only two graphics systems available for creating plots in R. \nJust a few of the many alternatives:\n\nlattice (Sarkar 2008): provides a framework for creating trellis graphics (also called small multiples or facet plots).\ntidyplots (Engler 2024): a newer graphics package aiming to make it easier to create publication-ready plots for scientific papers. It allows you to pipe together different functions, and add statistical summaries more easily. It also integrates with existing ggplot2 functions.\n\nPackages for interactive visualizations are also discussed in Chapter 13.\n\n\nBy looking at the total number of museums per index of deprivation in Figure 3.1, we don’t get the whole story. How many of these museums were open at once? How many are still open today? To get a better understanding of the relationship between deprivation and the number of museums, we could look at how the number of museums changed for each index of deprivation has changed since 1960 (the earliest date in the data set). Then we might be able to tell whether more are opening or closing, and how this varies across the different levels of deprivation.\n\n3.2.2 Exploratory sketches\nWe have 10 deciles of deprivation, so we’ll have 10 time series that we want to plot that show the number of museums over time. There are different options for plotting time series like this. We need to think about some different choices:\n\nWhat type of geometry will we use? Lines, points, shaded areas? Lines are the most common approach for time series data.\nDo we plot all 10 lines on the same chart and use color to denote the different levels of deprivation?\nOr do we use faceting to split it into multiple smaller plots by deprivation index?\n\nIf we go with line charts, and faceting by deprivation index, that might look something like this:\n\n\n\n\n\nFigure 3.2: Initial sketch of a faceted line chart showing change over time for each level of deprivation.\n\n\nWe could achieve something this type of plot using geom_line() and facet_wrap() from ggplot2 . We’ve talked about faceting before in Chapter 2 but we haven’t really thought much about the layouts of those facets. In Chapter 2, we used faceting with only 3 categories, where the layout choice is fairly obvious: either one column or one row. Here, we have a little bit more flexibility and we might want to think about controlling that layout.\nIf we leave it to the default options, ggplot2 usually tries to coerce it into something square-ish. Here, it would likely give us a 3x4 grid filled with 10 plots (for the 10 levels of deprivation) and 2 blank spaces. It’s not always possible, but plots without those blank spaces often look a lot cleaner and tidier. We could do either a 5x2 (or 2x5) grid, or a 10x1 (or 1x10) grid to fit our small multiple plots into a perfect rectangle. A 5x2 grid works better here since we don’t want to make a very wide but very short plot.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>UK museums: highlighting line charts with **`gghighlight`**</span>"
    ]
  },
  {
    "objectID": "museums.html#preparing-a-plot",
    "href": "museums.html#preparing-a-plot",
    "title": "3  UK museums: highlighting line charts with gghighlight",
    "section": "\n3.3 Preparing a plot",
    "text": "3.3 Preparing a plot\nSo let’s get started on preparing the data to create this plot!\n\n3.3.1 Data wrangling\nThis is one of those very real datasets - the data wrangling is not straightforward for the data. In fact, the two columns relating to opening and closing dates are the two that will require the most attention.\nFirst, let’s drop any columns that we don’t actually need using the select() function from dplyr - we only need the Year_opened, Year_closed, and Area_Deprivation_index columns to calculate the number of museums open each year. There are a few NA values in the Area_Deprivation_index column so we’ll drop those rows using drop_na() from tidyr.\nNow let’s start dealing with the year columns. If you look at the values, you’ll notice that they’re not exactly what you’d expect in a year column:\n\nhead(museums$Year_opened, 4)\n\n[1] \"2012:2012\" \"1971:1971\" \"1984:1984\" \"1971:1971\"\n\nhead(museums$Year_closed, 4)\n\n[1] \"9999:9999\" \"2007:2017\" \"9999:9999\" \"2012:2012\"\n\n\nEach entry is in fact two years, separated by a :. According to the Mapping Museums glossary, this is because these are actually date ranges. For some museums, it wasn’t possible to establish an exact opening or closing date, and instead a date range is given based on partial information. For example, a value of \"2007:2017\" means the museum opened (or closed) sometime between 2007 and 2017.\nLet’s separate out these year values into four columns instead of two using the separate_wider_delim() function from tidyr . We separate based on the :, and create two new columns, opened1 and opened2 from the Year_opened column. We do the same thing for the Year_closed closed column. We also want to make sure that these new columns are numeric rather than character columns, so we use mutate() and across() from dplyr to convert them using as.numeric() . We can also convert the Area_Deprivation_index to a factor rather than a numeric and make sure the order is correct.\n\nmuseum_subset &lt;- museums |&gt;\n  select(\n    Year_opened, Year_closed, Area_Deprivation_index\n  ) |&gt;\n  drop_na() |&gt;\n  separate_wider_delim(\n    Year_opened,\n    delim = \":\",\n    names = c(\"opened1\", \"opened2\")\n  ) |&gt;\n  separate_wider_delim(\n    Year_closed,\n    delim = \":\",\n    names = c(\"closed1\", \"closed2\")\n  ) |&gt;\n  mutate(\n    across(\n      c(opened1, opened2, closed1, closed2), as.numeric\n    ),\n    Area_Deprivation_index = factor(\n      Area_Deprivation_index,\n      levels = 1:10\n    )\n  )\n\n\n\n\n\n\n\nTip 3.2: Using separate() from tidyr\n\n\n\nIn older versions of tidyr, the separate() function would have been used instead of separate_wider_delim(). The separate() function has now been superseded. \n\n\nNow we need to think about how to deal with all of these year columns:\n\nIf the date before the : and the date after the : are the same, we want to treat it as an exact year and only keep one value.\nIf the dates do not match, we need to decide a way of choosing which year to use. The simplest approach is to take the midpoint of the date range.\nIf the value in the Year_closed column is \"9999:9999\", this means that the museum is still open.\n\nLet’s start with the last of these issues first. For the closed1 and closed2 columns, if the value is \"9999\", we’ll convert it to an NA_real_ value. We can do this using a combination of mutate(), across(), and if_else() from dplyr .\nThe remaining two issues can be dealt with at the same time using case_when() from dplyr . We can create a new column called closed which:\n\nif closed1 and closed2 are equal, takes this equal value;\nif closed1 and closed2 are not equal, takes the value in the middle (rounded so that we work only with whole year values).\n\nThe same approach is then applied to create another new column called opened. There are no instances in the data where one of the closing dates is NA but the other is not, so we don’t need to worry about that. We can also tidy up the output by dropping any columns we don’t need, renaming the Area_Deprivation_index to something a little bit shorter and easier to work with, and arranging the data by level of deprivation. \n\nmuseum_data &lt;- museum_subset |&gt;\n  mutate(across(\n    c(closed1, closed2),\n    ~ if_else(.x == 9999, NA_real_, .x)\n  )) |&gt;\n  mutate(closed = case_when(\n    closed1 == closed2 ~ closed1,\n    closed1 != closed2 ~ round((closed2 + closed1) / 2)\n  )) |&gt;\n  mutate(opened = case_when(\n    opened1 == opened2 ~ opened1,\n    opened1 != opened2 ~ round((opened2 + opened1) / 2)\n  )) |&gt;\n  select(Area_Deprivation_index, opened, closed) |&gt;\n  rename(deprivation = Area_Deprivation_index) |&gt;\n  arrange(deprivation)\n\nThis gives us data that looks like this:\n\nhead(museum_data)\n\n# A tibble: 6 × 3\n  deprivation opened closed\n  &lt;fct&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 1             1988     NA\n2 1             1984   2007\n3 1             1983     NA\n4 1             1969     NA\n5 1             1989     NA\n6 1             1995     NA\n\n\nThe first entry in museums_data is a museum in the most deprived decile which opened in (approximately) 1988 and is still open.\nWhat we want to know is how many museums were open in a given year for each level of deprivation. Let’s create a function that takes three inputs: a year of interest, a level of deprivation, and the museum_data. Inside the function, we can then filter() the data to only the level of deprivation we’re interested in. Then we can count how many museums opened before or in the year we’re interested in. We can then do the same for how many museums closed (remembering to deal with the NA values for museums that are still open). The difference between the two will be how many were open in that year. \n\nnum_year &lt;- function(year, dep, data = museum_data) {\n  df &lt;- filter(data, deprivation == dep)\n  num_open &lt;- sum(df$opened &lt;= year)\n  num_closed &lt;- sum(df$closed &lt;= year, na.rm = TRUE)\n  diff &lt;- num_open - num_closed\n  return(diff)\n}\n\nLet’s test it works:\n\nnum_year(1980, 3)\n\n[1] 186\n\n\nThere were 186 museums open in 1980, in an area in the third deprivation decile. Now, we need to run this function for every combination of year (from 1960 to 2021) and deprivation level (from 1 to 10). There are many different ways of doing this in R, and we’re going to use the purrr package (Wickham and Henry 2023). We start by creating two variables with sequences of years and levels of deprivation - this is useful for testing if the code works because we can easily change it to a smaller number of years. Then we use expand.grid to create a data.frame with all of the combinations and pass this in as the first argument to pmap_vec from purrr. The second argument to pmap_vec is the function we want to apply (num_year()) that we defined above), where the first argument of num_year() comes from the first column of the grid of values, and the second argument from the second column. We can then convert the output into a matrix where each column is a level of deprivation, and each row is a year. \n\nall_years &lt;- 1960:2021\ndeps &lt;- 1:10\noutput &lt;- pmap_vec(\n  expand.grid(all_years, deps),\n  ~ num_year(year = .x, dep = .y)\n)\nresults &lt;- matrix(output,\n  nrow = length(all_years),\n  byrow = FALSE\n)\ncolnames(results) &lt;- 1:10\n\nNow, our data looks like this:\n\nhead(results)\n\n       1  2   3   4   5   6   7   8  9 10\n[1,] 103 78 110 125 125 124 122 110 76 51\n[2,] 103 78 112 132 125 131 126 113 77 53\n[3,] 104 78 113 138 129 135 129 117 83 58\n[4,] 105 79 118 140 136 140 130 123 85 60\n[5,] 105 79 122 144 139 145 135 126 86 64\n[6,] 106 80 123 148 143 147 137 128 89 67\n\n\nWe’re almost ready to start plotting our data! We just need to convert this into a tibble() (or data.frame), add the year column using mutate(), and put the data into a long format using pivot_longer from tidyr . We want to end up with a 3 column data set, where the 3 columns are: year, deprivation, and museums (number of open museums).\n\nplot_data &lt;- results |&gt;\n  as_tibble() |&gt;\n  mutate(year = all_years) |&gt;\n  pivot_longer(\n    -year,\n    names_to = \"deprivation\",\n    values_to = \"museums\"\n  ) |&gt;\n  mutate(\n    deprivation = factor(deprivation, levels = 1:10)\n  )\n\n\n3.3.2 The first plot\nOne of most common approaches to visualising multiple time series, is to plot multiple lines on the same plot. Although we’re already thinking about facets, it’s still worth seeing what those line charts look like. It can help us to understand the overall variability of the data. We can create the initial plot using ggplot() to define the data and the aesthetic mapping with the aes() function. We have year on the x-axis, museums on the y-axis, and each line will have a different color based on deprivation. The actual lines are then added with geom_line(). \n\nggplot(\n  data = plot_data,\n  mapping = aes(\n    x = year,\n    y = museums,\n    color = deprivation\n  )\n) +\n  geom_line()\n\n\n\n\n\n\nFigure 3.3: A line chart of total number of museums open per year for each level of deprivation, with the overlapping lines resembling spaghetti!\n\n\n\n\nThere are a few things that jump out immediately about this plot:\n\nThe variability is increasing over time: in 1960 the gap between the highest and lowest values is much smaller than the gap between the highest and lowest values in 2020.\nIt’s difficult to tell which line belongs to which level of deprivation: some of the colors are quite similar, many of the lines intersect, and the order of the legend is generally in reverse to the order of the lines.\nIt’s what we might call a spaghetti plot: it shows the overall trend across all levels, but it’s hard to tell the difference between different levels of deprivation.\n\nLet’s go back to our previous idea, and try separating out the deprivation levels into different facets. We can do this using facet_wrap(~deprivation, nrow = 2) , with the nrow argument used to create that 5x2 grid we talked about earlier. Let’s also try changing geom_line() to geom_area(). Although line charts and area charts can both show the same data, line charts often cause us to focus more on the trend over time. In contrast, area charts often cause us to focus on the total volume over time - helping to highlight differences in total number of open museums over time rather than just increases and decreases. Remember to also change color to fill in the aesthetic mapping! \n\nggplot(\n  data = plot_data,\n  mapping = aes(x = year, y = museums, fill = deprivation)\n) +\n  geom_area() +\n  facet_wrap(~deprivation, nrow = 2)\n\n\n\n\n\n\nFigure 3.4: An area chart of total number of museums open per year for each level of deprivation, with the each deprivation level in a different facet.\n\n\n\n\nThis tells a similar story to the initial bar chart in Figure 3.1 - there are more museums open in the areas with moderate levels of deprivation. This plot still isn’t ideal, for a couple of reasons:\n\nThe number of open museums in 1960 is different in each faceted plot: since they all start at different levels, it makes it more difficult to compare the relative increases or decreases.\nIt’s hard to directly compare one facet to another since each facet only contains one trend line: we have to imagine overlaying the lines in our head to compare one trend line to another.\n\n\n\n\n\n\n\nTip 3.3: Specifying variables for facets\n\n\n\nThere are different ways to specify which variables are used for facets in ggplot2. Here, we’ve written facet_wrap(~deprivation) which makes use of the formula shorthand, ~, to tell ggplot2 to facet by the deprivation variable.\nHowever, you may also see facet variables specified using the vars() function, like facet_wrap(vars(deprivation)). Using the vars() function makes it easier to facet by multiple variables, but it’s a more modern approach so you may see it less often if you’re looking for other examples.\n\n\nWe could solve these problems by making two changes:\n\nRescale the data based on the number of museums open in 1960; and\nShow all 10 lines on each faceted plot but highlight only one relating to each level of deprivation.\n\n3.3.3 Highlighting with gghighlight\n\nThe second change can be implemented easily using the gghighlight package (Yutani 2023). gghighlight is a ggplot2 extension package, specifically designed for highlighting points and lines based on some conditions. Let’s switch back to geom_line() and add gghighlight(). We set use_direct_label = FALSE because gghighlight will otherwise add a label to each highlighted line - unnecessary since each line is labelled by it’s facet label already. \n\nggplot(\n  data = plot_data,\n  mapping = aes(\n    x = year,\n    y = museums,\n    color = deprivation\n  )\n) +\n  geom_line() +\n  facet_wrap(~deprivation, nrow = 2) +\n  gghighlight(use_direct_label = FALSE)\n\n\n\n\n\n\nFigure 3.5: A line chart of total number of museums open per year for each level of deprivation, with the each deprivation level in a different facet and individual lines highlighted.\n\n\n\n\nWe can also perform an additional bit of data wrangling to rescale the values by their 1960 levels. We start by filtering the data to only include data from the year 1960 and keeping only the deprivation and museums columns . Then, we join this baseline data back to our original data based on the deprivation level, and for each year calculate the percentage change since 1960 and save it in a new column called change. \n\nlookup &lt;- plot_data |&gt;\n  filter(year == 1960) |&gt;\n  select(deprivation, museums)\n\nnew_plot_data &lt;- plot_data |&gt;\n  left_join(lookup, by = \"deprivation\") |&gt;\n  rename(\n    museums = museums.x,\n    museums_1960 = museums.y\n  ) |&gt;\n  mutate(\n    change = (\n      100 * (museums - museums_1960) / museums_1960)\n  ) |&gt;\n  select(year, deprivation, change)\n\nWe can then re-do our line chart using the rescaled change data on the y-axis instead:\n\nbasic_plot &lt;- ggplot(\n  data = new_plot_data,\n  mapping = aes(x = year, y = change, color = deprivation)\n) +\n  geom_line() +\n  facet_wrap(~deprivation, nrow = 2) +\n  gghighlight(use_direct_label = FALSE)\nbasic_plot\n\n\n\n\n\n\nFigure 3.6: A line chart of percentage increase in museums (compared to 1960) for each level of deprivation, with the each deprivation level in a different facet and individual lines highlighted.\n\n\n\n\nThis is starting to look promising, but there are still ways that we can style our chart to improve it.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>UK museums: highlighting line charts with **`gghighlight`**</span>"
    ]
  },
  {
    "objectID": "museums.html#advanced-styling",
    "href": "museums.html#advanced-styling",
    "title": "3  UK museums: highlighting line charts with gghighlight",
    "section": "\n3.4 Advanced styling",
    "text": "3.4 Advanced styling\nSo what can we do to make this chart better?\n\nWe can get rid of the legend. The colors are based on the levels of deprivation, which are already labelled on the facet titles.\nThe default choice of color isn’t great - they’re not grayscale printing friendly, and they’re not colorblind friendly either.\nIt’s not immediately clear what this chart shows: it could do with some text to explain what’s going on.\n\n\n3.4.1 Colors\nLet’s get started with choosing some colors. As discussed in Chapter 2, we’ll save color codes as variables: either using hex codes or color names. Let’s use \"black\" for text, and \"#fafafa\" for the background color. The use of a light gray rather than white for the background is primarily personal preference - it’s less glaringly bright on a screen. Although, you do have to be a bit more careful around contrast of text against the background - hence the black text. \n\nbg_col &lt;- \"#FAFAFA\"\ntext_col &lt;- \"black\"\n\nFor the colors of the lines, we can use the viridis package (Garnier et al. 2024). The viridis package provides multiple different color palettes which are designed to be visually pleasing, perceptually-uniform ,and colorblind friendly. The default viridis palette includes purples, blues, greens, then yellows. Viridis color palettes are most commonly used with continuous data, rather than categorical data. However, since the categories that we wish to color (levels of deprivation) are ordered, they will work well here too. The viridis package includes functions to add the colors to plots made with ggplot2. Here, we use the scale_color_viridis() function, specify that we want a discrete palette and that the lowest values should have the yellow colors with direction = -1 .\n\ncol_plot &lt;- basic_plot +\n  scale_color_viridis(\n    discrete = TRUE,\n    direction = -1\n  )\ncol_plot\n\n\n\n\n\n\nFigure 3.7: An updated version of the previous chart with colors chosen from the {viridis} R package.\n\n\n\n\n\n3.4.2 Text and fonts\nLet’s start by loading in a different typeface using font_add_google() from sysfonts and setting font options with showtext . Raleway is a minimalist, sans serif typeface, and we’ll use it for both body text and title text. We can save it as a single variable, body_font.\n\nfont_add_google(name = \"Raleway\")\nshowtext_auto()\nshowtext_opts(dpi = 300)\nbody_font &lt;- \"Raleway\"\n\n\n\n\n\n\n\nTip 3.4: Typeface vs. font vs. font family\n\n\n\nThomas Lin Pederson’s blog post about fonts in R (Pedersen 2025) highlights the different meanings of the words typeface and font (family), which are often (incorrectly) used interchangeably:\n\nTypeface:the design of a set of characters e.g. Arial\nFont: a specific style and size of that typeface e.g. Arial Bold 12pt\nFont family: a group of related fonts that share the same typeface but vary in styles e.g. Arial Bold and Arial Italic\n\nAlthough these terms do have different meanings, in ggplot2, the family argument is often used to specify the typeface so you may see the terms used interchangeably in this book.\n\n\nWe also need to define a title, subtitle, and caption. Adding a question as a title can help guide readers towards what you want them to see, but also force them to look for themselves. Here, we ask Are there fewer museums opening in more deprived areas? in the title - telling readers to look at changes across the levels of deprivation, but not giving them the answer straight away.\nThe subtitle then goes onto explain what the answer is, and exactly what is shown in the chart. The caption is more extended here than you may see in many charts because it explains more about the source of the data and what the variables actually are. Understanding definitions of variables isn’t something we should ever take for granted. Unless you are already familiar with indices of deprivation, it may not be clear that 1 means higher levels of deprivation.\n\ntitle &lt;- \"Are there fewer museums opening in more deprived areas?\"\nst &lt;- \"The change in the estimated number of open museums since 1960 is significantly lower in areas with higher levels of deprivation. *Since around 2000, the number of open museums has stagnated across all areas, regardless of deprivation index. However, the rate of growth prior to this stagnation is lower in more deprived areas.\"\ncap &lt;- \"*The Index of Multiple Deprivation (IMD) measures the relative deprivation of geographic areas in the UK, aggregating different dimensions (income, employment, education, health, crime, housing, and living environment). The index ranges from 1 (most deprived) to 10 (least deprived).&lt;br&gt;&lt;br&gt;**In some instances it has been impossible to establish an exact opening or closing date for a museum. In these cases, museums’ opening and closing dates are taken to be the mid point of a specified range of possible dates.&lt;br&gt;&lt;br&gt;N. Rennie | Data: museweb.dcs.bbk.ac.uk\"\n\n\n\n\n\n\n\nTip 3.5: Adding line breaks using &lt;br&gt;\n\n\n\nThe caption includes HTML line breaks, &lt;br&gt;, since we’ll be using element_textbox_simple() from ggtext for processing the text elements as we’ve done in previous chapters. \n\n\nLet’s add the title, subtitle, caption, and a y-axis label in using the labs() function. We can also remove the default column name label on the x-axis as it’s very clear that the x-axis shows years. \n\ntext_plot &lt;- col_plot +\n  labs(\n    title = title, subtitle = st, caption = cap,\n    x = \"\",\n    y = \"% change in estimated number of\\nopen museums since 1960**\"\n  )\n\n\n3.4.3 Adjusting themes\nNow we need to edit the theme() elements to apply the text fonts and styles, edit the background colors, and remove the legend. \nIn ggplot2, the axis limits are chosen automatically based on the range of the data. It’s often useful to chose limits (and breaks) that are nice - it makes it easier to calculate where other values are. We can set scale_y_continuous(limits = c(0, 300)) to make the range of the y-axis between 0 and 300. We can also set coord_cartesian(expand = FALSE) to remove the extra space around the plot area that is added by default - giving a slightly cleaner look. Using theme_minimal() as a base, we can set the default font size and family using base_size = 7 and base_family = body_font. \nSetting legend.position = \"none\" removes the legend on the right hand side. The plot.title.position = \"plot\" and plot.caption.position = \"plot\" arguments make sure that the title, subtitle, and caption text are all aligned with the left side of the plot area. The default is to align with the edge of the panel area (the area shaded gray by default), which doesn’t look good when you have long axis labels, or a multiline axis title on the y-axis.\nThe panel.spacing argument controls how close the facets are to each other - this can help to stop the year labels on side-by-side plots from overlapping. Setting plot.margin = margin(10, 15, 10, 10) adds some extra space around the outside of the plot, with the higher value on the right hand side compensating and balancing out the space from the axis title on the left hand side. The plot.background and panel.background arguments set the background color of the plot and panel areas to be the bg_col variable previously defined.\nFor the plot.title, plot.subtitle, and plot.caption, arguments, we use element_textbox_simple() from ggtext to make sure that any Markdown or HTML syntax is processed, and to automatically wrap the text in the subtitle and caption. The text is all left-aligned, with a lineheight of 0.5, and set to use the text_col variable for the color. The title font is made slightly larger and in bold. The axis.text is also set to be text_col colored with a lineheight of 0.5 using element_text(). \nNow, we have our final plot:\n\ntext_plot +\n  scale_y_continuous(limits = c(0, 300)) +\n  coord_cartesian(expand = FALSE) +\n  theme_minimal(base_size = 7, base_family = body_font) +\n  theme(\n    legend.position = \"none\",\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    panel.spacing = unit(1, \"lines\"),\n    plot.margin = margin(10, 15, 10, 10),\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    plot.title = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5,\n      size = rel(1.2),\n      face = \"bold\",\n      margin = margin(b = 5)\n    ),\n    plot.subtitle = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5\n    ),\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col,\n      lineheight = 0.5\n    ),\n    axis.text = element_text(\n      color = text_col,\n      lineheight = 0.5\n    )\n  )\n\n\n\n\n\n\nFigure 3.8: A styled version of the previous plot - with a custom font, colored background, and better spacing.\n\n\n\n\nAnd we can save it to a file using ggsave() as we did in Chapter 2. In Chapter 2, when saving our final plot to a file, we saved it as a PNG file. However, that’s not the only option. We could also have saved in as a JPG, PDF, TIFF, or SVG (to name just a few options). So how do we decide what file type to use? \nFormats such as PNG and JPG save raster images i.e. information is stored about each pixel. This means that they are able to capture highly detailed information. However, this also means that file sizes can be large. Raster images also don’t scale well - when you increase the size of an image, it tends to become blurry and lower in quality. Formats such as PDF or SVG are vector images i.e. information is stored about each line and shape in the image. This means it’s easier to rescale without losing quality, and file sizes can be smaller (at least for graphics that are not excessively complex).\nRaster images tend to be better for complex visualisations and images, or when fixed resolution is preferred such as in a website. Vector images tend to be better for graphics that are likely to need resizing or be interactive. For the remainder of this book, we’ll continue to save in PNG format for consistency in the print version of the book. \n\nggsave(\n  filename = \"museums.png\",\n  width = 5,\n  height = 0.67 * 5\n)",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>UK museums: highlighting line charts with **`gghighlight`**</span>"
    ]
  },
  {
    "objectID": "museums.html#reflection",
    "href": "museums.html#reflection",
    "title": "3  UK museums: highlighting line charts with gghighlight",
    "section": "\n3.5 Reflection",
    "text": "3.5 Reflection\nIs there anything that could still be improved about this plot? The axis text denoting the years only appears on the bottom row of faceted plots. This makes it a little bit tricky to see what’s going on in the first row without first looking at the years in the row below. It’s a fairly minor point, but adding year labels to the top row would just make it easier for a reader.\nWe removed the legend from the plot with the reason that the colors are based on the levels of deprivation, which are already labelled on the facet titles. This same argument could be used to remove the colors altogether. There’s no need to use color here to denote the deprivation levels when the deprivation levels are given by the facet titles. Especially since the yellow color is harder to see against the pale background color. Using a stronger color e.g. red for all highlighted lines, would be better for making the lines stand out, and reduce confusion about what the colors mean. \nEach plot created during the process of developing the original version of this visualization was captured using camcorder, and is shown in the gif below. If you’d like to learn more about how camcorder can be used in the data visualization process, see Section 14.1.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>UK museums: highlighting line charts with **`gghighlight`**</span>"
    ]
  },
  {
    "objectID": "museums.html#exercises",
    "href": "museums.html#exercises",
    "title": "3  UK museums: highlighting line charts with gghighlight",
    "section": "\n3.6 Exercises",
    "text": "3.6 Exercises\n\nEdit the visualization to use a single color (of your choice) to highlight each line, instead of the viridis color palette.\nEdit the facet labels to indicate directly on the chart which ones are the least deprived and most deprived.\n\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>UK museums: highlighting line charts with **`gghighlight`**</span>"
    ]
  },
  {
    "objectID": "bee-colonies.html",
    "href": "bee-colonies.html",
    "title": "4  Bee colony losses: visualizing quantities with Poisson disk sampling",
    "section": "",
    "text": "4.1 Data\nIn this chapter, we’ll learn how to explore patterns in missing data, install R packages that aren’t available on CRAN, find out how to perform Poisson disk sampling, and create plots that are faceted by two variables.\nBy the end of this chapter, you’ll be able to:\nWe begin by loading the packages required in this chapter.\nWe’ll be using ggplot2 for plotting, and ggtext for text styling as we’ve done in previous chapters, with dplyr and tidyr used for preparing the data downloaded with tidytuesdayR. Again, sysfonts and showtext are used for loading and rendering different fonts. In this chapter, we’ll be using two packages that haven’t been mentioned yet:\nAs a major pollinator, bees are a vitally important part of our planet’s ecosystem. However, their numbers are in decline due to factors including habitat loss, pesticide use, and diseases (Brown, Mark J.F. and Paxton, Robert J. 2009). The United States Department of Agriculture (USDA) annually publishes data on honey bee colonies, which includes information about the number of colonies, the size of colonies, the percentage of colonies lost or added, and factors that have been identified as colony health stressors (United States Department of Agriculture: Economics, Statistics and Market Information System 2022).\nThe USDA honey bee colony data was used as a TidyTuesday (R4DS Online Learning Community 2023) data set in January 2022 (after being suggested by Georgios Karamanis), and so can be loaded in using the tidytuesdayR package:\ntuesdata &lt;- tt_load(\"2022-01-11\")\ncolony &lt;- tuesdata$colony\nstressor &lt;- tuesdata$stressor\nSince this version of the data is based on the 2021 release, it includes data up to June 2021. If you want to work with a more recent publication of the data, it can be obtained from usda.library.cornell.edu/concern/publications/rn301137d.\nTwo different data sets are included. The first, colony, contains information about the number and size of bee colonies in each US state per year since 2015. The second, stressor, contains information about different sources of health stressors for bee colonies and what percentage of colonies are affected by these stressors, again for different states and time periods.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bee colony losses: visualizing quantities with Poisson disk sampling</span>"
    ]
  },
  {
    "objectID": "bee-colonies.html#exploratory-work",
    "href": "bee-colonies.html#exploratory-work",
    "title": "4  Bee colony losses: visualizing quantities with Poisson disk sampling",
    "section": "\n4.2 Exploratory work",
    "text": "4.2 Exploratory work\nIn this chapter, we’ll focus on the colony data, where we’ll try to build a picture of how bee colony numbers are changing over time.\n\n4.2.1 Data exploration\nLet’s start by looking at a quick box plot of how the number of colonies (colony_n) is changing over time, using the base R boxplot() function: \n\nboxplot(\n  colony_n ~ year,\n  data = colony,\n  horizontal = TRUE,\n  xlab = \"Number of bee colonies\",\n  ylab = NULL\n)\n\n\n\n\n\n\nFigure 4.1: Simple boxplot of number of bee colonies per year, showing a highly skewed distribution.\n\n\n\n\nFigure 4.1 doesn’t actually give us much information - except to suggest the distribution of the number of colonies is highly skewed and to suggest there are quite a few high values being classified as outliers. These outliers force the main section of the box plots to be squashed on the left of the plot, making it difficult to tell if much is changing on average each year. This is also a more general problem with box plots. There are many examples of data that illustrate the insufficiency of summary statistics, with Anscombe’s quartet (Anscombe 1973) being perhaps the most famous example. Box plots are essentially just summary statistics in disguise. Different data with identical box plots can actually come from very different distributions (Matejka and Fitzmaurice 2017).\nLet’s start by trying to understand what’s causing these outliers. Are they real values? Are they mistakes in the data? Or have we made an incorrect assumption about the data? To understand this a bit better, let’s zoom in on one year, 2020, and look at the number of colonies in each state to understand which states the largest outliers relate to. \n\ncolony_2020 &lt;- subset(colony, year == 2020)\nboxplot(\n  colony_n ~ state,\n  data = colony_2020,\n  horizontal = TRUE,\n  las = 1,\n  xlab = \"Number of bee colonies\",\n  ylab = NULL\n)\n\n\n\n\n\n\nFigure 4.2: Boxplot of the number of bee colonies per state, showing an issue with the definition of ‘state’.\n\n\n\n\nThough there are a few states (California, Florida, and North Dakota) with a much higher number of colonies, the main issue is that one of the states is the entirety of the United States i.e. the sum of all of the other values. You can also see from Figure 4.2 that not all states are included individually - an \"Other States\" category is also included instead which groups some states (and perhaps regions).\n\n\n\n\n\n\nTip 4.1: Choose appropriate column names\n\n\n\nIt’s unfortunately not uncommon for a column name to suggest one thing (e.g. each value relates to a state), but for that column to actually include other values as well (e.g. a country). If you’re ever naming columns (especially for data you’ll share with other people) choose appropriate column names to avoid confusion. For example, region would be a more appropriate column name here.\n\n\nThe other aspect of our data that box plots don’t tell us about is the missingness. Box plots only plot what’s there, not what’s not there. It’s especially important to remember this step since base R graphics don’t warn you about NA values in the way that ggplot2 (Wickham 2016) does. So how do we plot data that doesn’t exist? \nThe visdat package (Tierney 2017) is an excellent way to take a quick look at your data. It includes the vis_miss() function which, as the name suggests, allows you to get a quick visualization of which values are missing. To avoid creating an overwhelmingly large plot, we’ll start by visualising just the data for one state. We can use the subset() function from base R to obtain just the data for Alabama. \n\ncolony_AL &lt;- subset(colony, state == \"Alabama\")\nvis_miss(colony_AL)\n\n\n\n\n\n\nFigure 4.3: A plot showing the missing values in the rows and columns in the subset of the data related to Alabama, with missing values represented by black squares.\n\n\n\n\nYou may notice that the column names in the plot generated by vis_miss() in Figure 4.3 are rotated and this causes the right-most column name to run off the edge of the chart area. There are two solutions that can help with this problem: \n\nUse the abbreviate_vars() function from visdat which abbreviates column names, and makes them less likely to exceed the available space.\nExploit the fact that the plot output from vis_miss() is made with ggplot2. This means we can use the theme() function to extend the space available in the plot’s right margin.\n\n\ncolony_AL |&gt;\n  abbreviate_vars(min_length = 8) |&gt;\n  vis_miss() +\n  theme(plot.margin = margin(r = 25))\n\n\n\n\n\n\nFigure 4.4: A plot showing the missing values in the rows and columns in the subset of the data related to Alabama, with missing values represented by black squares. The label for the last column of data is now legible and not hidden by the edge of the plot.\n\n\n\n\nIn Figure 4.4, the rows are ordered in time, and you can see that there is no particular pattern appearing. The colony_reno_pct column has the most missing data, and that there a short time period where all data (other than the time and state) is missing. If you were to recreate this visualization for other states, you would see a similar pattern. \nData is unavailable for all states during the period April-June 2019. This suggests that the data is not simply randomly missing, but there was perhaps a persistent data collection issue during this time period. Though it cannot be seen in Figure 4.4, there is also (implicitly) missing data for the end of the last year in the data. This is due to the time when the data is reported, with annual data releases happening in August. This means we need to be careful with taking averages across years, as data is not complete for all years.\nFor this chapter, we’re not going to dive into methods for modelling, imputing, or removing missing values in data as that’s a very big topic on its own. But whether or not you are explicitly addressing missing values, it’s important to be aware of whether there are missing values, consider what aspect of the data collection processes might have caused them, and the impact this has on what conclusions you can draw.\nInstead, we’ll limit our visualization to a quarter for which we have complete data e.g. perhaps only looking at annual trends in the \"January-March\" time period, though this approach does still have its limitations. The data is recorded quarterly, so there are four options for us to choose from: \"January-March\", \"April-June\", \"July-September\", or \"October-December\". Here, we’ll focus on data for \"October-December\". The reason for this choice is because this time period is regarded as the start of the seasonal cycle for honey bees colonies, and the “condition of the colony at this time of year greatly affects its prosperity for the next year” (Mid-Atlantic Apiculture Research and Extension Consortium 2024).\n\n\n\n\n\n\nTip 4.2: Avoid missing patterns about missingness\n\n\n\nBy default, the visdat packages assumes that missing data is encoded as NA. This is not always true - especially when you’re working with data that’s been processed by other software before you receive it. It’s not uncommon for missing values to be encoded using values such as \"\", \" \", 99, 999, -, or 0. The naniar package (Tierney and Cook 2023) is very useful for summarizing and wrangling missing values. The replace_with_na() function from naniar can help you to replace unusual encoding of missing values with NA for easier data processing in R. \nIt’s also important to think about the ordering of the columns and rows when visualizing missing values. For example, if there is a column which holds a date, ordering the rows by date before visualising the missing data, will allow you to identify temporal patterns in the missingness. If the rows are ordered in some other way, you might miss this pattern.\n\n\n\n4.2.2 Exploratory sketches\nFor each state, let’s visualize the average number of colonies for each year. There are multiple ways we could do this: line charts or area charts are obvious first choices. Perhaps even a simple bar chart could be effective here. But let’s try to be a bit more creative, and a bit more artistic, in our choice of visualization. There are many ways we could represent the number of things (bee colonies) in each combination of two variables (state and year). We have data available for every combination of state and year, so let’s create a grid of states and years, as in Figure 4.5.\n\n\n\n\n\nFigure 4.5: Initial sketch showing a grid of squares, with each square representing a combination of year and US state.\n\n\nNow in each grid square, we’re simply trying to show the number of things. How might you do that? You could draw a circle, where the size of the circle shows the number of things. Or you could color each square, where the intensity of the color shows the number of things. Or you could draw lots of points, where the number of points shows the number of things as in Figure 4.6. This type of chart can be called a dot density plot, which is commonly used for geographic data. \nWe might also choose to visualise only a subset of states (either focusing on states in a specific region, or simple states we’re most interested in).\n\n\n\n\n\nFigure 4.6: Initial sketch showing a grid of squares, with the number of dots representing the number of bee colonies in each year and US state.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bee colony losses: visualizing quantities with Poisson disk sampling</span>"
    ]
  },
  {
    "objectID": "bee-colonies.html#preparing-a-plot",
    "href": "bee-colonies.html#preparing-a-plot",
    "title": "4  Bee colony losses: visualizing quantities with Poisson disk sampling",
    "section": "\n4.3 Preparing a plot",
    "text": "4.3 Preparing a plot\nTo bring this plot to life, we need to complete several tasks:\n\nCalculate the average number of colonies per year, per state.\nSimulate x- and y- coordinates for the points that will represent the number of colonies.\nPlot the points.\n\nThis is the type of chart that has a lot of (at times complex) preparation, but the plotting itself will be relatively straightforward.\n\n4.3.1 Data wrangling\nLet’s start by selecting a subset of states to visualize:\n\nstates_to_plot &lt;- c(\n  \"California\", \"North Dakota\", \"Florida\",\n  \"Texas\", \"Idaho\", \"South Dakota\"\n)\n\nWe then use the filter() function from dplyr to subset the data to only include rows for these states, and in our chosen time period of \"October-December\". We also use the select() function to keep only the columns we actually need for our plot - the year, the state, and the number of colonies: \n\nplot_data &lt;- colony |&gt;\n  filter(\n    state %in% states_to_plot,\n    months == \"October-December\"\n  ) |&gt;\n  select(\n    year, state, colony_n\n  )\n\nBy default, the states will be ordered in alphabetical order. To make it easier to communicate patterns, we’ll order the states based on the number of colonies in the final year of the data (2020). We start by determining what that order is by filtering the data to the year 2020, arranging the data based on the colony_n column in a descending order (using desc() from dplyr), and then extracting the state column using pull(). \n\nstate_levels &lt;- plot_data |&gt;\n  filter(year == 2020) |&gt;\n  arrange(desc(colony_n)) |&gt;\n  pull(state)\n\nWe’ll convert the state column to a factor a little bit later, and this state_levels vector will provide us with the factor levels\nNow we need to generate the points that will represent the number of honey bee colonies in each grid square, as we sketched in Figure 4.6. We could do something simple, such as using the runif() function to generate x and y coordinates from a uniform distribution. However, this approach is likely to lead a plot that looks a bit messy. Randomness doesn’t usually look very nice, and we would likely end up with lots of overlapping points. Instead, we want to generate points that don’t overlap and are at least some minimum distance apart. To do this, we’ll use Poisson disk sampling. \n\n4.3.2 Poisson disk sampling with poissoned\n\nPoisson disk sampling is one way of generating blue noise, a type pattern where the points are mostly random but are fairly evenly distributed. In Poisson disk sampling, all of the points must be at least some distance, \\(r\\) apart i.e. you can draw a disk of radius \\(r\\) around each point and no other point will be included in the disk.\nThere are several approaches to Poisson disk sampling. A naive (very slow) way of generating data is to sample a data point. The sample a second data point. If it is within \\(r\\) of an existing data point, throw it away. Otherwise accept it and add it to the data. Repeat. Thankfully, there are other, more computationally efficient approaches and, in R, the poissoned package (mikefc 2024) implements the approach outlined in Bridson (2007). This package allows you to generate samples in two or three dimensions - though we’ll stick to two dimensions here!\n\n\n\n\n\n\nTip 4.3: Installing R packages from GitHub\n\n\n\nUsing remotes\nWhen this chapter was first written, the poissoned package wasn’t available on CRAN, so it had to be installed from GitHub instead. The remotes package (Csárdi et al. 2024) can be used to install packages from remote repositories, such as GitHub or GitLab. We can use the install_github() function, passing in a character string of the form \"user/repository\": \n\nlibrary(remotes)\ninstall_github(\"coolbutuseless/poissoned\")\n\nUsing pak\nAn alternative to **remotes``** is the **pak** package [@pak]. In fact, it is actually an alternative way to install R packages from CRAN, Bioconductor, GitHub, URLs, git repositories, or local directories. To install a package from GitHub using **pak**, use thepkg_install()function and again pass in the“user/repository”` string: \n\nlibrary(pak)\npkg_install(\"coolbutuseless/poissoned\")\n\nThe same function can be used for installing packages from CRAN e.g. pkg_install(\"ggplot2\").\n\n\nWe need to generate the x- and y- coordinates of the points that will appear in each grid square. To do this, we’ll use the poisson2d() function from poissoned. Since we’re storing two coordinates (x and y) and the number of coordinate pairs will vary for each grid square, we’ll store the output in a list column. We can add list columns in the same way we would add any other new column using the mutate() function from dplyr. Since we want to generate samples according to the values of state, year, and colony_n in each row of our data, we use the rowwise() function from dplyr. Since we’re generating random data, we also need to make sure we set the random seed using set.seed() to ensure we get the same plot every time we run the code. \nWe want the area to be more populated and contain more points where the number of colonies is higher. This means the minimum radius between points should be smaller when the number of colonies is higher i.e. there is an inverse relationship between r and colony_n. The default grid in poisson2d() goes from 0 to 10 on both axes. The values in colony_n range from 94000 to 770000, meaning that if we simply set the minimum radius to 1/colony_n, we end up with points that are only 0.000001298701 apart. That’s a bit too small! We can multiply by a constant factor to increase this distance. After some trial and error, we set r to 200000/colony_n. \n\nset.seed(123)\nbees_grid &lt;- plot_data |&gt;\n  rowwise() |&gt;\n  mutate(\n    pts = list(\n      poisson2d(r = 200000 / colony_n)\n    )\n  )\n\nTo see the difference between Poisson disk sampling and Uniform sampling, we can simulate some data and plot it: \nset.seed(123)\n# Poisson disk sampling\npts &lt;- poisson2d()\nplot(\n  x = pts$x, y = pts$y,\n  main = \"Poisson disk sampling\"\n)\n# Uniform sampling same number of points\nplot(\n  x = runif(nrow(pts)), y = runif(nrow(pts)),\n  main = \"Uniform sampling\"\n)\n\n\n\n\n\n\n\n\n\n(a) Poisson disk sampling\n\n\n\n\n\n\n\n\n\n(b) Uniform sampling\n\n\n\n\n\n\nFigure 4.7: Plots comparing data generated using Poisson disk sampling and uniform sampling.\n\n\nYou can see in Figure 4.7 that the location of the points for Poisson disk sampling is not actually completely random, and is much nicer in appearance.\nReturning to our bees_grid data, we use unnest() from tidyr to expand the pts list column into separate rows and columns, and make sure that the state column is a factor, ordered by the state_levels variable we defined earlier. \n\nbees_plot_data &lt;- bees_grid |&gt;\n  unnest(pts) |&gt;\n  mutate(\n    state = factor(state, levels = state_levels)\n  )\n\nThis generates a data set of the following form:\n\nbees_plot_data\n\n# A tibble: 7,554 × 5\n    year state      colony_n     x     y\n   &lt;dbl&gt; &lt;fct&gt;         &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  2015 California   750000  5.29  5.79\n 2  2015 California   750000  5.67  5.44\n 3  2015 California   750000  4.78  5.70\n 4  2015 California   750000  5.40  5.30\n 5  2015 California   750000  5.76  5.01\n 6  2015 California   750000  5.29  4.89\n 7  2015 California   750000  5.07  5.50\n 8  2015 California   750000  5.90  5.70\n 9  2015 California   750000  5.09  5.18\n10  2015 California   750000  5.60  5.93\n# ℹ 7,544 more rows\n\n\n\n4.3.3 The first plot\nAs we’ve done in all previous chapters, we start our plot using the ggplot() function and pass in the default data and aesthetic mappings we’ll use for all of the layers in the plot. To add the points we use geom_point(), in the same way if we were making a traditional scatter plot. \nIn Chapter 2 and Chapter 3, we used facet_wrap() to create small multiple plots based on the levels of a categorical variable. Here we want to do something similar, but split based on the combination of levels from two categorical variables. We add the facet_grid() function to create this grid of small multiple plots, with state being the rows and year being the columns of the grid. Setting switch = \"both\" places the facet labels on the opposite side of the grid from the default. This places labels on the left for the states, and on the bottom for the years. \n\nbasic_plot &lt;- ggplot(\n  data = bees_plot_data,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point() +\n  facet_grid(state ~ year, switch = \"both\")\nbasic_plot\n\n\n\n\n\n\nFigure 4.8: A 6x6 grid with each grid square denoting a year between 2015-2020, and one of California, North Dakota, Florida, Texas, Idaho, or South Dakota. Within each square, the density of points represents the number of bee colonies. The high density for California means that the points are so closely packed that they are not distinguishable from each other.\n\n\n\n\nYou’ll notice that the points in Figure 4.8 are slightly too large - the points for the California data are even distinguishable as points, it simply looks like a black square! We’ll reduce the size of the points in the next iteration of the plot.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bee colony losses: visualizing quantities with Poisson disk sampling</span>"
    ]
  },
  {
    "objectID": "bee-colonies.html#advanced-styling",
    "href": "bee-colonies.html#advanced-styling",
    "title": "4  Bee colony losses: visualizing quantities with Poisson disk sampling",
    "section": "\n4.4 Advanced styling",
    "text": "4.4 Advanced styling\nLet’s start editing the stylistic elements of this chart to make it look more professional and visually appealing.\n\n4.4.1 Colors\nWe start by selecting some colors for our plot. We won’t be mapping any colors to columns in the data, but we still need to define a background color and a color for highlighted elements. To keep the plot looking clean, we’ll also use the same color for the text. Similar to Chapter 2, we can select these colors to match the topic of the data. What colors do you think of when you think of bees? Black and yellow. We’ll use yellow for the background color, and black for the highlight color. \n\nbg_col &lt;- \"#FECC27\"\nhighlight_col &lt;- \"black\"\n\nSince we want to visualise the number of points within each grid square, there needs to be a clear distinction between the grid squares and the plot background. This means we need to make the background color of the plotting area a different color to the background color of the facet grid square. The overall plot background should be yellow but each grid square should have a black background, and then the points will be yellow again. In hindsight, perhaps highlight_col is not the best name to represent the \"black\" color!\nLet’s remake the basic_plot from Figure 4.8, but changing the color of the points and making them smaller using the size argument: \n\nbasic_plot &lt;- ggplot(\n  data = bees_plot_data,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(\n    size = 0.1,\n    color = bg_col\n  ) +\n  facet_grid(state ~ year, switch = \"both\")\nbasic_plot\n\n\n\n\n\n\nFigure 4.9: A 6x6 grid with each grid square denoting a year between 2015-2020, and one of California, North Dakota, Florida, Texas, Idaho, or South Dakota. Within each square, the density of points represents the number of bee colonies. The reduced (now yellow) point sizes allows points to be distinguishable from each other, even in the most densely packed grid squares.\n\n\n\n\nWe’ll edit the background color of the facet grid squares later in Section 4.4.4.\n\n4.4.2 Fonts\nSince this is already quite a visually complex chart, we’ll avoid further distractions and use the same typeface for all text elements in the chart. This means we define only a single font variable, body_font. We’ll also use a simple, easy-to-read typeface. Red Hat is a sans serif typeface, with the Red Hat Text version designed for increased legibility, especially at smaller font sizes. Again, it’s available through Google Fonts and so can be loaded using font_add_google() from sysfonts, with showtext_auto() allowing plots to draw text using showtext automatically. \n\nfont_add_google(\n  name = \"Red Hat Text\", family = \"red_hat\"\n)\nshowtext_auto()\nshowtext_opts(dpi = 300)\nbody_font &lt;- \"red_hat\"\n\n\n4.4.3 Adding text\nAs in previous chapters, we write text for a title, subtitle, and caption and store the strings as variables to keep the main plotting code looking cleaner. The subtitle both describes the motivation for why the chart is important (the impact of reduced bee numbers) and gives a short explainer about how to read this non-standard chart (how the bee numbers are represented). The caption credits both the source of the data and the chart author.\n\ntitle &lt;- \"Bee colony losses in the United States\"\nst &lt;- \"Bees are vital for the preservation of ecological balance and biodiversity in nature. Bee populations are rapidly declining around the world due to habitat loss, pollution and the use of pesticides, among other factors. The number of points in each square represents the number of bee colonies that exist during the months of October - December each year.\"\ncap &lt;- \"Data: USDA | Graphic: N. Rennie\"\n\nWe can then add this text using the labs() function, and setting the title, subtitle, and caption. The x- and y- axes are meaningless for this visualization since the data is represented by the number of points rather than their locations. We remove the x- and y- axis titles by setting them both to NULL in Figure 4.10. \n\ntext_plot &lt;- basic_plot +\n  labs(\n    title = title,\n    subtitle = st,\n    caption = cap,\n    x = NULL, y = NULL\n  )\ntext_plot\n\n\n\n\n\n\nFigure 4.10: A 6x6 grid with each grid square denoting a year between 2015-2020, and one of California, North Dakota, Florida, Texas, Idaho, or South Dakota. Within each square, the density of points represents the number of bee colonies. A title, subtitle, and caption has been added though the subtitle runs off the side of the page.\n\n\n\n\n\n4.4.4 Adjusting themes\nWe can then remove the axis text and ticks using theme_void(), which also removes the grid lines. Within theme_void(), we can also set the default typeface as our pre-defined body_font variable and reduce the size to ensure the facet labels fit within their allocated space. \nSince the grid square goes from 0-10 for both the x and y axes, it would make sense for the grid square to actually be square rather than rectangular to avoid the points looking closer together in one direction. We we use coord_fixed() to force a 1:1 aspect ratio. Setting expand = FALSE to remove the extra padding around the edges of the plots also makes the differences in point density easier to see. \n\ntheme_plot &lt;- text_plot +\n  coord_fixed(expand = FALSE) +\n  theme_void(\n    base_family = body_font,\n    base_size = 7.5\n  )\n\nThe last step is adjusting the remaining theme elements: \n\nEditing the background colors for the plot (plot.background set as yellow using bg_col) and grid squares (panel.background set as black using highlight_col).\nThe text text color and margin for facet labels can be modified using the strip.text argument. Here, the text is changed separately for the x and y facet labels because we are adding slightly different margins to the text (upper margin for x-axis facets, right margin for y-axis facets).\nWe change the title, subtitle, and caption text color to highlight_col and align the caption to the left using element_text(). Though the subtitle is defined using element_textbox_simple() from ggtext to enable automatic line wrapping of the long text as described in Chapter 2.\nWe adjust the plot.margin to add space around edges of the plot, with slightly more space added on the right hand side. This makes the plot appear more balanced, as this additional space counteracts the space generated from the facet label text on the left.\n\n\ntheme_plot +\n  theme(\n    # background colors\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = highlight_col, color = highlight_col\n    ),\n    # facet labels\n    strip.text.x = element_text(\n      color = highlight_col,\n      margin = margin(t = 5)\n    ),\n    strip.text.y = element_text(\n      color = highlight_col,\n      angle = 90,\n      margin = margin(r = 5)\n    ),\n    # text formatting\n    plot.title = element_text(\n      color = highlight_col,\n      face = \"bold\"\n    ),\n    plot.subtitle = element_textbox_simple(\n      color = highlight_col,\n      margin = margin(t = 5, b = 5)\n    ),\n    plot.caption = element_text(\n      color = highlight_col,\n      margin = margin(t = 5),\n      hjust = 0\n    ),\n    plot.margin = margin(5, 10, 5, 5)\n  )\n\n\n\nA 6x6 grid with each grid square denoting a year between 2015-2020, and one of California, North Dakota, Florida, Texas, Idaho, or South Dakota. Within each square, the density of points represents the number of bee colonies. The design is much more minimal, with the black background of the grid squares allowing the yellow points to be more easily seen due to the higher contrast.\n\n\n\nWe now finished our plot and can save it with ggsave(): \n\nggsave(\n  filename = \"bee-colonies.png\",\n  width = 5,\n  height = 5\n)",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bee colony losses: visualizing quantities with Poisson disk sampling</span>"
    ]
  },
  {
    "objectID": "bee-colonies.html#reflection",
    "href": "bee-colonies.html#reflection",
    "title": "4  Bee colony losses: visualizing quantities with Poisson disk sampling",
    "section": "\n4.5 Reflection",
    "text": "4.5 Reflection\nThe bee-themed colors alongside the non-standard nature of this chart make it visually intriguing and fun. However, it takes a little bit more time to understand how to interpret the chart. This is a visualization that would work better in a setting where the author has time to explain how it works. For example, in a presentation or in an article with a how to read this chart explainer included. It would work less well in a standalone leaflet without an explanation where a reader might struggle to understand what is being shown. It’s more difficult to see the trend over time with type of chart. A simple line chart could show the same data in a more standard, easy-to-interpret way. However, line charts don’t catch attention in quite the same way. It all comes down to the purpose of the chart. Is the main aim to draw attention to important data on bee colonies, and show overall trends? Or is the main aim to communicate the colony size in each year, within some accuracy range? The answers to those questions will determine whether this is an appropriate chart type.\nThis version of the chart shows only data for six states, even though we know from our exploratory analysis that data is available for (almost) all states. Some explanation as to why these states have been chosen could be added in the subtitle, or data for all states could be shown - although this would result in a very long chart! The visualization also assigns each state equal chart area - perhaps implying that each state has an equal geographic area which is of course untrue. The chart shows there are a lot of bees in California. California is also the third largest state in terms of area (United States Census Bureau 2021b) - maybe there’s just more room for bees? Perhaps standardizing the data by state area (or state agricultural area) would provide an easier comparison between states.\nAnother disadvantage of this chart is that it visualizes only one variable - the number of bee colonies. However, even when the number of colonies is lower, if the colony sizes are larger that might mean the numbers of bees isn’t changing very much. But we don’t see that when we only look at the number of colonies - we don’t get a full picture of the data by limiting the chart to only a single variable.\nAlthough this type of visualization has several disadvantages, and is far from perfect, hopefully it gives you an idea of how to think creatively about designing charts and how you might go about implementing them in R.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bee colony losses: visualizing quantities with Poisson disk sampling</span>"
    ]
  },
  {
    "objectID": "bee-colonies.html#exercises",
    "href": "bee-colonies.html#exercises",
    "title": "4  Bee colony losses: visualizing quantities with Poisson disk sampling",
    "section": "\n4.6 Exercises",
    "text": "4.6 Exercises\n\nRecreate the visualization from this chapter using the colony_max column instead of colony_n.\nHow might you visualize both columns on the same chart?\n\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bee colony losses: visualizing quantities with Poisson disk sampling</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html",
    "href": "technology-adoption.html",
    "title": "5  Technology adoption: making gauge charts with ggforce",
    "section": "",
    "text": "5.1 Data\nIn this chapter we’ll discover how to create gauge charts, a type of chart not native to ggplot2, with the help of the ggforce extension package.\nPackages required in this chapter:\nThe Cross‐country Historical Adoption of Technology (CHAT) dataset (Comin and Hobijn 2009) contains information on the adoption of over 100 technologies in more than 150 countries, spanning over 200 years. Most of the data is annual data, and covers technology categories including, but not limited to, agriculture, communications, transport, and finance - encompassing as broad a definition of technology as possible (Comin and Hobijn 2009).\nThe CHAT dataset was used as a TidyTuesday dataset in July 2022 (after being suggested by Tom Mock), so let’s start by reading in the data using the tidytuesdayR R package (Hughes 2022b) and looking at the definitions of the variables:\ntuesdata &lt;- tt_load(\"2022-07-19\")\ntechnology &lt;- tuesdata$technology\nThe technology data is reasonably large with 491636 rows and 7 columns.\nhead(technology)\n\n# A tibble: 6 × 7\n  variable label            iso3c  year group category value\n  &lt;chr&gt;    &lt;chr&gt;            &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    &lt;dbl&gt;\n1 BCG      % children who … AFG    1982 Cons… Vaccines    10\n2 BCG      % children who … AFG    1983 Cons… Vaccines    10\n3 BCG      % children who … AFG    1984 Cons… Vaccines    11\n4 BCG      % children who … AFG    1985 Cons… Vaccines    17\n5 BCG      % children who … AFG    1986 Cons… Vaccines    18\n6 BCG      % children who … AFG    1987 Cons… Vaccines    27\nThe data is in long format with the variable (and label) columns containing information on what variable the row relates to e.g. \"% children who received a BCG immunization\" or \"Land naturally regenerating forest area 1000 ha\". The iso3c column gives the ISO3 code for the country the row relates to, and similarly the year column relates to the relevant year. The group column details whether the variable is related to \"Consumption\", \"Production\", \"Non-Tech\" (such as GDP), or \"Creation\". The category column contains information about which category the variable falls into e.g. \"Vaccines\" or \"Agriculture\". Finally, the value column provides the value of the variable for the given year and country.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Technology adoption: making gauge charts with **`ggforce`**</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#exploratory-work",
    "href": "technology-adoption.html#exploratory-work",
    "title": "5  Technology adoption: making gauge charts with ggforce",
    "section": "\n5.2 Exploratory work",
    "text": "5.2 Exploratory work\nGiven the large scale of this data (in terms of time frame, spatially, and range of variables), there are many aspects we could look into further. What might be an interesting aspect of this data to visualize?\n\n5.2.1 Data exploration\nAs in other chapters in this book, we’ll start with some basic exploratory plots in base R. For example, we may look at the distribution of variables in each category using the barplot() function. \n\nbarplot(\n  table(technology$category),\n  las = 1,\n  horiz = TRUE\n)\n\n\n\n\n\n\nFigure 5.1: Bar chart of number of observations (all years, countries, and variables) in each category.\n\n\n\n\nWe have lots of observations relating to variables in the agriculture and transport categories. We could also look at how the number of values in these categories has changed over time, using the heatmap() function in base R: \n\nheatmap(\n  table(technology$category, technology$year),\n  # prevent re-ordering\n  Rowv = NA,\n  Colv = NA,\n  # make labels smaller so they fit on the page\n  margins = c(3, 6),\n  cexRow = 0.5,\n  cexCol = 0.5\n)\n\n\n\n\n\n\nFigure 5.2: Heatmap of number of observations (all countries and variables) in each category, each year. An increasing number of observations are seen in recent years.\n\n\n\n\nLet’s look into a specific variable in more detail. We need to narrow down the data we want to consider - there are 194 different questions (variables) contained in the data. You can check by running length(unique(technology$label)). One variable we could consider further is the percentage of children who received a measles immunization - indicated by the \"pctimmunizmeas\" level in the variable column. Let’s create a quick scatter plot of how this percentage has been changing over time: \n\npctimmunizmeas_df &lt;- subset(\n  technology, variable == \"pctimmunizmeas\"\n)\nplot(\n  x = pctimmunizmeas_df$year,\n  y = pctimmunizmeas_df$value,\n  xlab = \"\", ylab = \"\",\n  main = \"Percentage of children who received a measles immunization\"\n)\n\n\n\n\n\n\nFigure 5.3: Scatter plot of percentage children who received a measles immunization between 1980 and 2019, hinting at an upward trend.\n\n\n\n\nFor obvious reasons (the timing of when the first measles vaccine was created and rolled out across the world), the data does not span for 200 years for this variable. Nonetheless, it looks like there is perhaps an increasing trend over time. It’s a little bit difficult to see because we have data from lots of countries on one plot, including some whose values were already high at the start of the time series.\nA list of all ISO3 country codes can be obtained by running unique(technology$iso3c), and from there we can choose a subset of countries we want to look at in more detail. Let’s look at Great Britain, USA, Sweden, Brazil, New Zealand, and Venezuela, and store these choices in a vector called countries.\nAlthough including all years of data would better allow us to consider trends in the values, sometimes looking at a only a few snapshots can be more effective. For example, by considering only the years 1980 and 2010 as we’ll do here, readers get a Wow, look how much things have changed! message rather than the perhaps less impactful visual of a gradual trend. We can use the filter() function from dplyr to filter our technology data set to consider only the rows showing data about the percentage of children who received a measles immunization, in the years 1980 or 2010, and relating to countries in our specified vector of countries.\nWe no longer need the group, category, variable, or label columns, as these are constant for our data so we can remove these columns using select() from dplyr.\n\n# subset of countries to look at further\ncountries &lt;- c(\"GBR\", \"USA\", \"SWE\", \"BRA\", \"NZL\", \"VEN\")\n\n# subset data for specific topic, years, and countries\nmeasles_data &lt;- technology |&gt;\n  filter(\n    label == \"% children who received a measles immunization\",\n    year %in% c(1980, 2010),\n    iso3c %in% countries\n  ) |&gt;\n  select(-c(group, category, variable, label))\nhead(measles_data)\n\n# A tibble: 6 × 3\n  iso3c  year value\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 BRA    1980    57\n2 BRA    2010    99\n3 GBR    1980    53\n4 GBR    2010    89\n5 NZL    1980    80\n6 NZL    2010    91\n\n\nOur tidier data now shows just the percentage (value) of children who received a measles immunization in each country (iso3c), in each of 1980 and 2010 (year), How might we visualize this data?\nThere are a couple of obvious options that come to mind: a simple grouped bar chart, a slope chart, or indeed the (not often popular) pie chart. Our choice of data visualization will depend on which aspects of the data we want to show. Do we want to compare 1980 to 2010? Do we want to compare countries to each other? Do we just want to show the range of values in the data? In this data, the most interesting example is a comparison between 1980 and 2010. Although a slope chart would likely work well for this data, we’re going a little bit more experimental with a gauge chart.\nAt the time of writing, there isn’t a built-in function in ggplot2 to create gauge charts. If you’ve never heard of a gauge chart, the initial sketch in Figure 5.4 might give you an idea of what we’re aiming for.\n\n5.2.2 Exploratory sketches\nYou can think of a gauge chart as being a stacked bar chart which is curved over a half circle. Here, rather than one stacked bar chart, we have two stacked bar charts.\n\n\n\n\n\nFigure 5.4: Initial sketches of a ideas for visualising data for a single country.\n\n\nGauge charts often also include a dial (or needle) to highlight the value further, but that gets a little bit complicated when we have multiple gauges. So let’s leave that for now.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Technology adoption: making gauge charts with **`ggforce`**</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#preparing-a-plot",
    "href": "technology-adoption.html#preparing-a-plot",
    "title": "5  Technology adoption: making gauge charts with ggforce",
    "section": "\n5.3 Preparing a plot",
    "text": "5.3 Preparing a plot\nGauge charts are not a built-in feature of ggplot2, so we’re going to have to do a little bit of manual preparation before we start plotting.\n\n5.3.1 Data wrangling\nWe could use geom_col() and coord_polar() to try to make a gauge chart natively in ggplot2. However, the use of polar coordinates in ggplot2 often makes it difficult to add elements such as annotations in the position you’d like them to be in. So let’s create a gauge chart a slightly different way! \nThe value in the data currently tells us the percentage of children who did have an immunization, we also need to calculate the percentage of children who did not - by subtracting value from 100. We can then pivot the data such that each country has two rows in the data: (i) one row for the did have immunization value in 1980 and 2010, and (ii) one row for the did not have immunization value in 1980 and 2010. We end up with something halfway in between wide and long format data. Let’s also make the YN column (indicating a did/did not have immunization row) into a factor.\n\nmeasles_YN &lt;- measles_data |&gt;\n  mutate(no_value = 100 - value) |&gt;\n  pivot_longer(\n    cols = c(value, no_value),\n    names_to = \"YN\",\n    values_to = \"perc\"\n  ) |&gt;\n  pivot_wider(\n    names_from = \"year\",\n    values_from = \"perc\"\n  ) |&gt;\n  mutate(YN = factor(YN))\n\nTo enable us to work with the percentages more easily, we can convert them into values between 0 and 1 by dividing by 100, and drop the original columns. If you think about creating a stacked bar chart, we need to know the end point of each bar (the maximum y-axis value for each bar). This isn’t the percentage of each group, it’s the cumulative percentage of each group and the ones stacked below it. We use the cumsum() function to calculate the cumulative sum of the percentages across each year and country: \n\nplot_data &lt;- measles_YN |&gt;\n  mutate(\n    perc_1980 = `1980` / 100,\n    perc_2010 = `2010` / 100\n  ) |&gt;\n  select(-c(`1980`, `2010`)) |&gt;\n  group_by(iso3c) |&gt;\n  mutate(\n    ymax_1980 = cumsum(perc_1980),\n    ymax_2010 = cumsum(perc_2010)\n  )\nhead(plot_data)\n\n# A tibble: 6 × 6\n# Groups:   iso3c [3]\n  iso3c YN       perc_1980 perc_2010 ymax_1980 ymax_2010\n  &lt;chr&gt; &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 BRA   value         0.57      0.99      0.57      0.99\n2 BRA   no_value      0.43      0.01      1         1   \n3 GBR   value         0.53      0.89      0.53      0.89\n4 GBR   no_value      0.47      0.11      1         1   \n5 NZL   value         0.8       0.91      0.8       0.91\n6 NZL   no_value      0.2       0.09      1         1   \n\n\nYou’ll notice that the ymax_* values are always 1 for the no_value rows - this is because the no_value is the last bar so we will always have plotted 100% of the data by the time we’ve finished that bar. Note that the data is currently still grouped by iso3c - this will be important later!\n\n5.3.2 The ggforce extension package\nThe ggforce extension package (Pedersen 2022) contains many useful functions which extend the behavior of ggplot2, many of them aimed at exploratory data visualization. We won’t cover many of it’s functions in this chapter, and instead we’ll focus on how to use it to create gauge charts. ggforce is available on CRAN and can be installed with the usual install.packages(\"ggforce\") command.\n\n5.3.3 Gauge charts with ggforce\n\nThe function that we’re interested in for the purposes of creating a gauge chart is geom_arc_bar() . The geom_arc_bar() function makes it possible to draw arcs in ggplot2. You can also use this function to create visualizations such as donut charts or sunburst plots. We’ll use two calls to geom_arc_bar() to create the double gauge chart - one for the 1980 arc, and one for the 2010 arc. There are several required aesthetics when using geom_arc_bar():\n\n\nx0: The x-coordinate of the center of the circle that the gauge chart lies on. For us, this will be a constant value so we can choose any number - 0 seems like an obvious choice.\n\ny0: The y-coordinate of the center of the circle that the gauge chart lies on. For us, this will be a constant value so we can choose any number - 0 seems like an obvious choice again.\n\nr0: The inner radius (from x0 and y0) of the arc.\n\nr: The outer radius (from x0 and y0) of the arc. The difference between r0 and r determines how thick the gauge chart will be. For each of the two arcs we will draw, these will be constant. For the outer arc (2010), we can set r0 = 0.7 and r = 1, and for the inner arc (1980), we can set r0 = 0.2 and r = 0.5. Note that the difference between the radii is 0.3 for both arcs so they are equally thick.\n\nstart: The starting angle for each segment in the arc.\n\nend: The ending angle for each segment in the arc.\n\nThe last part of data wrangling we need to do is compute the start and end values.\n\n5.3.4 Computing aesthetics\nThe end values are easy - these are the ymax_1980 and ymax_2010 columns that we already have. We need to compute the equivalent ymin_1980 and ymin_2010 values: what are the minimum values in each stacked bar chart?\nThink again about stacked bar charts instead of gauge charts for a second (since it’s a little bit easier to visualise). The minimum value for the first bar at the bottom of the stack will always be zero - it’s right at the bottom. For the rest of the stacked bars, the minimum value will be equal to the maximum value of the bar stacked below it. This means that we’ve actually already computed all the values we need and stored them in plot_data. We just need to rearrange them a bit.\n\n\n\n\n\n\nTip 5.1: Just because you can doesn’t mean you should\n\n\n\nThere is almost certainly a nicer way of doing this in base R that contains fewer lines of code and is easier to read. Consider the following code block as an experiment in seeing whether we could do this in a piped workflow, without considering whether we should!\n\n\nLet’s start with the 1980 data. We start off by creating the 0 values for the minimum in the first stacked bar using rep(0, length(countries)) - since we need one 0 for each country in 1980. We then want to get the ymax_1980 values from plot_data except the last one. We therefore use slice_head() to get this subset of the rows (missing the last one in each country). Remember that plot_data is still grouped by iso3c. We then stick these ymax_1980 to the 0 we created and pass them into a new column called ymin_1980 using mutate(). The code for the 2010 arc is analogous. \n\nymin_data &lt;- plot_data |&gt;\n  ungroup() |&gt;\n  # start values for 1980 arc\n  mutate(\n    ymin_1980 = c(rbind(\n      rep(0, length(countries)),\n      (slice_head(plot_data, n = -1) |&gt;\n        pull(ymax_1980))\n    ))\n  ) |&gt;\n  # repeat for 2010\n  mutate(\n    ymin_2010 = c(rbind(\n      rep(0, length(countries)),\n      (slice_head(plot_data, n = -1) |&gt;\n        pull(ymax_2010))\n    ))\n  )\n\nAll of our variables are currently scaled between 0 and 1 (since they relate to percentages). To plot this as an arc however, we need to convert this to polar coordinates. We want to start our arc at \\(-\\pi/2\\) (instead of 0) and end at \\(\\pi/2\\) (instead of 1). We can use the rescale() function from the scales package (Wickham, Pedersen, and Seidel 2023) to define the range we want to scale from and to. \nWe want to apply this to every column of ymin_data that starts with a lowercase \"y\" i.e. all of the ymax_* and ymin_* columns so we use mutate() and across() from dplyr in conjunction with the starts_with() column selector function. We need to make sure we set ignore.case = FALSE to prevent dplyr from trying to rescale the YN column as well. \n\n\n\n\n\n\nTip 5.2: Older versions of mutate()\n\n\n\nIn older versions of dplyr, the mutate_at() function would have been used instead of mutate() and across(). The mutate_at() function has now been superseded.\n\n\n\ngauge_data &lt;- ymin_data |&gt;\n  mutate(\n    across(\n      starts_with(\"y\", ignore.case = FALSE),\n      ~ rescale(.,\n        to = pi * c(-0.5, 0.5),\n        from = 0:1\n      )\n    )\n  )\nhead(gauge_data)\n\n# A tibble: 6 × 8\n  iso3c YN       perc_1980 perc_2010 ymax_1980 ymax_2010\n  &lt;chr&gt; &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 BRA   value         0.57      0.99    0.220       1.54\n2 BRA   no_value      0.43      0.01    1.57        1.57\n3 GBR   value         0.53      0.89    0.0942      1.23\n4 GBR   no_value      0.47      0.11    1.57        1.57\n5 NZL   value         0.8       0.91    0.942       1.29\n6 NZL   no_value      0.2       0.09    1.57        1.57\n# ℹ 2 more variables: ymin_1980 &lt;dbl&gt;, ymin_2010 &lt;dbl&gt;\n\n\n\n5.3.5 The first plot\nWe’re now finished with the data wrangling (finally!) and ready to create our first plot. As always, we start with the ggplot() function and pass in gauge_data that will be used for plotting the arcs. The aesthetics for each arc will vary so we’ll hold off on passing them in globally. \nWe then add two arcs by using geom_arc_bar() twice. We set the x0, y0, r0, and r constants as we described above. Even though we have chosen constant values for the aesthetics, they still need to be inside the aes() function because they are required aesthetics. We then pass the ymin_* and ymax_* columns in as the start and end aesthetics, and set the fill color based on the YN column. \nWe also use facet_wrap() to draw a pair of arcs for each country in a separate facet, choosing to use nrow = 2 to give us a nice rectangular 3x2 grid of facets for our six countries. \n\nbasic_plot &lt;- ggplot(data = gauge_data) +\n  # Outer 2010 arc\n  geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010,\n      fill = YN\n    )\n  ) +\n  # Inner 1980 arc\n  geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980,\n      fill = YN\n    )\n  ) +\n  facet_wrap(~iso3c, nrow = 2)\nbasic_plot\n\n\n\n\n\n\nFigure 5.5: Initial plot created using geom_arc_bar() from ggforce, facetted by different countries.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Technology adoption: making gauge charts with **`ggforce`**</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#advanced-styling",
    "href": "technology-adoption.html#advanced-styling",
    "title": "5  Technology adoption: making gauge charts with ggforce",
    "section": "\n5.4 Advanced styling",
    "text": "5.4 Advanced styling\nWe now have a double gauge chart - but it could look a lot nicer (and more informative)!\n\n5.4.1 Colors\nLet’s start by defining some variables for our colors. Here, we define a pink highlight_col which we’ll use for the segment showing the percentage who did have immunizations. This should be a bright, eye-catching color as it’s the main point we’re trying to communicate. The second_col will be used to show the percentage who did not have immunizations, so we can choose a color that is a little bit more similar to the background. The background (bg_col) will be a light gray, the second_col will be a medium gray, and the text (text_col) will be black. \n\nhighlight_col &lt;- \"#990C58\"\nsecond_col &lt;- \"#949398\"\nbg_col &lt;- \"#DEDEDE\"\ntext_col &lt;- \"black\"\n\nBefore we add the new colors to our gauge chart, let’s remove the black outline from around the segments - they’re quite thick lines which don’t add anything to the plot. There will be sufficient contrast between the segments with the new colors we’ve chosen. You can remove the outline from the arc by setting color = NA outside of the aesthetic mapping: \n\nbasic_plot &lt;- ggplot(data = gauge_data) +\n  geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.7, r = 1,\n      start = ymin_2010, end = ymax_2010,\n      fill = YN\n    ),\n    color = NA\n  ) +\n  geom_arc_bar(\n    mapping = aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.2, r = 0.5,\n      start = ymin_1980, end = ymax_1980,\n      fill = YN\n    ),\n    color = NA\n  ) +\n  facet_wrap(~iso3c, nrow = 2)\n\nNow we can apply the colors using scale_fill_manual() from ggplot2, setting both the color values but also more informative labels for the legend at the same time. \n\ncolor_plot &lt;- basic_plot +\n  scale_fill_manual(\n    breaks = c(\"value\", \"no_value\"),\n    labels = c(\"Immunized\", \"Not Immunized\"),\n    values = c(highlight_col, second_col)\n  )\ncolor_plot\n\n\n\n\n\n\nFigure 5.6: Edited version of the previous plot with colors changed from defaults to gray and dark pink.\n\n\n\n\nWhen choosing colors for a visualization, it’s important not to rely too heavily on colors and legends for differentiating groups or communicating information. Color blindness comes in many different forms, and different types affect how people perceive colors in different ways. One way to check if your chart is accessible to people with color blindness, is to view it in grayscale (black and white) and consider if it can be understood without color. If it can’t, consider choosing different colors, or using shapes and patterns to differentiate groups instead. Direct labeling of data and making sure that the order of the legend matches the order of the data can help when legends are unavoidable (Government Analysis Function 2021). \nThere are several packages in R that can be used to investigate the accessibility of color palettes. One of them is colorblindr (McWhite and Wilke 2024). The colorblindr package allows you to create simulations of what your chart may look like to someone with color blindness. The package also includes colorblind friendly qualitative palettes with associated ggplot2 functions. At the time of writing, colorblindr is not available on CRAN but can be installed from GitHub, using the methods described in Chapter 4. \n\ncvd_grid(color_plot)\n\n\n\n\n\n\nFigure 5.7: A 2x2 grid of charts showing simulations of what our chart looks like with four different types of color vision deficiency.\n\n\n\n\nNote that the default color palette in ggplot2 does not show any differentiation when viewed in grayscale, so it’s important to think about which colors you’re using for any chart.\n\n5.4.2 Text and fonts\nAs we’ve seen in previous chapters, we can load in Google fonts using the sysfonts and showtext packages. Here, we’ll keep it clean and minimal by using the \"Ubuntu\" typeface for both the title and the body. \n\nfont_add_google(name = \"Ubuntu\")\nshowtext_auto()\nshowtext_opts(dpi = 300)\nbody_font &lt;- \"Ubuntu\"\n\nLet’s define some text for the title and subtitle. Here, the title asks the reader a question, encouraging them to think and directing them to what they are looking at in the chart. The subtitle gives a brief explanation of how to interpret the plot, and the main conclusion that we want the reader to take away. The caption variable identifies the source of the data for this visualization, as well as the chart creator.\n\ntitle &lt;- \"What percentage of children are immunized against measles?\"\nsubtitle &lt;- \"The inner pink bar represents the percentage of children who received a measles immunization in 1980, whilst the outer pink bar represents the percentage in 2010. An increase in immunization levels between 1980 and 2010 is seen across all six countries.\"\ncaption &lt;- \"Data: data.nber.org (10.3386/w15319) | Graphic: N. Rennie\"\n\nSince the axis labels do not make too much sense for geom_arc_bar() plots, we’ll remove them later when using the theme functions. Instead, we can add our own labels using geom_text() to the end of the gauges. To make it easier, we can construct a small data.frame specifically for adding text labels. This includes the x, and y coordinates where the text should be positioned (you can read these off from the graph we already have since we haven’t yet deleted the axis labels), as well as the label that should appear.\n\ntext_df &lt;- data.frame(\n  x = c(0.35, 0.85),\n  y = c(-0.1, -0.1),\n  label = c(1980, 2010)\n)\n\nWe can then add this text to the existing plot by adding a layer with geom_text(), noting that we need to specify the data argument as using the text data.frame we just created. We also need to specify the typeface and size directly within the geom_text() function, and can add the title and subtitle text created earlier using the labs() function from ggplot2.\n\ntext_plot &lt;- color_plot +\n  geom_text(\n    data = text_df,\n    mapping = aes(x = x, y = y, label = label),\n    family = body_font,\n    size = 3\n  ) +\n  labs(\n    title = title,\n    subtitle = subtitle,\n    caption = caption\n  )\ntext_plot\n\n\n\n\n\n\nFigure 5.8: Previous plot with additional labels indicating the year on each gauge chart, as well as an added title and subtitle.\n\n\n\n\n\n5.4.3 Adjusting themes\nWe’ll start by removing all of the theme elements such as the gray background, grid lines, and axis labels. The easiest way to do this is using theme_void(). We can use the base_family argument of theme_void() to set the typeface that will be used by default for any non-geom text elements that remain.\nYou may have noticed that the current gauge plots look a bit squashed and not exactly semi-circular. We can fix this by adding coord_fixed() which forces a 1:1 aspect ratio on the plot panel.\n\ntheme_plot &lt;- text_plot +\n  coord_fixed() +\n  theme_void(base_size = 8.5, base_family = body_font)\ntheme_plot\n\n\n\n\n\n\nFigure 5.9: Edited version of previous plot with fixed coordinate system to prevent squashing, and all theme elements removed.\n\n\n\n\nThis looks better but it’s still not great. What do we still need to improve with styling?\n\nThe title text doesn’t stand out and blends in too easily with the subtitle, similarly for the facet text. Perhaps a bold font would help?\nThe subtitle text doesn’t fit onto the page but we can fix that with the help of the hopefully now familiar element_textbox_simple() function from ggtext.\nSince we’re using coord_fixed() to force a specific aspect ratio, there are now some odd spacing issues - there is a large white gap at the top and bottom of the plot, and the year labels are slightly cut off at the bottom.\nThe legend takes up a lot of space and isn’t very informative.\n\n \nLet’s fix the first two of these issues by editing the theme() elements:\n\nWe use element_textbox_simple() for the subtitle, making sure to left align the text.\nWe set face = \"bold\" for the title and facet strip.text and increase the font size using the rel() function.\nAs we’ve done in previous visualizations, we also set the background colors to bg_col and add some padding around the edges by setting the plot.margin argument.\n\n\n\nstyled_plot &lt;- theme_plot +\n  theme(\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    strip.text = element_text(\n      face = \"bold\", size = rel(1.2)\n    ),\n    plot.title = element_text(\n      margin = margin(b = 10),\n      hjust = 0,\n      face = \"bold\",\n      size = rel(1.2)\n    ),\n    plot.subtitle = element_textbox_simple(\n      margin = margin(b = 10),\n      hjust = 0,\n      halign = 0\n    ),\n    plot.caption = element_text(\n      margin = margin(t = 10),\n      hjust = 0\n    ),\n    plot.margin = margin(5, 5, 5, 5)\n  )\nstyled_plot\n\n\n\n\n\n\nFigure 5.10: Further styling of gauge chart to change background color, prevent overlapping in the subtitle text, and increase the size of the title.\n\n\n\n\nWe’re almost there, but the year label text remains slightly squashed. Part of the problem is how much space the legend takes up - it’s leaving too much empty space in the top and bottom right corners, whilst taking away space from other places where we need more of it. The highlights a common problem when developing charts - how big should the visualization be? Choosing the right size of image is especially important when using fixed aspect ratios in your plot e.g. when using coord_fixed() or spatial co-ordinates as we’ll see in Chapter 12, since the wrong choice can result in cropped plots or extra white space. \n\n\n\n\n\n\nTip 5.3: Choosing an aspect ratio\n\n\n\nRather than thinking about width and height, it can often be more helpful to think about aspect ratio and width (or height). This often makes the process of increasing the image size a little bit easier. \nThere are some aspect ratios that are commonly used e.g. 4x6, 5x7, or 1x1. Choosing a commonly used aspect ratio can make it easier to arrange multiple plots, especially in websites or slide. If you’re creating a plot as part of a publication, some academic journals or magazines may have specific aspect ratio requirements. Otherwise, use your exploratory sketches as a way of determining which aspect ratio might be appropriate.\n\n\n\n\n\n\n\n\nTip 5.4: Choosing a width\n\n\n\nOften the choice of width can be based on physical constraints. For example, the visualizations in this book are all around 5 inches wide to fit on the page of the print edition. You may also wish to have multiple sizes of images e.g. low and high resolution.\nChanging the width (or resolution) of a plot, often also means changing other aspects e.g. the font sizes, which don’t necessarily rescale larger. By setting a base_size and using rel() to edit individual font size elements, you minimize the amount of work. Viewing the plot in at desired size and resolution also makes it easier to set the sizes correctly. See Section 14.1 for more information.\n\n\n\n5.4.4 Alternatives to a traditional legend\nAlthough we could simply increase the height of the plot to stop the year labels from becoming squashed, an alternative approach is to address the source of the issue and edit the legend.\nWe have a few different options for dealing with the legend. Some options might be:\n\nLeave the legend as it is but reposition it to above or below the main chart, rather than to the right, and put it into a single row. Then it would take up less space. Repositioning the legend will be discussed in Chapter 11.\nWe could design a custom legend. This might be a good option as double gauge charts are not so common and readers might be less familiar with them. Adding additional information about how they work might prove helpful. We’ll look at how to design and use a custom in Chapter 12 and Chapter 13.\nWe could instead use colored text in the subtitle to indicate what the categories are. For this visualization, highlighting the Immunized would be enough as there are only two categories. We’ll look at ways to do this in R in Chapter 6 and Chapter 7.\n\nHere, there’s an argument to be made that any form of legend is in fact unnecessary. The current choice of colors and title of the chart makes it clear enough that the pink color represents the positive response data (percentage who have been immunized).\nSo let’s remove the legend, by setting legend.position = \"none\" inside theme(): \n\nstyled_plot +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\nFigure 5.11: Final styling of gauge chart to remove the legend, providing more space for the chart area.\n\n\n\n\nThen save it with ggsave(): \n\nggsave(\n  filename = \"technology-adoption.png\",\n  width = 5,\n  height = 0.7 * 5\n)",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Technology adoption: making gauge charts with **`ggforce`**</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#reflection",
    "href": "technology-adoption.html#reflection",
    "title": "5  Technology adoption: making gauge charts with ggforce",
    "section": "\n5.5 Reflection",
    "text": "5.5 Reflection\nAre gauge charts the most effective method of visualising this data? No. Gauge charts have their own problems, some of which you can see here. Since the ring representing 2010 is on the outside, the radius is larger, and therefore the area is as well. If you measure the change on arc length between 1980 and 2010, you’ll get different answers to if you measured the proportional change in area for the two. Assuming we stick with the gauge chart idea, what further changes could be made to this plot to improve it?\n\nThere’s no reason to use country codes instead of country names in this situation, other than perhaps laziness. There is space available for the full names. Though many people could likely work out which countries are shown here by their country codes, there’s no need to make readers figure it out on their own. Providing the country names explicitly gives a reader less work to do, meaning they can focus on what you’re actually trying to show.\nSimilarly, providing the exact percentages as labelled text would make it easier to see what the change in immunization coverage is. It’s pretty clear that there has been an increase across all six countries, but the nature of gauge charts (no grid lines) makes it quite difficult to get the exact values. What’s the difference between Brazil and Sweden in 2010? It’s too difficult to tell here.\nAlthough a full, traditional legend is may be unnecessary here, the addition of some colored text may add clarification that the pink area is what represents that data. We’ll look at using colored text instead of a legend in Chapter 6 and Chapter 7.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Technology adoption: making gauge charts with **`ggforce`**</span>"
    ]
  },
  {
    "objectID": "technology-adoption.html#exercises",
    "href": "technology-adoption.html#exercises",
    "title": "5  Technology adoption: making gauge charts with ggforce",
    "section": "\n5.6 Exercises",
    "text": "5.6 Exercises\n\nRedesign this visualization using a bar chart instead of a gauge chart, and add labels to show the percentage values directly on the chart.\nDo you need to change the aspect ratio or coordinate system to improve the layout?\n\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Common charts don't need to be boring!",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Technology adoption: making gauge charts with **`ggforce`**</span>"
    ]
  },
  {
    "objectID": "text.html",
    "href": "text.html",
    "title": "Making use of icons, fonts, and text",
    "section": "",
    "text": "Fonts and text are not often the first elements to be considered when developing charts, perhaps since plots are often labelled as a better alternative to textual descriptions of data. That being said, careful use of fonts can make plots clearer and more interesting.\n\nChapter 6  Canadian wind turbines: waffle plots and pictograms details how to download icon fonts and then read in local font files using sysfonts and showtext. It also shows an example of using colored text as an alternative to a traditional legend through the marquee package.\nChapter 7  Cats: data-driven annotations with ggtext describes an alternative approach to adding colored text with ggtext, and illustrates how to create data-driven annotations that update when your data does. This chapter also shows you how to write a function that adds social media icons to your plot captions.\nChapter 8  Nobel Prize laureates: positioning text and parameterizing plots considers how to visualize text data, in a way that is both aesthetically pleasing but also brings more clarity than the default choice of word clouds.\n\nThis section also covers how to obtain data from an API using R, and writing functions to parameterize plots, enabling you to create different versions of the same chart for different subsets of data.\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Making use of icons, fonts, and text"
    ]
  },
  {
    "objectID": "wind-turbines.html",
    "href": "wind-turbines.html",
    "title": "6  Canadian wind turbines: waffle plots and pictograms",
    "section": "",
    "text": "6.1 Data\nIn this chapter, we’ll learn how to read in data from an Excel file via a URL, create waffle plots using the waffle package, and write a subtitle with colored text to be used as an alternative to a traditional legend.\nPackages required in this chapter:\nBack in October 2020, data on wind turbines in Canada from the Government of Canada Open Data portal was used as a TidyTuesday dataset (R4DS Online Learning Community 2023). The Canadian Wind Turbine Database provides information about wind turbines installed in Canada, including their power capacity and geographic location (Natural Resources Canada 2021). Rather than reading in the data using the tidytuesdayR package as we’ve done in previous chapters, let’s read in the data directly from the open.canada.ca website.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Canadian wind turbines: waffle plots and pictograms</span>"
    ]
  },
  {
    "objectID": "wind-turbines.html#data",
    "href": "wind-turbines.html#data",
    "title": "6  Canadian wind turbines: waffle plots and pictograms",
    "section": "",
    "text": "Tip 6.1: Open Government data in Canada\n\n\n\nThe Canadian Wind Turbine data contains information licensed under the Open Government Licence - Canada. You can search for more open data at search.open.canada.ca/opendata. See Chapter 11 for further discussion of open data sources.\n\n\n\n6.1.1 Reading data with openxlsx\n\nThough the readxl package (Wickham and Bryan 2023) package can be used to read Excel files stored locally, it doesn’t work for reading in Excel files directly from a URL. We could visit the relevant open.canada.ca/data/dataset website, manually download the file, and then read it in using readxl. Alternatively, we can use the openxlsx package (Schauberger and Walker 2023) which allows us to pass in a URL.\nOf course, we still need to know what the URL of this file is. If you visit the following webpage for the wind turbines data (oopen.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070), and right-click on the link to the Excel file you can then copy the link address. We save that link address as a character string called url. If you plan to download other datasets from the same site, it can be useful to save the main website as the base_url variable so that you can reuse this string later.\nWe then use the read.xlsx() function from openxlsx, where we pass in the url variable to the xlsxFile argument: \n\nbase_url &lt;- \"https://ftp.cartes.canada.ca/\"\nurl &lt;- paste0(\n  base_url,\n  \"pub/nrcan_rncan/Wind-energy_Energie-eolienne/wind_turbines_database/Wind_Turbine_Database_FGP.xlsx\"\n)\nwind_turbines &lt;- read.xlsx(xlsxFile = url)\n\nThere are some features of Excel files that can make them more human-friendly but less computer-friendly:\n\nMultiple sheets\nEmpty rows\nMerged cells\n\nLuckily, the .xlsx file we’ve downloaded is both human-friendly and computer-friendly so we don’t have to deal with these issues right now.\n\n\n\n\n\n\nTip 6.2: Dealing with multiple sheets from Excel\n\n\n\nExcel files may contain multiple sheets of data. You can use the sheet argument in read.xlsx() to specify the name or index of the sheet you want to read in. Using the sheet name is usually a little bit more robust, as it means your code can withstand (accidental) changes to the order of sheets.\n\n\n\n\n\n\n\n\nTip 6.3: Skipping empty rows from Excel\n\n\n\nThe read.xlsx() function always skips empty rows at the start of the file. However, sometimes the author of the spreadsheet may add a title row then a few empty rows before the real data begins. You can use the startRow argument to specify which rows the data actually starts on.\n\n\n\n\n\n\n\n\nTip 6.4: Processing merged cells from Excel\n\n\n\nMerged cells are hard to deal with because it means your data no longer fits into a nice rectangular structure. It depends on where the merged cells are, and what they contain, how difficult they are to deal with. If they’re at the top of the file (e.g. with the title information) then using startRow might be enough. Otherwise, setting fillMergedCells = TRUE in read.xlsx() means that the value in a merged cell is given to all cells within the merge (Schauberger and Walker 2023).\n\n\nWe don’t want to have to re-download the data from the URL each time we want to work on it (especially if the data may be updated), so let’s save a copy locally. We could simply save the Excel file (or we could have used download.file() instead of read_csv()). However, it would be better to save it as a CSV file instead because they are smaller in size, and can be opened in a simple text editor. Luckily the wind_turbines data is well formatted - there are no merged cells, multiple sheets, or empty rows we need to deal with. This means we can save it as a CSV file using write.csv() with an appropriate file name (and setting row.names = FALSE to avoid adding an additional column of row names). \n\nwrite.csv(\n  x = wind_turbines,\n  file = \"data/wind_turbines.csv\",\n  row.names = FALSE\n)\n\nWe can then use either read.csv() or read_csv() from `readr`` to read the CSV file back in: \n\nwind_turbines &lt;- read_csv(\"data/wind_turbines.csv\")\n\nThe wind_turbines data has 6698 rows and 15 columns. The first few rows of the data are as follows:\n\nhead(wind_turbines)\n\n# A tibble: 6 × 15\n  OBJECTID `Province/Territory` Project.name          \n     &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;                 \n1        1 Alberta              Optimist Wind Energy  \n2        2 Alberta              Castle River Wind Farm\n3        3 Alberta              Waterton Wind Turbines\n4        4 Alberta              Waterton Wind Turbines\n5        5 Alberta              Waterton Wind Turbines\n6        6 Alberta              Waterton Wind Turbines\n# ℹ 12 more variables: `Total.project.capacity.(MW)` &lt;dbl&gt;,\n#   Turbine.identifier &lt;chr&gt;,\n#   Turbine.number.in.project &lt;chr&gt;,\n#   `Turbine.rated.capacity.(kW)` &lt;chr&gt;,\n#   `Rotor.diameter.(m)` &lt;dbl&gt;, `Hub.height.(m)` &lt;dbl&gt;,\n#   Manufacturer &lt;chr&gt;, Model &lt;chr&gt;,\n#   Commissioning.date &lt;chr&gt;, Latitude &lt;dbl&gt;, …\n\n\nThe OBJECTID column is a unique row identifier. The data has a row for each wind turbine - with some of the data given on the turbine level and some data on the project level. For the variables related to project level data, this means values can be repeated multiple times within a column for turbines in the same project.\nThe Province/Territory column specifies which geographic region the turbine is in, with the Latitude and Longitude column giving the exact coordinates. The Project.name gives the name of the project that each wind turbine is associated with, and Total.project.capacity.(MW) the total power capacity of the project in megawatts. The Turbine.identifier column gives a unique ID for each turbine - it is a combination of an abbreviation of the project name, and a number identifying the number of the turbine within the project (also listed in the Turbine.number.in.project as a fraction of the total number of turbines per project). The capacity (in kilowatts) of each individual turbine is given in Turbine.rated.capacity.(kW) (adding up the individual capacities for all turbines in a project gives the value in Total.project.capacity.(MW) multiplied by 100).\nThe rotor diameter and hub height of each turbine are given by Rotor.diameter.(m) and Hub.height.(m), respectively. The manufacturer and model are also given by the Manufacturer and Model columns. The commissioning date is given in the Commissioning.date column - it appears that some may be given on the project level, whereas others vary for turbines within a project. The Notes column contains free text data with additional information for some turbines. Most of these values are empty, but the column may provide information about whether the capacity of turbines have changed or assumptions about how values were calculated.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Canadian wind turbines: waffle plots and pictograms</span>"
    ]
  },
  {
    "objectID": "wind-turbines.html#exploratory-work",
    "href": "wind-turbines.html#exploratory-work",
    "title": "6  Canadian wind turbines: waffle plots and pictograms",
    "section": "\n6.2 Exploratory work",
    "text": "6.2 Exploratory work\nThere are quite a few variables that we might be interested in looking at here - particularly since there are several variables about individual turbines that might be related to each other. For example, do turbines with a larger rotor diameter have a higher capacity? What is the relationship between rotor diameter and hub height? Which manufacturers are most common? Which regions have the most turbines? We might also want to look at the spatial distribution of turbines across Canada since we have the geographic coordinates - we’ll look at plotting spatial data a little bit later in Chapter 11, Chapter 12, and Chapter 13.\n\n6.2.1 Data exploration\nLet’s start by exploring the hypothesis that wind turbines with a larger rotor diameter also have a higher capacity. We can make a scatter plot of these two variables as an initial step. The Turbine.rated.capacity.(kW) column is currently a character column even though it contains numeric values, so we wrap the column in as.numeric() before plotting it:\n\nplot(\n  x = wind_turbines$`Rotor.diameter.(m)`,\n  y = as.numeric(\n    wind_turbines$`Turbine.rated.capacity.(kW)`\n  ),\n  xlab = \"Rotor diameter (m)\",\n  ylab = \"Turbine rated capacity (kW)\"\n)\n\n\n\n\n\n\nFigure 6.1: Scatter plot showing the relationship between rotor diameter and turbine capacity.\n\n\n\n\nThis scatter plot highlights a few issues:\n\n\nWe get a warning message about NA values.\n\nWarning message: In xy.coords(x, y, xlabel, ylabel, log) : NAs introduced by coercion\n\nThis comes from the as.numeric transformation of the Turbine.rated.capacity.(kW) column. If we inspect this column more closely, you’ll see that there are a few unusual values such as \"1903/2126/2221\". If we look at the Notes column for an explanation, we can see that these values exist because \"Some turbines derated such that the farm has an maximum operating capacity of 180 MW\". Unfortunately, we don’t know which individual turbines this derating applies to which makes it difficult to create a scatter plot.\n\nThe other issue with this scatter plot is that many of the observations are the same, but it’s not shown clearly on the plot. If we later wanted to fit some statistical models to explore this relationship further, a common assumption is that each observation is independent. That’s not true here - many individual turbines belong to the same project, and so are the same model with the same rotor diameter and capacity. Instead, we might want to group the unique values and use the number of turbines of a particular model as a weighting. This could be better visualized as a bubble chart, with the size of the bubbles showing the number of turbines in each diameter-capacity combination.\n\n\n\n\n\n\n\nTip 6.5: Inspecting data\n\n\n\nRemember that you can use View(wind_turbines) to inspect the data in a more human-readable format. In addition to looking at the data, obtaining summaries of the columns, and creating exploratory graphics with base R, there are many packages available to help with exploratory data analysis.\nFor example, the GGally package (Schloerke et al. 2024) makes it easy to create pairwise comparison plots and correlation matrices for the purposes of exploring some or all columns in your data.\n\nggpairs(\n  data = wind_turbines,\n  columns = c(\n    \"Province/Territory\",\n    \"Hub.height.(m)\",\n    \"Rotor.diameter.(m)\"\n  )\n)\n\n\n\n\n\n\nFigure 6.2: A 3x3 grid of comparisons between three columns in the wind_turbines data relationships using correlation, density plots, bar charts, scatter plots, and box plots.\n\n\n\n\n\n\nLet’s instead look at the number of turbines in each region, by creating an ordered bar chart. We use the table() function to get a count of the number per region, and sort() to order the counts from smallest to largest. We then use the barplot() function to make the chart, setting horiz = TRUE to make the bars horizontal for easier reading.\n\nbarplot(\n  sort(table(wind_turbines$`Province/Territory`)),\n  las = 1,\n  horiz = TRUE\n)\n\n\n\n\n\n\nFigure 6.3: Ordered bar chart showing the number of wind turbines commissioned in each province or territory.\n\n\n\n\nMost of the turbines are located in Ontario, but has this always been the case? We also have information on the commissioning date of each turbine. We could recreate this bar chart for different time periods to see how the geographic spread of turbines has changed over time. We can add wind_turbines$Commissioning.date into the table() function to create a stacked bar chart for each year:\n\nbarplot(\n  table(\n    wind_turbines$`Province/Territory`,\n    wind_turbines$Commissioning.date\n  ),\n  las = 1,\n  horiz = TRUE\n)\n\n\n\n\n\n\nFigure 6.4: Ordered bar chart showing the number of wind turbines commissioned in time period, with stacked bars showing how many are in each province or territory.\n\n\n\n\nAs you can see from the y-axis of Figure 6.4, the Commissioning.date isn’t always given as a year. Instead it’s sometimes given as a year range. Let’s start drafting out a more aesthetically pleasing version of this plot before we deal with processing the Commissioning.date data.\n\n6.2.2 Exploratory sketches\nThere are some years for which we have very few observations, and some turbines for which we don’t know the exact year of the commissioning date. Rather than plotting the number of turbines per year, let’s plot the number of turbines in different multiyear time periods. The choice of these time periods is open to designer choice. For this visualization, let’s start by considering four, 5-year time periods: 2000 - 2004, 2005 - 2009, 2010 - 2014, and 2015 - 2019.\nRather than making a stacked bar chart for each year, which can make it difficult to compare one region to another, let’s look at an alternative: a waffle chart. Waffle charts are sometimes referred to as square pie charts. Most commonly, they are visualized on a 10x10 grid, with each grid square representing 1%. The colors of the grid squares represent different categories. The advantage of waffle charts over pie charts (and to some extent bar charts), is that it’s easy for a user to read the percentages - they can simply count the squares! The disadvantage is that if there is less than 1% of values in a category, there’s no easy way to visualise this (although partially colored squares are an option). \nWaffle charts can also be used to show counts rather than percentages. For example, each square may represent a wind turbine and the color of the square the region it is in. For example, a waffle chart of counts might look something like Figure 6.5.\n\n\n\n\n\nFigure 6.5: Initial sketch of a faceted area charts showing packages use over time\n\n\nWe can make two slight variations to this basic version of the chart:\n\nWe have 6698 observations to plot which is a lot of individual grid squares. Instead, each square may represent some number of turbines, rather than just one.\nInstead of plotting squares, we could use icons. For example, we could plot an icon of a wind turbine. This variation of a waffle chart can be referred to as a pictogram. The icons can be colored based on the region in the Province/Territory column. Instead of using a traditional legend that takes up lots of space, we could use colored text within the subtitle as an alternative.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Canadian wind turbines: waffle plots and pictograms</span>"
    ]
  },
  {
    "objectID": "wind-turbines.html#preparing-a-plot",
    "href": "wind-turbines.html#preparing-a-plot",
    "title": "6  Canadian wind turbines: waffle plots and pictograms",
    "section": "\n6.3 Preparing a plot",
    "text": "6.3 Preparing a plot\nIn order to make a draft of Figure 6.5 using ggplot2, there are a few things we need to prepare:\n\nThe Commissioning.date column needs processed to deal with the multiyear labels, and grouped into 5-year categories.\nWe need to decide how many wind turbines each icon will represent.\nSome of the categories in the Province/Territory column may need grouped together because they have very small numbers, and might have less than the number of turbines represented by each icon.\n\n\n6.3.1 Data wrangling\nLet’s start by dealing with the Commissioning.date column. There are three types of values in here:\n\nSingle year e.g. \"2019\": this is the ideal scenario and we don’t need to do anything.\nTwo years separated by a / e.g. \"2001/2003\": there are several options for dealing with this. We could either take the first year, the last year, or (if they are non-consecutive years) a mid-point of the year range. Here, we’ll take the last year since this means that all wind turbines with that Commissioning.date will definitely have been commissioned by that date.\nThree years separated by a \"/\" e.g. \"2005/2006/2012\": this is more again more complex, but we’ll take the last year for the same reasons as above.\n\nEssentially, this means that:\n\nIf there is no \"/\" in the Commissioning.date, we do nothing.\nIf there is one or more \"/\" in the Commissioning.date, we extract whatever comes after the last one.\n\nLet’s make a function that does exactly that, called extract_after_last_slash(). The input this function is a vector of character strings. We start by checking which elements of the input contain a \"/\" using str_detect() from the stringr package (Wickham 2023b). We then use str_match() from stringr in combination with a regular expression to extract the element after the last \"/\". If there is no \"/\", the output will be NA. The str_match() function returns a matrix with the same number of rows as the length of the input, where the first column is the complete match i.e. the input. The second column contains the output we want so we use [, 2] to extract it. Finally, we use if_else() from dplyr, to if there was a \"/\" then use the output from str_match(), otherwise keep the original value. \n\nextract_after_last_slash &lt;- function(texts) {\n  has_slash &lt;- str_detect(texts, \"/\")\n  extracted &lt;- str_match(texts, \".*/(.*)$\")[, 2]\n  output &lt;- if_else(has_slash, extracted, texts)\n  return(output)\n}\n\n\n\n\n\n\n\nTip 6.6: Comparing if_else() and ifelse()\n\n\n\nIf you’ve used the ifelse() function in base R before, you might be wondering why there’s a very similarly named function in dplyr and what’s different about it. The main difference is that if_else() is a bit more strict about checking whether you’re doing what you think you’re doing. For example, let’s say we have a vector x of length 4 and we want to replace the values in x that are equal to 0 with something else. If that replacement is of length 3, that doesn’t really make sense. Which value in the vector of length 3 should it use? The if_else() function highlights this issue with an error, the ifelse() function quietly uses the value in the same position.\n\nx &lt;- c(1, 0, 2, 3)\nif_else(x == 0, c(4, 5, 3), x)\n\nError in `if_else()`:\n! `true` must have size 4, not size 3.\n\nifelse(x == 0, c(4, 5, 3), x)\n\n[1] 1 5 2 3\n\n\nThe if_else() function from dplyr also preserves types. If you put a Date into if_else(), then a Date is what comes out. That’s not always true with ifelse(). \n\n\nNow, let’s use our new extract_after_last_slash() function! Let’s start by using select() to keep only the columns we actually need: Province/Territory, and Commissioning.date. We then create a new column called Year which is the output of applying the extract_after_last_slash() to the Commissioning.date column. Initially, this column is still a character string so we convert is to a number using as.numeric(): \n\nturbines_year &lt;- wind_turbines |&gt;\n  select(\n    `Province/Territory`, Commissioning.date\n  ) |&gt;\n  mutate(\n    Year = extract_after_last_slash(Commissioning.date),\n    Year = as.numeric(Year)\n  )\n\nNow let’s group the new Year column into categories. Our categories span 2000 to 2019, so we start by filtering out any rows that don’t fit into this time frame using filter() from dplyr. We then use case_when() from dplyr to actually construct the categories. Here, we make use of the seq() function. The seq(2000, 2004) code creates a vector 2000 2001 2002 2003 2004. If any the Year is equal to any of those values, then it goes into the \"2000 - 2004\" category. And so on. Although R will automatically sort the year categories in the correct order since, in this case, the alphabetical order happens to match the desired order. However, it’s good practice to be explicit about what order the categories should have, so we can also set Year_Group to be a factor and specify the correct order. \n\nturbines_year_group &lt;- turbines_year |&gt;\n  filter(Year &gt;= 2000 & Year &lt;= 2019) |&gt;\n  mutate(\n    Year_Group = case_when(\n      Year %in% seq(2000, 2004) ~ \"2000 - 2004\",\n      Year %in% seq(2005, 2009) ~ \"2005 - 2009\",\n      Year %in% seq(2010, 2014) ~ \"2010 - 2014\",\n      Year %in% seq(2015, 2019) ~ \"2015 - 2019\"\n    )\n  ) |&gt;\n  mutate(\n    Year_Group = factor(Year_Group, levels = c(\n      \"2000 - 2004\", \"2005 - 2009\",\n      \"2010 - 2014\", \"2015 - 2019\"\n    ))\n  )\n\nLet’s look at the Province/Territory categories. Using count() and arrange() from dplyr, shows us that there is a big imbalance between the categories: \n\nturbines_year_group |&gt;\n  count(`Province/Territory`) |&gt;\n  arrange(-n)\n\n# A tibble: 12 × 2\n   `Province/Territory`          n\n   &lt;chr&gt;                     &lt;int&gt;\n 1 Ontario                    2662\n 2 Quebec                     1859\n 3 Alberta                     895\n 4 Nova Scotia                 310\n 5 British Columbia            292\n 6 Saskatchewan                153\n 7 Manitoba                    133\n 8 New Brunswick               119\n 9 Prince Edward Island        104\n10 Newfoundland and Labrador    27\n11 Northwest Territories         4\n12 Yukon                         1\n\n\nFirst, let’s rename the Province/Territory column to Region - a shorter name that will make it a little bit easier to work with. As well as the issue posed by small numbers in categories, twelve categories is also a fairly large number to visualize. We might choose to group together the six smallest categories. The choice of six is fairly arbitrary - but we want a balance between lots of categories with small numbers and few categories with very high numbers. We use mutate() and case_when() again, to change the value in Region to \"other\" when the region is one of the six specified values. \nThen, we count up how many turbines were commissioned in each Year_Group and Region combination using count(). We also need to decide how many turbines each icon will represent. It will take a little bit of trial and error to decide on this value - depending on what resolution you want, and how big your final plot will be. Here, we used 20. This means we divide the turbine count by 20 to obtain the number of icons required, rounding the values as we can only have whole icons. \nWe filter out any rows where the rounded count is 0 since these won’t be plotted. As an aside, it’s important to think about these values before we simply throw them away. For example, a region which had 9 turbines in a particular time period won’t show up on this plot - since 9/20 is less than 0.5 and so is rounded to 0. This is an unfortunate limitation of this type of waffle plot variation. \n\nturbines_region &lt;- turbines_year_group |&gt;\n  rename(Region = `Province/Territory`) |&gt;\n  mutate(\n    Region = case_when(\n      Region %in% c(\n        \"Northwest Territories\",\n        \"Newfoundland and Labrador\",\n        \"Prince Edward Island\",\n        \"New Brunswick\",\n        \"Manitoba\",\n        \"Saskatchewan\"\n      ) ~ \"other\",\n      TRUE ~ Region\n    )\n  ) |&gt;\n  count(Region, Year_Group) |&gt;\n  mutate(n = round(n / 20)) |&gt;\n  filter(n != 0)\n\nThe Region variable will be plotted alphabetically be default, but this is rarely the most useful ordering. Instead, let’s order by magnitude - with the exception of putting the \"other\" category last.\nWe start by using the summarise() function to add up the number of turbines across the different time periods, getting a total per Region. We then arrange() them in a descending order (note the - in front of the n). We then filter() out the \"other\" category and stick it on the end after extracting the Region column using pull(). \n\nregion_levels &lt;- c(turbines_region |&gt;\n  summarise(n = sum(n), .by = Region) |&gt;\n  arrange(-n) |&gt;\n  filter(Region != \"other\") |&gt;\n  pull(Region), \"other\")\n\nNow, let’s apply these new factor levels to the Region column using mutate(). Due to a quirk of the waffle package (Rudis and Gandy 2023) that we’ll be using to make our plot (it plots data in the order it appears in the dataset, rather than according to the factor levels), we also sort the data using arrange() from dplyr. \n\nplot_data &lt;- turbines_region |&gt;\n  mutate(\n    Region = factor(Region, levels = region_levels)\n  ) |&gt;\n  arrange(Region)\n\nOur data is now ready for us to plot!\n\n6.3.2 Installing Font Awesome fonts\nBefore we jump into plotting, we need to do one more thing. In Figure 6.5, we decided we would use icons in the waffle chart instead of just colored grid squares. So we need to find a way of using icons in R.\nIn Chapter 2, we saw how to load fonts into R using the sysfonts and showtext packages. Luckily, we can use a similar process here to load in an icon font. Font Awesome is a popular icon toolkit that provides scalable vector icons and social logos (more on this in Chapter 7) (Font Awesome 2024). You can download font files containing the freely available icons at fontawesome.com/download, selecting the Free for Desktop option. This will download a zip file containing several font files. For this chart, we only need one of those files Font-Awesome-6-Free-Solid-900.otf. Save this .otf file somewhere you can find it again - such as in a project folder called fonts. \nThen, we’ll use font_add() from sysfonts (Qiu 2022) to load the font into R. The family argument is what we want to refer to the font as in R. The regular argument is the file path to the .otf file. We then use showtext_auto() and showtext_opts() in exactly the same way as we did for Chapter 2, to use showtext to render the text. \n\nfont_add(\n  family = \"Font Awesome 6\",\n  regular = \"fonts/Font-Awesome-6-Free-Solid-900.otf\"\n)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n\n\n\n\nTip 6.7: Installing Font Awesome icons with waffle\n\n\n\nThe waffle package comes bundled with Font Awesome 5, and you can use the install_fa_fonts() function to help you install the font, as an alternative to approach described here. Downloading and installing using the font_add() approach will give you access to a wider range of icons since it used the more recent Font Awesome 6 fonts, and means you don’t have to install the font system wide - you only need to load it into R. \n\n\nNow we’re ready to plot!\n\n6.3.3 The first plot with waffle\n\nWe’re going to use the waffle package (Rudis and Gandy 2023) to create our plot. Though the package includes the waffle() function which allows you to create a waffle chart directly from a data.frame, it also include geom functions to allow you to build charts in the way you normally would with ggplot2. The geom_waffle() function can be used to build traditional waffle charts with grid squares, and the geom_pictogram() function is used for waffle charts with icons i.e. pictograms. We’ll use geom_pictogram(). This means we start our plot as we normally do, by passing our data into ggplot(). \nWe then edit the aesthetic mapping in the geom_pictogram() function, where we specify the label and color - both mapped to the Region column. This might seem slightly unusual because we don’t want the icon to vary with region. Instead, we want to use the same icon for all categories. However, geom_pictogram() expects label to vary by category, so we map it to region and we’ll later use scale_label_pictogram() to make them all the same icon. The values argument is also a required aesthetic. We use the n column in the data to specify how many icons should be plotted for each category. The x and y coordinates are automatically calculated when we use the geom_pictogram() function so we don’t need to map these out in the aes() function. \nWe also edit a few other parameters of the geom_pictogram() function. By default, pictograms are stacked horizontally as this is often easier to read (similar to horizontal bar charts). However, it’s also very common to put date variables on the x-axis. Setting flip = TRUE will stack the pictogram categories upwards, and allow the date categories to go on the x-axis. Setting n_rows = 10 means that each row of the pictogram will contain 10 icons (remember that we’ve flipped rows and columns here). We can edit the size of the icons in the same way we would edit the font size in geom_text(), for example. It might take a little bit of trial and error to find the right size to make sure icons are large enough to see, but don’t overlap. We also need to state that the icons come from Font Awesome 6 by setting family = \"Font Awesome 6\" (the same name as the family argument used in font_add()). \nFinally, we add facet_wrap() to create a pictogram for each date range, placing them in a single row, and moving the facet label to the bottom of the chart. \n\nbasic_plot &lt;- ggplot(data = plot_data) +\n  geom_pictogram(\n    mapping = aes(\n      label = Region,\n      color = Region,\n      values = n\n    ),\n    flip = TRUE,\n    n_rows = 10,\n    size = 2.5,\n    family = \"Font Awesome 6\"\n  ) +\n  facet_wrap(~Year_Group,\n    nrow = 1,\n    strip.position = \"bottom\"\n  )\nbasic_plot\n\n\n\n\n\n\nFigure 6.6: Pictogram showing the number of turbines per time period in each region, where the region name is showing instead of the icons.\n\n\n\n\n\n\n\n\n\n\nTip 6.8: Proportional waffle charts\n\n\n\nBy default, geom_pictogram() and geom_waffle() both assume that the column mapped to values should be plotted as counts. If you’d prefer to plot the values as percentages, set make_proportional = TRUE.\n\n\nWhat you might immediately notice about Figure 6.6 is that there are no icons. Instead, the plot has printed the Region names (even though we’ve set family = \"Font Awesome 6\"). This is because we haven’t defined which icons we want to use. To find an appropriate icon and what it’s called, we can browse the Font Awesome website at fontawesome.com/search and search for related icons. For example, we might search for a wind turbine icon. Though Font Awesome wind turbine icons do exist, they are unfortunately only available with the Pro version. There are other free icons that sort of fit this theme: wind, bolt (to represent energy), or fan to name a few. We’ll use fan (Font Awesome 2024). \nWe can add scale_label_pictogram() from waffle to our plot to specify the icons. We would normally pass in a vector of icon names to the values argument - one icon for each category. However, since we want to use the same icon for all categories, we can simply pass in a single name - taking advantage of the fact that R re-uses elements of vectors. We set guide = \"none\" to remove the legend for icons as they are all the same. Alternatively, you can later set theme(legend.position = \"none\") as we did in previous chapters to remove the legend. \n\nicons_plot &lt;- basic_plot +\n  scale_label_pictogram(\n    values = \"fan\",\n    guide = \"none\"\n  )\nicons_plot\n\n\n\n\n\n\nFigure 6.7: Pictogram showing the number of turbines per time period in each region, with fan icons indicating 20 turbines currently looking overcrowded.\n\n\n\n\nYou might also have noticed that the values on the y-axis are incorrect - there definitely more than 15 turbines in the 2010 - 2014 time frame! We’ll deal with the axis in the next section.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Canadian wind turbines: waffle plots and pictograms</span>"
    ]
  },
  {
    "objectID": "wind-turbines.html#advanced-styling",
    "href": "wind-turbines.html#advanced-styling",
    "title": "6  Canadian wind turbines: waffle plots and pictograms",
    "section": "\n6.4 Advanced styling",
    "text": "6.4 Advanced styling\nNow we still need to edit the colors used in the plot, add a title and subtitle (including colored text to replace the legend), and edit the axis labels.\n\n6.4.1 Colors with rcartocolor\n\nWe start by defining variables for the background and text colors: \n\nbg_col &lt;- \"#FAFAFA\"\ntext_col &lt;- \"black\"\n\nLet’s also define a color palette that we’ll use for the color of the icons. We’re looking for 6 different colors - one for area. The rcartocolor (Nowosad 2018) package provides access to the CARTOColors color palettes for maps designed by CARTO (CARTO 2016). Although these palettes were primarily designed for coloring maps, the color palettes are also very effective for other types of graphics.\nIn the rcartocolor package, categorical palettes are referred to as qualitative palettes. We can see all available qualitative palettes with a sufficient number of colors using display_carto_all(): \n\ndisplay_carto_all(\n  n = 6, type = \"qualitative\"\n)\n\n\n\n\n\n\nFigure 6.8: All qualitative color palettes with at least 6 colors in the rcartocolor package.\n\n\n\n\nAlthough the rcartocolor package has the scale_fill_carto_d() function which we could use directly in our plots, we’ll still save the color palette as a vector of hex codes to allow us to re-use the colors more easily. As you can see in Figure 6.8, in the qualitative palettes in the rcartocolor package, the last color is often a gray color. That’s a great choice for representing missing data, but when we want different colors for categories it doesn’t work as well. The trick is to ask for one more color than we need, and then throw away the last element in the color palette. We have 6 categories in our plot, so we ask for 7 colors using the carto_pal() function and then extract only the first 6. We’ll use the \"Vivid\" palette here. \nWe also make the col_palette vector a named vector by using the names() function, and using region_levels as the names. Although this isn’t necessary for adding the colors to the plot, it will make it easier to extract the colors and ensure each color is mapped to the correct category label.\n\ncol_palette &lt;- carto_pal(\n  n = length(unique(plot_data$Region)) + 1,\n  name = \"Vivid\"\n)[1:length(unique(plot_data$Region))]\nnames(col_palette) &lt;- region_levels\n\nWe can then pass this col_palette vector into scale_color_manual() to apply the colors to our plot. Since we’ll be using colored text instead of a traditional legend, we set guide = \"none\" to remove the legend again. \n\ncol_plot &lt;- icons_plot +\n  scale_color_manual(\n    values = col_palette,\n    guide = \"none\"\n  )\n\n\n6.4.2 Adding styled text with marquee\n\nWe’ve already seen in Chapter 2 and Chapter 3 how to format the title or subtitle text to be bold using the face = \"bold\" argument inside theme() elements. But what if we want to make only part of the text bold? We can use the marquee package (Pedersen and Mitáš 2024) to add styling to text within in a string. The marquee package allows you to use Markdown syntax in text when you’re making graphics in R, including in plots built with ggplot2 or other graphics built with grid. \nIn Markdown, to make text bold, you enclose it inside two pairs of asterisks e.g. **bold text**. For example, if we wanted to put the entire title in bold font, we could write the title inside **. In the caption, we might want to embolden the words Data and Graphic to highlight that there are two different fields of information:\n\ntitle &lt;- \"**Canadian wind turbines are mostly found in Ontario**\"\ncap &lt;- \"**Data**: Natural Resources Canada | **Graphic**: N. Rennie\"\n\nThis type of formatting for the plot caption is something that we might like to re-use across multiple plots. And when we want to re-use code, it’s almost always useful to make it into a function. Let’s define a function called source_caption() which has three arguments:\n\n\nsource: a character string for the source of the data\n\ngraphic: a character string for the attribution of the visualization\n\nsep: a character string for what should separate the two pieces of text, which has \" | \" as a default.\n\nWe then use glue() from glue to stick these three arguments together, and include the bold formatting using **. Here we use namespacing (prefixing the function name with the package name and ::) to make it easier to re-use this function in later chapters.\n\nsource_caption &lt;- function(source, graphic, sep = \" | \") {\n  caption &lt;- glue::glue(\n    \"**Data**: {source}{sep}**Graphic**: {graphic}\"\n  )\n  return(caption)\n}\n\nWe can construct the caption using our new source_caption() function:\n\ncap &lt;- source_caption(\n  source = \"Natural Resources Canada\",\n  graphic = \"N. Rennie\"\n)\ncap\n\n**Data**: Natural Resources Canada | **Graphic**: N. Rennie\n\n\nYou can see that it’s identical to the one we manually created earlier. We’ll also re-use the source_caption() function in later chapters.\nLet’s move onto the subtitle. In this visualization, the subtitle will also be doubling as a legend as we’ll use colored text to denote the different categories. In marquee, text can be colored by wrapping the text in curly brackets, where the first word is pre-fixed by a period and identifies the color of the text i.e. {.color text to color}. For example, {.red This is red text.}.\nWe want to add the colors and the text to be colored in a programmatic way. We’ll use square brackets to subset the values and names stored in the col_palette vector. Here, col_palette[[1]] extracts the hex code for the color of the first category, and names(col_palette)[[1]] extracts the name of the first category.\nNormally, when we want to write character strings and insert variables into the string, we’d use glue() to combine them. However, the {} that we normally use for variables in glue() will get mixed up with the {} we’ll use for text formatting with marquee. There are a couple of different ways we can get around this problem. One way is changing the delimiters used in glue(). For example, by setting .open = \"[\" and .close = \"]\" inside the glue() function. Alternatively, we can use marquee_glue() from the marquee package - an equivalent version of glue() that was built to deal with this problem.\n\nst &lt;- marquee_glue(\n  \"The Canadian Wind Turbine Database contains the geographic location and key technology details for wind turbines installed in Canada. It includes information about turbines installed in {.{col_palette[[1]]} {names(col_palette)[[1]]}}, {.{col_palette[[2]]} {names(col_palette)[[2]]}}, {.{col_palette[[3]]} {names(col_palette)[[3]]}}, {.{col_palette[[4]]} {names(col_palette)[[4]]}}, {.{col_palette[[5]]} {names(col_palette)[[5]]}}, and {.{col_palette[[6]]} {names(col_palette)[[6]]}} regions.\"\n)\n\nLet’s see what our subtitle looks like when the variables have been evaluated:\n\nst\n\nThe Canadian Wind Turbine Database contains the geographic location and key technology details for wind turbines installed in Canada. It includes information about turbines installed in {.#E58606 Ontario}, {.#5D69B1 Quebec}, {.#52BCA3 Alberta}, {.#99C945 Nova Scotia}, {.#CC61B0 British Columbia}, and {.#24796C other} regions.\n\n\nThis is the reason that we wanted the \"other\" category to be in lower case and in last position when constructing region_levels - to make the sentence read better.\nWe add these text elements to our plot in the normal way, by passing them into the labs() function: \n\ntext_plot &lt;- col_plot +\n  labs(\n    title = title,\n    subtitle = st,\n    caption = cap\n  )\ntext_plot\n\n\n\n\n\n\nFigure 6.9: Pictogram showing the number of turbines per time period in each region, with title and caption text showing asterisks that indicate bold text.\n\n\n\n\nYou’ll notice that the formatting hasn’t been applied, and that the ** have been rendered literally. We’ll deal with this when we edit the arguments in theme() - we haven’t actually used marquee yet to format the title text!\n\n6.4.3 Adjusting scales and themes\nWe can make a final few tweaks to our plot, to apply the formatting with marquee and make it look a little bit cleaner. Let’s start by adjusting the scales. At the moment, the y-axis ranges from 0 to around 15. We know this isn’t correct because we have over 6,500 observations in our data. There are two reasons why the scale of the y-axis is incorrect:\n\nEach icon represents 20 turbines, so the y-axis labels are currently showing as 20 times smaller than they should be.\nWithin each facet, we row contains 10 icons, so the y-axis labels are currently showing as another 10 times smaller than they should be.\n\nLet’s fix that by passing a function into the labels argument of scale_y_continuous(). The function takes the existing y-axis label, multiplies it by 10, multiplies it by 20, and formats it using a thousand separator comma. We set expand = c(0, 0) to remove the extra space at the top and bottom of the y-axis. Let’s also choose slightly nicer break points for the y-axis - ranging from 0 to 4,000 with breaks every 1,000. Unfortunately, we need to specify the limits and the breaks on the original scale rather than on the label scale e.g. an break point of 15 is actually a break point of 15 * 20 * 10 = 3000. Adding coord_fixed() helps to deal with the overlapping icons issue, by making each icon area square. \n\nscale_plot &lt;- text_plot +\n  scale_y_continuous(\n    labels = function(x) {\n      format(\n        x * 10 * 20,\n        big.mark = \",\"\n      )\n    },\n    expand = c(0, 0),\n    breaks = c(0, 5, 10, 15, 20),\n    limits = c(0, 20)\n  ) +\n  coord_fixed()\n\nLet’s make a few final edits to tidy up our plot by editing the theme. We’ll use theme_minimal() as a base theme (making the font size a little bit smaller), and then make a few further edits using the theme() arguments. \nWithin theme(), we start by setting plot.title.position and plot.caption.position to \"plot\" to align the title, subtitle, and caption text with the edge of the whole plot, rather than the start of the first panel. Some additional spacing around the edge of the plot is added using plot.margin and the background color is edited by using the fill and color arguments in element_rect() for the plot.background argument. The gridlines are also made slightly thinner by adjusting panel.grid.major. \nFinally, we edit the plot, subtitle, and caption elements and specify them all using element_marquee(). By using element_marquee(), the Markdown syntax we’ve applied, such as the bold and colored text, will be rendered correctly. You can adjust the color, size, margin and hjust of marquee text in the same way you would with element_text(). If you have some elements of the text rendered with element_text() and some rendered with element_marquee(), you may notice some differences in the text sizing and spacing. Try setting the size of individual elements with the size argument. \nThe width argument applies text wrapping, where width = 1 means the text wraps to the full width of the plot. This is similar to the way that element_textbox_simple() from ggtext works. However, the width is not set by default, so if you want the text to wrap it’s important to specify the width.\n\n\n\n\n\n\nTip 6.9: Requirements for using marquee\n\n\n\nThe marquee package relies on some of the more recent features in the R graphics engine. This means that you need at least version 4.3 of R for marquee text to render correctly. Not all graphics devices support these new features (especially in Windows) so you might need to adjust the graphics device that R uses. The devices made available through the `ragg`` package (Pedersen and Shemanarev 2023) are a good choice. \n\n\n\nscale_plot +\n  theme_minimal(\n    base_size = 8\n  ) +\n  theme(\n    # spacing around text and plot\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.margin = margin(5, 10, 5, 10),\n    # background and grid lines\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.grid.major = element_line(\n      linewidth = 0.4\n    ),\n    # format text with marquee\n    plot.title = element_marquee(\n      color = text_col,\n      width = 1,\n      size = 12,\n      margin = margin(b = -10)\n    ),\n    plot.subtitle = element_marquee(\n      color = text_col,\n      width = 1,\n      size = 9\n    ),\n    plot.caption = element_marquee(\n      hjust = 0,\n      lineheight = 0.5,\n      size = 8,\n      margin = margin(t = 5)\n    )\n  )\n\n\n\n\n\n\nFigure 6.10: Pictogram showing the number of turbines per time period in each region, with colored text in the subtitle indicating which color maps to each region.\n\n\n\n\nAnd we’re done and ready to save a copy! \n\nggsave(\n  filename = \"wind-turbines.png\",\n  width = 5,\n  height = 0.75 * 5\n)",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Canadian wind turbines: waffle plots and pictograms</span>"
    ]
  },
  {
    "objectID": "wind-turbines.html#reflection",
    "href": "wind-turbines.html#reflection",
    "title": "6  Canadian wind turbines: waffle plots and pictograms",
    "section": "\n6.5 Reflection",
    "text": "6.5 Reflection\nThe colored subtitle as an alternative to a legend is effective because it uses much less space than a traditional legend - leaving more room for the data. However, there are some elements of the subtitle that could still be improved. We’ve discussed already the limitations of waffle plots and pictograms in terms of the lack of representation of categories with small numbers. This means that we had to group some regions together, and so regions with fewer turbines have less information included in the chart. Perhaps the subtitle could be updated to explain to users that each icon represents 20 turbines, and that this means regions with 10 or fewer turbines are not represented.\nThere’s also some uncertainty around the date used, which isn’t really explained in the chart. When processing the Commissioning.date column, we used the most recent date but that isn’t necessarily always the best choice. A limitation of the data is that we also only have commissioning date, not installation date or date of first operation. This means that perhaps there are some values in the data that suggest a turbine exists in one time period when it hasn’t yet been built.\nFinally, we’ve used a fan icon because the Font Awesome wind turbine icon is only available in the Pro version. Using a wind turbine icon would be much clearer, and more consistent with the theme of the plot. We could look at using an alternative icon font, or we could perhaps use images instead. See Section 14.2 for a description of how we might replace the existing fan icons with a wind turbine icon from a different source.\nEach plot created during the process of developing the original version of this visualization was captured using camcorder, and is shown in the gif below. If you’d like to learn more about how camcorder can be used in the data visualization process, see Section 14.1.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Canadian wind turbines: waffle plots and pictograms</span>"
    ]
  },
  {
    "objectID": "wind-turbines.html#exercises",
    "href": "wind-turbines.html#exercises",
    "title": "6  Canadian wind turbines: waffle plots and pictograms",
    "section": "\n6.6 Exercises",
    "text": "6.6 Exercises\n\nInstead of using the icons to represent the number of turbines, recreate this visualization where the icons represent the total capacity (kW). Should you choose a different icon?\nCan you arrange both versions (number and capacity) as a single visualization? Hint: you might want to use the patchwork package discussed in Chapter 12.\n\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Canadian wind turbines: waffle plots and pictograms</span>"
    ]
  },
  {
    "objectID": "cats.html",
    "href": "cats.html",
    "title": "7  Cats: data-driven annotations with ggtext",
    "section": "",
    "text": "7.1 Data\nIn this chapter, we’ll learn how to create custom captions with social media icons, and add data-driven annotations to our plots.\nPackages required in this chapter:\nBetween 2013 and 2017, Kays et al. (2020) recruited volunteers in the United States of America, the United Kingdom, Australia, and New Zealand who volunteered to attach GPS sensors to their pet cats. The data (McDonald and Cole 2020) was collected because pet cats kill native species, such as birds, and this creates conservation issues. Studying how different cats move around when they’re not at home, can help us to understand the impact of pet cats on our environment. In this chapter, we’ll focus on the data from cats (and their owners!) based in the United Kingdom.\nThe data was used as a TidyTuesday dataset in January 2023 (after being suggested by Tom Mock), and so can be loaded with the tt_load() function from tidytuesdayR (Hughes 2022b). There are two datasets included, which we’ll read in as cats and cats_reference.\ntuesdata &lt;- tt_load(\"2023-01-31\")\ncats &lt;- tuesdata$cats_uk\ncats_reference &lt;- tuesdata$cats_uk_reference\nThe cats data contains information from the sensors including the latitudes and longitudes recorded at different time stamps. There are multiple (many) observations for each cat, resulting in a total of 18215 rows across 11 columns. Some of the observations have been marked as outliers, either by an automatic algorithm, manually, or both. The cats_reference data contains information provided by the cat owners on each individual cat such as their name, age, sex, how long they spend indoors, and what type of food they eat. The two datasets can be joined by the tag_id column that exists in both cats and cats_reference.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cats: data-driven annotations with **`ggtext`**</span>"
    ]
  },
  {
    "objectID": "cats.html#exploratory-work",
    "href": "cats.html#exploratory-work",
    "title": "7  Cats: data-driven annotations with ggtext",
    "section": "\n7.2 Exploratory work",
    "text": "7.2 Exploratory work\nWith the cats data, we could focus the spatial patterns and look at the range of where cats travel. For example, how far does the average cat travel in a day? Alternatively, we could focus on the cats_reference data and look at relationships between different behaviors and characteristics of cats. For example, do older cats spend more time indoors? Or do cats who live with other cats bring home more prey?\nThe third option, and perhaps the most useful, is to join the two datasets together. Joining the data on the individuals to their geographic data might allow us to answer questions such as: do male cats travel further per day? Do older cats stay closer to home? What are the strategies of a cat that brings home lots of gifts?\n\n7.2.1 Data exploration\nLet’s start by digging into the geographic cats data. We can make a very quick plot of the co-ordinate data using plot(). \n\nplot(\n  x = cats$location_long,\n  y = cats$location_lat,\n  xlab = \"Longitude\",\n  ylab = \"Latitude\"\n)\n\n\n\n\n\n\nFigure 7.1: Scatter plot showing the geographic coordinates obtained from the GPS data attached to pet cats. The lack of background map makes it hard to interpret without context, but some clusters can be seen.\n\n\n\n\nGiven that the data in Figure 7.1 is geographic coordinate data, we would be able to understand it a bit better with a background map to give more context to location and distance. However, even with this very minimal map, it’s clear that there are lots of small clusters of points - perhaps each cluster is a specific cat?\n\n\n\n\n\n\nTip 7.1: Remembering latitude and longitude\n\n\n\nNo matter how many times you plot them on a map, remembering which way round latitude and longitude go on the x- and y-axes might not seem to get any easier! One way to help you remember:\n\nPicture a world map. It’s probably rectangular with the long edge going along the bottom.\nThe longitude goes along the bottom i.e. the x-axis.\n\n\n\nThe GPS sensors also report data on the ground speed of the cats, potentially allowing us to see patterns in their activity level throughout the day. Let’s have a look at the ground_speed column by plotting an exploratory histogram with hist(): \n\nhist(\n  x = cats$ground_speed,\n  xlab = \"Ground speed (m/s)\",\n  main = \"Histogram of ground speed\"\n)\n\n\n\n\n\n\nFigure 7.2: Histogram of the ground speeds recorded from GPS sensors, showing a highly skewed distribution with some very high speeds!\n\n\n\n\nAt first glance you might not see anything of particular note about Figure 7.2. However, the data description reports that the ground speed is measured in meters per second (m/s), but the histogram goes up to 250,000. For those of you who don’t often work in m/s, that’s about 560,000 miles per hour, or 900,000 kilometers per hour! Either these are exceptionally fast cats or there’s an issue with the ground speed data. Perhaps the units were incorrectly recorded, or the sensors did not perform correctly. We don’t know what the issue is, but this is certainly a column in the data that we shouldn’t trust too much.\nLet’s focus on the cats_reference data instead, and look at how characteristics of the study cats varied. For example, we might look at how long the cats spend indoors, which is recorded as a categorical variable, hrs_indoors. We can calculate how many cats fall into each time indoors category using table() and then use barplot() to visualize it: \n\nbarplot(table(cats_reference$hrs_indoors))\n\n\n\n\n\n\nFigure 7.3: Bar chart showing the number of cats that fall into each of the five categories for the average amount of time they spend indoors. Although the data may at first appear numeric, it is in fact categorical data.\n\n\n\n\nWe might expect that the number of hours a cat spends indoors varies with age, with older cats spending more time indoors due to health problems or energy levels. Let’s use plot() to create a quick scatter plot of age_years against hrs_indoors to investigate: \n\nplot(\n  x = cats_reference$age_years,\n  y = cats_reference$hrs_indoors,\n  xlab = \"Age\",\n  ylab = \"Hours indoors\"\n)\n\n\n\n\n\n\nFigure 7.4: Scatter plot of the relationship between the age of pet cats and the average amount of time they spend indoors.\n\n\n\n\nThere’s a little bit of a pattern in Figure 7.4, but not a particularly strong one. This is perhaps partly due to the categorical nature of the hrs_indoors column, since we lose information when we group data that is naturally continuous.\nThis categorization of data also results in many of the points being stacked on top of each other. There are 101 cats in the data, but there doesn’t appear to be 101 points in Figure 7.4. If we were to take the visualization further, we might consider changing it from a scatter plot to a bubble plot. With bubble plots, the size of the points relates to some other variable e.g. the number of cats in each age_years-hrs_indoor category combination.\n\n7.2.2 Exploratory sketches\nLet’s take the idea from Figure 7.4 but develop into a much more effective visualization, making particular use of text and annotations. We’ll update the chart to make a bubble chart. But we’ll also add annotations to highlight interesting aspects of the data e.g. the oldest cat, or the average amount of time spent indoors. Figure 7.5 gives a basic illustration of how we might develop it: \n\n\n\n\n\nFigure 7.5: Initial sketch of a bubble plot with annotations, to show the relationship between the age of pet cats and how much time they spend indoors.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cats: data-driven annotations with **`ggtext`**</span>"
    ]
  },
  {
    "objectID": "cats.html#preparing-a-plot",
    "href": "cats.html#preparing-a-plot",
    "title": "7  Cats: data-driven annotations with ggtext",
    "section": "\n7.3 Preparing a plot",
    "text": "7.3 Preparing a plot\nIn order to create Figure 7.5 in ggplot2, we only need to work with two columns in the cats_reference data: the cat age, age_years, and the average number of hours per day spent indoors, hrs_indoors.\n\n7.3.1 Data wrangling\nThe hrs_indoors column contains five categories for time spend indoors: 2.5, 7.5, 12.5, 17.5, and 22.5. Since these category names are numbers, they are encoded in R as numeric columns instead of categories, so we start by convert the hrs_indoors column to a factor(). To know how big the bubbles of our plot will be, we need to know how many cats there are for each combination of age and indoor time. We group_by() the two relevant columns and then use count() from dplyr to count the number of each category combination, before un-grouping with ungroup(). \nThere’s one cat (Johnny) whose age is unknown, so we use drop_na() from tidyr to remove this value. See Chapter 4 and Chapter 10 for some other discussions on visualizing and dealing with missing values in your data. \n\nplot_data &lt;- cats_reference |&gt;\n  select(age_years, hrs_indoors) |&gt;\n  mutate(hrs_indoors = factor(hrs_indoors)) |&gt;\n  group_by(age_years, hrs_indoors) |&gt;\n  count() |&gt;\n  ungroup() |&gt;\n  drop_na()\n\n\n7.3.2 The first plot\nWe pass our data into the ggplot() function as usual, and then set up the aesthetic mapping with aes(). As we did in Figure 7.4, we put age on the x-axis and hours indoors on the y-axis. Here, we also map the number of cats in each category combination, n, to the size aesthetic to make the bubbles. Although we are making a bubble plot rather than a scatter plot, we still use geom_point() since both types of plots are made from points. Scatter plots are essentially a special case of bubble plots where all of the points represent one observation and so are all the same size. \n\nbasic_plot &lt;- ggplot(\n  data = plot_data,\n  mapping = aes(\n    x = age_years,\n    y = hrs_indoors,\n    size = n\n  )\n) +\n  geom_point()\nbasic_plot\n\n\n\n\n\n\nFigure 7.6: Bubble plot of the relationship between the age of pet cats and the average amount of time they spend indoors, with the size of circles indicating the number of cats in each category.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cats: data-driven annotations with **`ggtext`**</span>"
    ]
  },
  {
    "objectID": "cats.html#advanced-styling",
    "href": "cats.html#advanced-styling",
    "title": "7  Cats: data-driven annotations with ggtext",
    "section": "\n7.4 Advanced styling",
    "text": "7.4 Advanced styling\nWe’re now ready to start styling our plot, to take it from a generic, default bubble plot to something that doesn’t even look like it was made with R!\n\n7.4.1 Colors\nSince we aren’t mapping any columns in the data to color or fill, we don’t need to specify a color palette. Instead, we’ll simply choose a text color (dark gray), background color (white), and highlight color (purple). \n\ntext_col &lt;- \"#2F4F4F\"\nhighlight_col &lt;- \"#914D76\"\nbg_col &lt;- \"white\"\n\nWe can update our initial basic_plot code to change the color of the points to highlight_col inside geom_point(). Remember that since this color isn’t based on a column in the data, it doesn’t need to go inside aes(). \nThe size legend is generated automatically, and it picks evenly spaced intervals given the range of the data. Unfortunately this sometimes results in labels that don’t quite make sense. Here, we have a label for 2.5 cats - not something that exists in the natural world! Let’s choose more appropriate breaks for the size legend. Here, our size data ranges between 1 and 9, so let’s go for 3, 6, and 9. We pass these desired break points in as a vector to scale_size(). Note that the sizes of the points in the plot are unchanged, only the legend is updated. \n\nbasic_plot &lt;- ggplot(\n  data = plot_data,\n  mapping = aes(\n    x = age_years,\n    y = hrs_indoors,\n    size = n\n  )\n) +\n  geom_point(color = highlight_col) +\n  scale_size(breaks = c(3, 6, 9))\nbasic_plot\n\n\n\n\n\n\nFigure 7.7: Bubble plot of the relationship between the age of pet cats and the average amount of time they spend indoors, with the size of purple circles indicating the number of cats in each category. The legend for size is now presented using whole numbers.\n\n\n\n\n\n7.4.2 Text and fonts\nHere, we’ll use a fun typeface for the title, but keep use a clean and minimal typeface for the rest of the text. For the body_font, we’ll use Ubuntu as we did in Chapter 5. For the title_font, we’ll use Chewy, an almost cartoonish typeface that vaguely resembles handwriting. Both are Google Fonts and so we load them using font_add_google() as we’ve done in previous chapters, and set up the relevant showtext options. \n\nfont_add_google(name = \"Chewy\")\nfont_add_google(name = \"Ubuntu\")\nshowtext_auto()\nshowtext_opts(dpi = 300)\ntitle_font &lt;- \"Chewy\"\nbody_font &lt;- \"Ubuntu\"\n\n\n7.4.3 Adding annotations\nCharts are considered visual elements. And the quote a picture is worth a thousand words is often floated around as motivation for why you should visualize your data instead of describing it. But just because you’re making a picture doesn’t mean you can’t also use words. It’s not necessarily a weakness of a chart, if adding some textual indicators improves its clarity.\nIn Chapter 2, when we constructed the subtitle, we used glue() to create data-driven text. This meant that, if the underlying data was updated, the subtitle would also be updated correctly. It’s a more efficient approach that’s less prone to accidental errors than hard coding all of the text. We can take a similar approach when adding annotations to plots.\nLet’s say we want to add an annotation to the plot that highlights the oldest cat in the data. We’ll start by obtaining the data that relates to the oldest cat. We can use slice_max() from dplyr to obtain the row of the data where the age_years is highest: \n\nannot_oldest &lt;- cats_reference |&gt;\n  slice_max(age_years)\n\nWhen it comes to adding the annotation to the plot, there are several choices we can make within ggplot2:\n\n\ntext or label: using text simply adds the text while label adds text within a rectangular box.\n\nannotate() or geom_*(): annotate() places objects (in this case text) at fixed, specified locations whereas geom_*() functions add objects based on some input data.\n\nAny combination of these choices could likely work for the annotations we plan to add. However, we’re going to use ggtext (C. O. Wilke and Wiernik 2022) instead of just ggplot2. The ggtext package will allow us to perform further customization of the labels more easily. We’ve already seen examples of using ggtext for automatically wrapping long strings, but we’re going to showcase some of its other features here - such as coloring and highlighting specific elements of text. We’ve previously described coloring sections of text in Chapter 6 using the marquee package, but we’ll look at ggtext as a comparison.\nFrom ggtext, we can use the geom_textbox() function to add an annotation. Like the element_textbox_simple() we’ve been using from ggtext for the subtitle in previous chapters, geom_textbox() will automatically wrap the text to some pre-specified textbox size. The label aesthetic uses glue() to the cat’s name and age into the text. We can wrap sections of text inside some &lt;span&gt; tags. This lets us specify how we want to style the font within the tags using CSS. We also use glue() to insert the highlight_col into the style for the font used for the cat’s name. You may notice some similarity with the colored text code in Chapter 6 that uses marquee instead of ggtext. Additional arguments of geom_textbox() allow you to control the color of the text, box outline, and background color as well as the size and alignment of the text. \n\nannotated_plot &lt;- basic_plot +\n  geom_textbox(\n    data = annot_oldest,\n    mapping = aes(\n      x = age_years - 2.5,\n      y = factor(hrs_indoors),\n      label = glue(\n        \"The oldest cat is &lt;span style='color:{highlight_col}'&gt;{animal_id}&lt;/span&gt; who is {age_years} years old.\"\n      )\n    ),\n    halign = 0.5,\n    hjust = 0.5,\n    size = 2.5,\n    lineheight = 0.5,\n    family = body_font,\n    box.color = text_col,\n    color = text_col,\n    alpha = 0.5,\n    maxheight = unit(4, \"lines\"),\n    minwidth = unit(2, \"lines\"),\n    maxwidth = unit(4, \"lines\")\n  )\nannotated_plot\n\n\n\n\n\n\nFigure 7.8: Bubble plot of the relationship between the age of pet cats and the average amount of time they spend indoors. A textbox in the top right indicates the oldest cat called ‘Boots’.\n\n\n\n\nAlthough we’ve used HTML code within the geom_textbox() function, you can also use HTML code in the title, subtitle, or caption text - although much like with marquee in Chapter 6, you also need to edit the relevant theme() arguments to specify you are using ggtext.\n\n\n\n\n\n\nTip 7.2: Non-overlapping labels\n\n\n\nHere, we’re only positioning one annotation and so it’s reasonably easy to manually adjust the position to make sure it doesn’t exceed the plot area or cover up any data points. If you have many textual annotations, it will quickly become difficult to manually adjust them to avoid overlapping. The ggrepel package (Slowikowski 2024) may help. It’s specifically designed to creating non-overlapping text and label annotations in ggplot2, and repositions the text for you.\n\n\nTo add clarity about which aspect of the plot the annotation refers to, we can add an arrow that points from the textbox to the relevant data point. Since we’re only adding one arrow, we’ll use the annotate() function. When using annotate(), we need to specify what type of geom we want to use. Though we’re trying to add an arrow, this isn’t actually a geom. We need to add a line, and then decorate the end of the line with an arrow. If you want to add a straight line arrow, you can set geom = \"segment\", but curved arrows often look less severe so we use geom = \"curve\". \nWe use need to tell annotate() where to put the arrow. Don’t be fooled by thinking that these co-ordinate choices were perfect first time! It takes at least a little bit of trial and error to get the arrow positioned where we want it. We can use the x-axis in Figure 7.8 as a guide for choosing what the x and xend values should be. The choice of y and yend values might look a little odd - why are we placing an arrow at around 5, when the y-axis suggests we want to place the arrow around 22? Remember that hrs_indoors is actually a factor column, not a numeric column. \nThough you might expect ggplot2 to complain when we try to place in arrow using numeric values on a discrete scale, surprisingly, it doesn’t. Since factors are essentially just ordered categories, R assigns the first level in the factor to 1, the second level to 2, and so on. This means you can convert factors to numeric variables - though be warned that the results might not always be what you expect! For our chart, we want to position the end of the arrow just below the 22.5 value which is the fifth category, so the y and yend values are slightly below 5.\nWe add some further styling to the line by specifying the width, the color, and how curved the line is. To add the arrow on the end of the line, we use the arrow() function. This function allows us to define the length of the arrow - note this is the length of the arrowhead, rather than the entire arrow. We also specify that the type is \"closed\", meaning that the arrowhead is a filled triangle. The default is \"open\" which, at smaller arrow sizes, sometimes looks less clear. \n\narrow_plot &lt;- annotated_plot +\n  annotate(\n    geom = \"curve\",\n    x = 15.1,\n    xend = 16,\n    y = 4.6,\n    yend = 4.9,\n    linewidth = 0.3,\n    color = text_col,\n    curvature = 0.5,\n    arrow = arrow(\n      length = unit(1.5, \"mm\"), type = \"closed\"\n    )\n  )\narrow_plot\n\n\n\n\n\n\nFigure 7.9: Bubble plot of the relationship between the age of pet cats and the average amount of time they spend indoors. A textbox in the top right indicates the oldest cat called ‘Boots’, with an arrow pointing towards the data point for this cat.\n\n\n\n\n\n\n\n\n\n\nTip 7.3: Highlighting observations in data\n\n\n\nIn Chapter 3, we used gghighlight (Yutani 2023) to highlight individual lines in facet plots. You can also use gghighlight to highlight and label individual data points in a more automated way. This may be an easier approach if you want to highlight multiple points based on some conditions, at the expense of more custom, aesthetically pleasing annotations.\n\n\n\n7.4.4 Adding text\nLet’s start to add some other, more standard text, to the chart and define some variables to store the title and subtitle text. For the subtitle, we again take a data-driven approach by using glue() as we did in Chapter 2 to paste in pre-calculated values from the data to the text. \n\n# title text\ntitle &lt;- \"Do older cats spend more time indoors?\"\n# subtitle text\nperc_indoor &lt;- round(100 * sum(cats_reference$hrs_indoors == \"22.5\") / nrow(cats_reference))\nst &lt;- glue(\"Around {perc_indoor}% of cats in the study spend on average 22.5 hours per day indoors! There is a slight trend for cats to spend more time indoors as they age.\")\n\n\n7.4.5 Custom caption functions\nWhen we constructed the source_caption() function in Chapter 6, we simply passed in a character string to indicate the name of the creator of the chart (e.g. \"N. Rennie\"). What might be more useful is a way to contact or better identify the author of the chart. This could allow readers to dig into the data or code if they choose to, and allow chart creators to more easily link to other examples of their work. It’s very common in websites, for example, to link to social media profiles. We can actually do something very similar for a static chart (Rennie 2023a).\nInstead of simply passing in a character string with a name, we’ll create a caption that contains social media icons and the associated handles. Since this is something we are likely to add to multiple different plots (and perhaps with different social media details), we’ll create a function that produces this caption based on some user inputs.\nBut first, before we jump into writing functions, we need to get some social media icons! As we did in Chapter 6, we’ll again use Font Awesome icons (Font Awesome 2024), but this time we’ll use the Brand pack of icons instead of the Solid icons. The process of loading the icons here is essentially the same as loading the Font Awesome icons in Chapter 6. After you’ve downloaded zip file of freely available icons from fontawesome.com/download, selecting the Free for Desktop option, you should see a file called Font-Awesome-6-Brands-Regular-400.otf. Again, save this .otf file somewhere you can find it again - such as in a project folder called fonts. \nAs before, we’ll use font_add() from sysfonts (Qiu 2022) to load the font into R. The family argument is how we’ll refer to the font in R, and the regular argument is the file path to the .otf file. We then use showtext_auto() and showtext_opts() to use showtext to render the text and set the desired resolution. \n\nfont_add(\n  family = \"Font Awesome 6 Brands\",\n  regular = \"fonts/Font-Awesome-6-Brands-Regular-400.otf\",\n)\n\n\n\n\n\n\n\nTip 7.4: Font Awesome icons in R\n\n\n\nThe fontawesome package (Iannone 2024) makes it easier to use Font Awesome icons in R Markdown, Quarto, and Shiny outputs created with R. The package allows you to insert icons as SVG or PNG images, and provides functions for writing HTML code that inserts icons using &lt;i&gt;&lt;/i&gt; tags in Shiny applications.\n\n\nLet’s go back to adding social media icons and create a function, social_caption() that will write the caption for us. We start by thinking about what options should be user specified:\n\nA choice of which social media icons and handles are included. We want users to be able to update the handle that goes with a particular social media icon e.g. for switching between work and personal accounts.\nWe should also give a user the option to switch off a specific social media icon if they want to.\nThe colors of the icons and the fonts. We might choose to force these to be the same, or allow them to be different.\nThe typeface of the non-icon text i.e. the social media handles. We want a user to be able to pass in their choice of typeface to match with the text in the rest of their chart.\n\nTo construct this example social_caption() function, we’ll include icons for LinkedIn, GitHub, and BlueSky. You might choose to include others. We’ll have one argument in the function for each of these social media sites, with the default value specified as the handle that will be used most often. We also add two arguments to control the icon and font colors: icon_color and font_color. Both are set to \"black\" by default, which is consistent with other ggplot2 text.\nWithin the function, we start by putting together a data.frame that maps the values a user has input for the social media handles to the correct icon. We’re going to be using ggtext (C. O. Wilke and Wiernik 2022) to process the caption, meaning we can write HTML code to join together icons, text, and text formatting. We also need to know which Unicode characters map to each social media icons so that we can pass them into some HTML code.\nTake the GitHub icon as an example. You can search for the icon you want at fontawesome.com/icons, and you’ll see the Unicode icon in the top right of the screen (although a Google search or ChatGPT would likely work equally well!) The Unicode for the GitHub icon is f09b, and to use this in HTML code we can write it as &#xf09b (Rennie 2023a). We repeat this for the other icons we want to use.\nWe then use na.omit() to remove any rows of our data.frame that contain NA values. Since we’ve set default arguments for each social media handle, there won’t be any default values in our data.frame be default either. However, if a user wants to exclude a particular icon and handle from the caption, the can do so by setting that argument in the function to NA.\nRather than trying to immediately write a function that joins together many icons and handles, we’ll start by writing a function that joins one icon and one social media handle. The inner function, glue_icon(), creates a styled HTML snippet using the glue() to join together the icon Unicode and the text within the snippet. The HTML snippet contains two spans: one for the icon (styled with the \"Font Awesome 6 Brands\" font and our chosen icon_color) and another for the social media text (styled with our chosen font_family and font_color). We also add a space between the icon and the handle with &nbsp;, and a larger space at the end to separate multiple icons using &emsp;. These are special strings for adding spaces to HTML. Note that because we have quotation marks inside quotation marks inside quotation marks, we need to escape the inner ones using \\\". \nFinally, we use map2() from purrr (Wickham and Henry 2023) to apply glue_icon() to each row of our icon_df data. We then collapse the resulting list into a vector using as_vector() from purrr. We then further collapse the vector into a single character string with str_flatten() from stringr. This flattened string is our social media caption. \n\nsocial_caption &lt;- function(linkedin = \"nicola-rennie\",\n                           bluesky = \"nrennie\",\n                           github = \"nrennie\",\n                           icon_color = \"black\",\n                           font_color = \"black\",\n                           font_family = \"sans\") {\n  icon_df &lt;- data.frame(\n    icons = c(\"&#xf08c;\", \"&#xe671;\", \"&#xf09b;\"),\n    socials = c(linkedin, bluesky, github)\n  )\n  icon_df &lt;- na.omit(icon_df)\n  \n  # Inner function to join icon and text\n  glue_icon &lt;- function(icon, social) {\n    glue::glue(\n      \"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\"; color:{icon_color};'&gt;{icon} &lt;/span&gt;&nbsp; &lt;span style='font-family:{font_family}; color:{font_color};'&gt;{social} &lt;/span&gt;&emsp;\"\n    )\n  }\n  \n  # Map over all icons\n  caption &lt;- purrr::map2(\n    .x = icon_df$icons,\n    .y = icon_df$socials,\n    .f = ~glue_icon(.x, .y)\n  ) |&gt; \n    purrr::as_vector() |&gt; \n    stringr::str_flatten()\n\n  return(caption)\n}\n\nAs in Chapter 6, when we defined the source_caption() function, we use namespacing within the function definition to make it easier to reuse this function in later chapters. We can then use the social_caption() function, passing in the color and font variables we’ve previously defined to their relevant arguments:\n\nsocial &lt;- social_caption(\n  icon_color = highlight_col,\n  font_color = text_col,\n  font_family = body_font\n)\nsocial\n\n[1] \"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\"; color:#914D76;'&gt;&#xf08c; &lt;/span&gt;&nbsp; &lt;span style='font-family:Ubuntu; color:#2F4F4F;'&gt;nicola-rennie &lt;/span&gt;&emsp;&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\"; color:#914D76;'&gt;&#xe671; &lt;/span&gt;&nbsp; &lt;span style='font-family:Ubuntu; color:#2F4F4F;'&gt;nrennie &lt;/span&gt;&emsp;&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\"; color:#914D76;'&gt;&#xf09b; &lt;/span&gt;&nbsp; &lt;span style='font-family:Ubuntu; color:#2F4F4F;'&gt;nrennie &lt;/span&gt;&emsp;\"\n\n\nYou can see that the output of the social_caption() is a pretty incomprehensible string that would’ve been quite tricky to type out manually - aren’t we glad we built a function to do it for us! We can then use our source_caption() function from Chapter 6, and pass the output from the social_caption() function into the graphic argument. We also place them on separate lines by using &lt;br&gt;. \n\ncap &lt;- source_caption(\n  source = \"McDonald JL, Cole H. 2020. doi.org/10.5441/001/1.pf315732.\",\n  sep = \"&lt;br&gt;\",\n  graphic = social\n)\n\nThe text can then be added to Figure 7.9 using the labs() function as normal, by passing in the variables to the title, subtitle, and caption arguments. We also add more informative text for the title on the x and y axes, making sure to also specify the units. \nBy default, the legend title is simply the name of the column mapped to the aesthetic in the legend. Here, the column mapped to size is n and so that’s the name of the legend, which isn’t very informative. There are several different ways to edit the name of the legend. We could have specified the name argument when we used scale_size() earlier. An alternative, is to use the labs() function. The title for any aesthetic can be specified in labs(), not just x and y. We simply pass the desired legend title into size.\n\ntext_plot &lt;- arrow_plot +\n  labs(\n    title = title,\n    subtitle = st,\n    caption = cap,\n    x = \"Age of cat (years)\",\n    y = \"Average time spent indoors (hours per day)\",\n    size = \"Number of cats\"\n  )\ntext_plot\n\n\n\n\n\n\nFigure 7.10: Bubble plot of the relationship between the age of pet cats and the average amount of time they spend indoors. A title, subtitle, and caption has been added, although the caption appears with raw HTML code, rather than correctly formatted.\n\n\n\n\n\n7.4.6 Adjusting themes\nYou’ll notice that in Figure 7.10, the social media caption that we worked so hard to create isn’t properly formatted and it simply appears as the raw HTML code we wrote. The reason it doesn’t look quite as we’d hoped is because ggplot2 doesn’t natively understand how to parse the HTML code. That’s where ggtext comes in. ggtext is designed to improve text rendering in ggplot2, including providing support for using Markdown and HTML inside text elements. We haven’t actually used ggtext for our caption yet! Much like with marquee in Chapter 6, we need to edit the plot.caption argument of theme() to tell it to use ggtext to process the HTML code. We can use element_textbox_simple() to do this (as we’ve been doing to wrap the subtitle text anyway). It had similar arguments to element_text() in ggplot2 but we don’t actually need to specify any additional arguments here. You could also use element_textbox() which works very similarly but has slightly different default values or element_markdown(), if you’d prefer (Rennie 2023a). \nWe make some further edits using the theme() function after applying theme_minimal() as a base theme, as we’ve done in previous chapters to align the plot and caption text to the plot rather than the panel, change the color of the text, and edit the background color. We also make some adjustments to the legend. It’s currently taking up quite a lot of space on the right hand side, but there is plenty of available space within the plot area itself. We use legend.position = \"inside\" to move the legend inside the panel area and specify the coordinates of where we want to position it using legend.position.inside. For positioning the legend, c(0, 0) is the bottom left corner and c(1, 1) is the top right corner. To make sure that it’s easy to distinguish between the legend and the data points, we draw a dark outline around it. \n\ntext_plot +\n  theme_minimal(\n    base_family = body_font,\n    base_size = 6.5\n  ) +\n  theme(\n    # legend styling\n    legend.position = \"inside\",\n    legend.position.inside = c(0.9, 0.25),\n    legend.background = element_rect(\n      fill = alpha(bg_col, 0.6),\n      color = text_col\n    ),\n    # text\n    text = element_text(color = text_col),\n    plot.title = element_text(\n      family = title_font,\n      face = \"bold\",\n      size = rel(1.5)\n    ),\n    plot.subtitle = element_textbox_simple(),\n    plot.caption = element_textbox_simple(),\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    # background and grid\n    plot.margin = margin(5, 5, 5, 5),\n    panel.grid.minor = element_blank(),\n    plot.background = element_rect(\n      fill = bg_col,\n      color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col,\n      color = bg_col\n    )\n  )\n\n\n\n\n\n\nFigure 7.11: Bubble plot of the relationship between the age of pet cats and the average amount of time they spend indoors. The text is now all correctly formatted, and the legend appears inset with a clear border between it and the plot.\n\n\n\n\nWe can then finally save the chart in PNG format using ggsave(): \n\nggsave(\n  filename = \"cats.png\",\n  width = 5,\n  height = 0.75 * 5\n)",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cats: data-driven annotations with **`ggtext`**</span>"
    ]
  },
  {
    "objectID": "cats.html#reflection",
    "href": "cats.html#reflection",
    "title": "7  Cats: data-driven annotations with ggtext",
    "section": "\n7.5 Reflection",
    "text": "7.5 Reflection\nThis is a very clean looking chart and, though annotations have been added, it doesn’t look too busy or complex. We could (carefully) add further annotations to perhaps highlight the youngest cats or the cats who spent the least amount of time indoors.\nThe legend box and the annotation box currently look quite different. The legend box has square corners, compared to rounded corners, and the outline color is darker. For consistency, it would look better if both boxes appear with the same styling.\nIn this chart, we’ve considered only two variables, but there are many others available that we could have explored further. It would be particularly beneficial to join together the GPS data with the cat characteristics data. In Figure 7.11, we communicate only the (weak) relationship between cat age and how many hours cats spend indoors. Both are reported by the cat owners. But the number of hours a cat spends indoors doesn’t necessarily tell us very much about the cat’s activity levels. Are they sleeping all day when they’re at home? When they’re not indoors, are they running around or simply soaking up the sun? If we had joined the GPS data, we could have perhaps made a more informative plot showing the relationship between age and activity level.\nEach plot created during the process of developing the original version of this visualization was captured using camcorder, and is shown in the gif below. If you’d like to learn more about how camcorder can be used in the data visualization process, see Section 14.1.\nThe original version look at the relationship between age and ground speed (despite the issues with the reliability of the data).",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cats: data-driven annotations with **`ggtext`**</span>"
    ]
  },
  {
    "objectID": "cats.html#exercises",
    "href": "cats.html#exercises",
    "title": "7  Cats: data-driven annotations with ggtext",
    "section": "\n7.6 Exercises",
    "text": "7.6 Exercises\n\nJoin the cats and the cats_reference datasets using the tag_id column. See Chapter 11 for an example if you aren’t sure how to join two datasets together.\nInstead of plotting the time spent indoors on the y-axis, plot the cat’s average ground speed (ignoring that the values are very unusual!)\nAdd another annotation that highlights the cat with the highest average speed.\n\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cats: data-driven annotations with **`ggtext`**</span>"
    ]
  },
  {
    "objectID": "nobel-laureates.html",
    "href": "nobel-laureates.html",
    "title": "8  Nobel Prize laureates: positioning text and parameterizing plots",
    "section": "",
    "text": "8.1 Data\nIn this chapter, we’ll learn how to access data through an API, create custom text layouts, and build parameterized plot functions.\nPackages required in this chapter:\nIn this chapter, we’re going to explore Nobel Prize Laureates. Since 1901, the Nobel Prizes have been awarded to those who, during the preceding year, have conferred the greatest benefit to humankind. Awards are granted in the fields of Physics, Chemistry, Physiology or Medicine, Literature, Peace, and (since 1969) Economic Sciences.\nIn May 2019, the TidyTuesday challenge used several datasets about Nobel Prize Laureates and their publications. Those datasets contain data up to the year 2016. Since that data is now a little bit outdated, we’re going to look at an alternative way of obtaining the data and getting it into R - using an API!\nAn API (Application Programming Interface) is essentially a tool that lets different software programs communicate with each other (Harmon 2024). The Nobel Prize API endpoint (www.nobelprize.org 2024) can be accessed at api.nobelprize.org/2.1/laureates, with some instructions and guidance about how to use it available on the nobelprize.org website at www.nobelprize.org/organization/developer-zone-2, which also links to the Terms of Use.\nThis API doesn’t require an API key, so we don’t need to worry about registering, or authenticating an account. Instead, we simply pass the options into a URL and then read the CSV from that URL.\nLet’s look at the data for just one of the fields to start with: Physics. There are lots of different options available for accessing the API, but we only need to specify a few of them:\nWe construct a URL in the following format: the base API URL, followed by the endpoint, followed by a ?, then a list of query parameters separated by &. Here, the base URL is http://api.nobelprize.org/2.1/ and the endpoint is laureates. You can either (1) build the URL as one long character string, or (2) construct the strings separately and stick them together with glue() as we’ve done here. If you are making multiple, slightly different, API calls then the second approach is more appropriate since you can re-use the base URL.\nOnce we’ve constructed the URL, we simply pass it into read_csv() from readr (or read.csv() from base R if you prefer) and save the output to a variable - nobel_physics in this case.\napi_url &lt;- \"http://api.nobelprize.org/2.1/laureates\"\nnobel_physics &lt;- read_csv(\n  glue(\n    \"{api_url}?limit=250&nobelPrizeCategory=phy&format=csv\"\n  )\n)\nThe data can also be accessed using the nobel R package (Rennie 2024b) which wraps the code above into the laureates() function.\nWe want to avoid querying the API multiple times if we don’t need to. Once we’ve downloaded the data, we can save it as a CSV file to allow us to use the data at a later point in time without re-querying the same query. We can use the write.csv() option to save the data to a file called nobel_physics.csv in an existing folder called data - you might choose to save it somewhere slightly different!\nwrite.csv(\n  nobel_physics,\n  \"data/nobel_physics.csv\",\n  row.names = FALSE\n)\nWe can keep using the existing nobel_physics object, or we can read it back in from the CSV file using read_csv().\nnobel_physics &lt;- read_csv(\"data/nobel_physics.csv\")\nLet’s have a quick look at the data.\nhead(nobel_physics)\n\n# A tibble: 6 × 13\n     id name         gender birthdate  birthplace deathdate \n  &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;  &lt;date&gt;     &lt;chr&gt;      &lt;date&gt;    \n1   102 Aage N. Bohr male   1922-06-19 Copenhage… 2009-09-08\n2   114 Abdus Salam  male   1926-01-29 Jhang Mag… 1996-11-21\n3   866 Adam G. Rie… male   1969-12-16 Washingto… NA        \n4  1012 Alain Aspect male   1947-06-15 Agen Fran… NA        \n5    11 Albert A. M… male   1852-12-19 Strelno P… 1931-05-09\n6    26 Albert Eins… male   1879-03-14 Ulm Germa… 1955-04-18\n# ℹ 7 more variables: deathplace &lt;chr&gt;, category &lt;chr&gt;,\n#   year &lt;dbl&gt;, share &lt;chr&gt;, overallmotivation &lt;chr&gt;,\n#   motivation &lt;chr&gt;, affiliations &lt;chr&gt;\nThe data contains information for 13 variables for 226 laureates. The id column uniquely identifies a Nobel laureate. The name, gender, birthdate, birthplace, deathdate, and deathplace are fairly self-explanatory variables relating to the individual laureate. The category variable gives us the field of the award e.g. Physics. The year they were awarded the prize is given in the year column. Nobel Prizes can be shared among multiple people, and the share column indicates what fraction of the award each individual has. For example, a value of \"1\" for share indicates the individual was the sole recipient, and a value of \"1/3\" indicates they were one of three recipients.\nThe overallmotivation and motivation columns give an explanation of the reason why an individual was awarded the prize, There are many missing values in the overallmotivation column and, for those that do have a non-missing value, this appears to be a more general statement than the one given in motivation. The Nobel Laureates affiliations are also listed in the affiliations column.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Nobel Prize laureates: positioning text and parameterizing plots</span>"
    ]
  },
  {
    "objectID": "nobel-laureates.html#data",
    "href": "nobel-laureates.html#data",
    "title": "8  Nobel Prize laureates: positioning text and parameterizing plots",
    "section": "",
    "text": "limit: how many results are returned. The default is 25 but there are more than 25 Nobel Laureates in physics so we need to use a higher value.\n\nnobelPrizeCategory: the field. The value is a three letter (lowercase) abbreviation for the field. For physics, the value is phy.\n\nformat: the output format. The options are JSON or CSV, and we’ll use CSV since these files are easier to work with in R.\n\n\n\n\n\n\n\nTip 8.1: Choosing an API Limit\n\n\n\nIt’s important to be polite and not make too many API requests at once, so don’t choose 1,000 if you need 20 results.\nIf you have a limit of 250 requests and the data returned contains 250 results, you may want to check if you actually have all of the results!",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Nobel Prize laureates: positioning text and parameterizing plots</span>"
    ]
  },
  {
    "objectID": "nobel-laureates.html#exploratory-work",
    "href": "nobel-laureates.html#exploratory-work",
    "title": "8  Nobel Prize laureates: positioning text and parameterizing plots",
    "section": "\n8.2 Exploratory work",
    "text": "8.2 Exploratory work\nThere are many different aspects of the data that we could explore: the demographics of the Nobel Laureates; how the geographical profile of awardees varies; or how the age of awardees has changed over time. Let’s have a look at the data to see if these are interesting questions to explore further.\n\n8.2.1 Data exploration\nLet’s start by exploring the relationship between year of birth and year of award. We would expect that the people born earlier in time, are also the people awarded Nobel Prizes earlier in time, and a scatter plot confirms this:\n\nplot(\n  x = nobel_physics$birthdate,\n  y = nobel_physics$year,\n  xlab = \"Birth date\",\n  ylab = \"Year of award\"\n)\n\n\n\n\n\n\nFigure 8.1: A scatter plot of awardee birth date against year of award, showing the expected increasing trend.\n\n\n\n\nWe might be interested in seeing whether this relationship is changing over time. Essentially, is the age of awardees changing over time? We can use the year() function from lubridate to convert the birthdate into a year and subtract this from the award year to get an approximate age. Then plot this against the award year: \n\naward_age &lt;- nobel_physics$year -\n  year(nobel_physics$birthdate)\nplot(\n  x = nobel_physics$year,\n  y = award_age,\n  xlab = \"Year of award\",\n  ylab = \"Age of Nobel Laureate\"\n)\n\n\n\n\n\n\nFigure 8.2: A scatter plot showing the age of Nobel Prize awardees over time, with a slight increasing trend suggested.\n\n\n\n\nIt looks like the age of awardees might be increasing slightly - this could be interesting to explore further. But let’s also look at the gender split for Nobel Laureates in Physics. We can calculate the number of \"male\" and \"female\" values in the gender column using the table() function, then plot it using barplot(): \n\nbarplot(table(nobel_physics$gender))\n\n\n\n\n\n\nFigure 8.3: A bar chart of the number of male and female Nobel Laureates in Physics, with a much higher number of male awardees.\n\n\n\n\nThis is quite a significant difference! Let’s find a way to communicate and highlight this disparity.\n\n8.2.2 Exploratory sketches\nWhen thinking about how to construct a visualization, it’s important to consider multiple factors (Rennie and Krause 2024):\n\nWhat message are you trying to convey?\nWho are you trying to reach and what is their background?\nWhat is the purpose of the visualization?\nDoes the way you’ve built that visualization support the purpose?\n\nLet’s say that the purpose of the visualization is to highlight the gender disparity in Nobel Prize awardees. Yes, the bar chart of how many male and female Nobel Laureates there are shows the disparity very clearly. It’s a simple message. But it’s not eye-catching. It’s not a visualization that really makes a reader stop and pay attention. And it aggregates data down to just two categories - ignoring that these are individual people.\nInstead, let’s think outside of the box are present the information in a very non-standard way:\n\n\n\n\n\nFigure 8.4: Initial sketch of text arranged perpendicularly around a circle, with text color based on gender.\n\n\nA bar chart would be a quicker, more efficient way of displaying how many male and female Nobel Laureates there are. A visualization of the names of every single Nobel Laureate might be a quicker, more efficient way of catching someone’s attention. This alternative visualization doesn’t sacrifice accuracy of information, but it might take a reader a little bit longer to digest the information. Whether that’s a sacrifice worth making comes back to what the purpose of the visualization is.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Nobel Prize laureates: positioning text and parameterizing plots</span>"
    ]
  },
  {
    "objectID": "nobel-laureates.html#preparing-a-plot",
    "href": "nobel-laureates.html#preparing-a-plot",
    "title": "8  Nobel Prize laureates: positioning text and parameterizing plots",
    "section": "\n8.3 Preparing a plot",
    "text": "8.3 Preparing a plot\nSo let’s start making our custom visualization! We start by defining a variable for the award category we’re interested in - Physics. This first step might seem a little odd since we’ve only queried the API for physics data anyway, but when you get to the last section of this chapter, it’ll make more sense!\n\nnobel_category &lt;- \"Physics\"\n\nIt’s always worth double checking that we do actually only have the data we expect… \n\nbarplot(table(nobel_physics$category))\n\n\n\n\n\n\nFigure 8.5: A bar chart of the number of Physics laureates (with a surprise appearance of a Chemistry laureate).\n\n\n\n\n…because sometimes you find something unexpected!\nEven though we’ve asked for only physics data from the API, the data also includes an entry relating to the Chemistry prize. If we read the documentation for the API, this gives us the explanation as to why. The API we’ve used relates to Nobel Laureates, not Nobel Prizes - meaning the list includes all laureates who have won a prize in Physics. Marie Curie won two Nobel Prizes - in 1903 for Physics, and in 1911 for Chemistry.\n\n8.3.1 Data wrangling\nWe’ll start by using filter() from dplyr to filter out any non-Physics entries, and then selecting only the columns we need for our plot: name, gender, and year. The data is currently arranged alphabetically based on name, so we’ll use the arrange() function to sort by year. \n\nphysics_data &lt;- nobel_physics |&gt;\n  filter(category == nobel_category) |&gt;\n  select(name, gender, year) |&gt;\n  arrange(year)\n\nNow comes the tricky part of figuring out how to position the text in a circle. The first idea might be to simply plot the text in a line and then use the coord_polar() (or coord_radial()) function in ggplot2 to transform the coordinate space. However, coord_polar() makes it really hard to position other elements such as annotations on the plot. Alternatively, we could make use of the ggplot2 extension package, geomtextpath (Cameron and van den Brand 2024), which allows you to write text in ggplot2 that follows a curved path. \n\n\n\n\n\n\nTip 8.2: Why add annotations in R?\n\n\n\nYou may be wondering why we want to put so much work into building a custom layout from scratch, when you could easily just create a basic chart, apply coord_polar(), and then export it to other software (e.g. Inkscape or PowerPoint) to add the text annotations. This is certaintly a valid point. If you were only making a single chart on one occassion, then adding the finishing touches outside of R would be both quicker and easier. However, if you’re making the same chart multiple times, or creating slightly different versions of a similar chart, the manual work can quickly accumulate. The benefit of creating annotations in R is that it’s easier to scale up your work, and automate the annotation creation.\n\n\nBut (just for the fun of it) let’s try to make the plot from scratch using only ggplot2.\nWe need to define the following to be able to position the text:\n\nthe x- and y- coordinates of where the text should end\nthe angle that the text should be positioned at\n\nTo calculate the x- and y- coordinates, we want to start thinking in polar coordinates. To keep it simple, let’s assume that the circle which the text is positioned around is centered at (0, 0). For the coordinates, this means we need to know:\n\nthe radius (r) of the circle: how far away from (0, 0) does the text start? This will be a constant value for all text labels.\nthe angle (theta) of arc: how far round the circle from the horizontal axis should the text appear? This value will vary for each text label since we want the labels to be equally spaces around the (semi-)circle.\n\nLet’s start by defining a variable for the radius. It doesn’t really matter what value you choose at this point since everything else can be re-scaled around a different radius.\n\nr &lt;- 5\n\n\n\n\n\n\nFigure 8.6: Sketch showing the relationship between the radius, angle, and position of the text in x- and y-coordinates.\n\n\nAssuming that we know the radius and angle of a point, we can calculate the x- and y- coordinates of a point using the following equations:\n\\[\\begin{equation*}\n\\begin{split}\nx & = r cos(\\theta) \\\\\ny & = r sin(\\theta)\n\\end{split}\n\\end{equation*}\\]\nWe don’t want to put the text all the way around the circle, since we want to leave some space to add the title as shown in Figure 8.4. We’ll leave a gap starting from \\(\\pi/4\\) (between 1 and 2 on a clock face) to \\(7\\pi/4\\) (between 4 and 5 on a clock face). We start by generating a sequence of equally spaced \\(\\theta\\) values, starting from \\(\\pi/4\\) and going to \\(7\\pi/4\\), with one value for each observation in the data. This is added as a new column in the data using mutate() from dplyr. We then calculate the x and y coordinates using the equations above and, again, add these as new columns to the data. \nThe angle of the text is a little bit more tricky. We want the text to be positioned perpendicular to the circle i.e. the angle of the text is different for each name. We can use the value of theta to calculate the angle of the text.\nWhen we later pass the angle value into ggplot2 functions for plotting, it’s expected that the angle be expressed in degrees (rather than radians). For example, for vertical text, we would pass in angle = 90 rather than angle = pi/2. So we need to transform theta to degrees by dividing by \\(2\\pi\\) and multiplying by 360. To make the text the right way up (at least on the left side of the circle) we add 180 degrees. \n\nplot_data &lt;- physics_data |&gt;\n  mutate(\n    theta = seq(\n      from = pi / 4,\n      to = (7 / 4) * pi,\n      length.out = nrow(physics_data)\n    ),\n    x = r * cos(theta),\n    y = r * sin(theta),\n    angle = 180 + 360 * (theta / (2 * pi))\n  )\n\nLet’s have a quick look at the data:\n\nhead(plot_data)\n\n# A tibble: 6 × 7\n  name                  gender  year theta     x     y angle\n  &lt;chr&gt;                 &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Wilhelm Conrad Röntg… male    1901 0.785  3.54  3.54  225 \n2 Hendrik A. Lorentz    male    1902 0.806  3.46  3.61  226.\n3 Pieter Zeeman         male    1902 0.827  3.38  3.68  227.\n4 Henri Becquerel       male    1903 0.849  3.31  3.75  229.\n5 Marie Curie           female  1903 0.870  3.23  3.82  230.\n6 Pierre Curie          male    1903 0.891  3.14  3.89  231.\n\n\nNow we’re ready to start plotting with ggplot2!\n\n8.3.2 The first plot\nConstructing the base plot is reasonably straightforward - we’ve done the hard work in defining the x values, y values, the angles already. Since our plot is a visualization of text data, we’ll use geom_text() to add the text. All we have to do is tell ggplot2 what to put where! \nWe pass plot_data into the data argument, and then set the aesthetic mapping using aes(). The mappings are as you would expect: x goes on the x-axis, y goes on the y-axis, the label comes from the name column, the text angle is defined by the angle column we created, and the color is based on the values in the gender column. This mapping could be passed into either ggplot() or directly into geom_text() as we’ve done here. Since we’ll only be using one geometry for this plot, it won’t make a difference! \n\nggplot() +\n  geom_text(\n    data = plot_data,\n    mapping = aes(\n      x = x, y = y,\n      label = name,\n      angle = angle,\n      color = gender\n    )\n  )\n\n\n\n\n\n\nFigure 8.7: The names of Nobel Prize in Physics awardees arranged in a semi-circle, with color indicating awardee gender. The text is too large, creating many overlapping labels.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Nobel Prize laureates: positioning text and parameterizing plots</span>"
    ]
  },
  {
    "objectID": "nobel-laureates.html#advanced-styling",
    "href": "nobel-laureates.html#advanced-styling",
    "title": "8  Nobel Prize laureates: positioning text and parameterizing plots",
    "section": "\n8.4 Advanced styling",
    "text": "8.4 Advanced styling\nAt first glance, this first plot might look like a complete mess but with a little bit of work it will soon start looking like Figure 8.4.\n\n8.4.1 Fonts\nLet’s start by choosing some typefaces for our visualization. We’re going to pick two typefaces:\n\n\ntitle_font: a bold typeface that will, as the name suggests, be used for the title. We’ll use Passion One - a display typeface with thick, bold strokes which make it ideal for titles.\na body_font: a simple typeface that will be used for all other text elements, including the text displaying the laureate names. This means the text will be quite a small font size, and so it’s important to use a clean and simple typeface. We’ll use Ubuntu - a sans serif typeface that we’ve used in previous chapters.\n\nBoth typefaces are provided through Google Fonts so we’ll use font_add_google() from sysfonts to load them into R. We also run showtext_auto() and showtext_opts(dpi = 300) to use showtext for rendering text on plots at our desired resolution. \n\nfont_add_google(name = \"Passion One\")\nfont_add_google(name = \"Ubuntu\")\nshowtext_auto()\nshowtext_opts(dpi = 300)\nbody_font &lt;- \"Ubuntu\"\ntitle_font &lt;- \"Passion One\"\n\nNow, let’s remake our basic_plot - this time also setting the font family to body_font. We’ll also right align the text using hjust = 1 to make the text appear around the outer edge of the circle. The text also needs to be a bit smaller to avoid overlapping between names positioned next to each other. \n\nbasic_plot &lt;- ggplot() +\n  geom_text(\n    data = plot_data,\n    mapping = aes(\n      x = x, y = y,\n      label = name,\n      angle = angle,\n      color = gender\n    ),\n    family = body_font,\n    hjust = 1,\n    size = 1\n  )\nbasic_plot\n\n\n\n\n\n\nFigure 8.8: The names of Nobel Prize in Physics awardees arranged in a semicircle, with color indicating awardee gender. Much of the text lies outside of the plot area.\n\n\n\n\n\n8.4.2 Colors\nAs we’ve done in all previous chapters, we’ll define some variables for the colors we’ll be using in the visualization. Here, we’ll define a background color, a primary color, and a secondary color.\nThe primary color will be used to highlight the female laureates, as well as the title and caption text. The secondary color will be used to color the male laureate names. The primary color should be bolder or brighter than the secondary color - meaning a few pops of color on the chart will stand out and highlight the female laureates. \n\nbg_col &lt;- \"gray95\"\nprimary_col &lt;- \"black\"\nsecondary_col &lt;- \"gray75\"\n\nWe can apply these colors to the text showing the names using scale_color_manual() where we manually specify which color maps to which value in the gender column: \n\ncol_plot &lt;- basic_plot +\n  scale_color_manual(\n    values = c(\n      \"male\" = secondary_col,\n      \"female\" = primary_col\n    )\n  )\n\n\n8.4.3 Adding text\nRather than adding a title and subtitle at the top of the plot, we’ll add them in the gap in the right hand side of the circle. We’ll use the annotate() function from ggplot2 to add the text. Remember that for annotate(), we need to start by specifying the type of geometry we’re annotating - in this case, \"text\". \nWe’ll add two separate annotations: one for the title (Nobel Prize Laureates) and for a subtitle indicating the award category (Physics). The title and subtitle should be right-aligned, so we set the x-coordinate for each annotation to be equal to 10 and set hjust = 1. The title is vertically aligned with the center of the circle (at y = 0), and the subtitle slightly below it at y = -1. The font family is adjusted to either the body_font or title_font using the family argument, and the text size and color is also adjusted.\n\nannotated_plot &lt;- col_plot +\n  annotate(\"text\",\n    x = 10, y = 0,\n    label = \"Nobel Prize Laureates\",\n    hjust = 1,\n    color = primary_col,\n    family = title_font,\n    size = 7\n  ) +\n  annotate(\"text\",\n    x = 10, y = -1,\n    label = nobel_category,\n    hjust = 1,\n    color = primary_col,\n    family = body_font,\n    size = 5\n  )\nannotated_plot\n\n\n\n\n\n\nFigure 8.9: The names of Nobel Prize in Physics awardees arranged in a C-shape, with female awardees highlighted in a darker color. The text runs outside the plotting area, with annotations added to indicate the award category.\n\n\n\n\nWe can add a caption to the plot which contains: (i) a description of the data source, and (ii) the social media links from the social_caption() function we defined in Chapter 7. We make both the icons and text the same color - primary_col. We can pass this into the source_caption() function defined in Chapter 6. \n\nsocial &lt;- social_caption(\n  icon_color = primary_col,\n  font_color = primary_col,\n  font_family = body_font\n)\ncap &lt;- source_caption(\n  source = \"The Nobel Foundation\",\n  sep = \"&lt;br&gt;\",\n  graphic = social\n)\n\nWe then add this caption to our existing plot using the caption argument in the labs() function: \n\ntext_plot &lt;- annotated_plot +\n  labs(caption = cap)\n\n\n8.4.4 Adjusting scales and themes\nAt the moment, the text isn’t arranged in a circle as such - it’s taking on more of an oval shape. To make sure it is displayed in a circle, we can use coord_fixed() to make sure that one unit on the x-axis is equal to one unit on the y-axis.\nThe limits of the plot also need to be extended. The scales are currently based on the x- and y- coordinates we passed in (the text at the inner edge of the circle) which means the text runs of the page. We can do this by extending the limits using scale_x_continuous() and scale_y_continuous(). We can extend the right hand side of the x-axis a little bit further to accommodate the added annotations. \n\nstyled_plot &lt;- text_plot +\n  scale_x_continuous(limits = c(-9, 12)) +\n  scale_y_continuous(limits = c(-7.5, 7.5)) +\n  coord_fixed()\nstyled_plot\n\n\n\n\n\n\nFigure 8.10: The names of Nobel Prize in Physics awardees arranged around a circle, with female awardees highlighted in a darker color. The default grid lines remain in the background.\n\n\n\n\nSince this is an artistic visualization, we want to remove the distracting grid lines and axis labels (which don’t make much sense for this type of plot). As we’ve done in earlier chapters (such as Chapter 12), we use theme_void() to remove these background theme elements. \nWe can some further, final customization by changing the following theme() elements: \n\nremoving the legend\nchanging the background color by passing in the bg_col variable to element_rect()\n\nusing element_textbox_simple() from ggtext to format the HTML tags that add the social media icons in the caption\n\n\nstyled_plot +\n  theme_void(base_size = 6, base_family = body_font) +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    plot.caption = element_textbox_simple(\n      color = primary_col,\n      hjust = 0,\n      halign = 0,\n      lineheight = 0.5,\n      margin = margin(l = 5, b = 5)\n    )\n  )\n\n\n\n\n\n\nFigure 8.11: The names of Nobel Prize in Physics awardees arranged in an anti-clockwise direction, with female awardees highlighted in a darker color.\n\n\n\n\nAnd we now have a creative way of visualizing the recipients of the Nobel Prize for Physics! How might we go about visualizing the recipients of the other prize categories in a similar way?\n\n8.4.5 Parameterized plots\nAlthough we could copy and paste the code we already have, and change out physics for peace everywhere, for example, this isn’t a sustainable approach if we’re not just looking to create one additional plot. What if we also want to create plots for medicine, economics, chemistry, and literature? That’s a lot of copy and pasting! Instead, we might want to think about creating our own function. \nThis can be really useful if, for example, you want to create a plot of sales performance for a given month. Let’s say last month you wanted to create a histogram of the sales for only last month. This month, you want to create the same histogram but with the data for only this month, Nothing other than the underlying data (and perhaps the title of the plot) should change. You could create a function that takes the month as an argument, filters the data, and then plots it with the updated title. You don’t have to rewrite the plotting code every month, you just need to call your custom plot function.\nThroughout this book, we’ve been using variables to store our choice of colors, and typefaces. This makes it easier to quickly try out a new color scheme. But it also makes it easier to convert your code into a function: those variables just become function arguments! \nWhen we’re converting our code into a function, we need to think about what a user has to tell us, in order for the code to work. In the sales histogram example above, a user would need to specify which month they want the plot for. In our example of the Nobel Prize visualizations, a user need to specify:\n\nwhich category they want to plot (we can’t read their mind or know what data they have)\nwhat the data is called (we don’t know what they’ve called their data.frame)\nthe radius of the circle (we might need to vary this depending on how many observations are in a given category)\n\n\n\n\n\n\n\nTip 8.3: Checking columns exist\n\n\n\nThe data wrangling code assumes that year, name, gender, and category are columns that exist in the input data.frame. Since we’re working with data from an API that outputs it in a consistent format, this is a reasonable assumption to make. However, the API might change it some point. Or someone may want to use it with data sourced from somewhere else. To make the function more robust, we could add an initial step to check if those columns exist!\n\n\nNow, we can also think about adding arguments that a user could specify:\n\nbackground color\nprimary color\nsecondary color\nbody font\ntitle font\n\nFor these arguments, we can specify a default. This means that the function will work if a user doesn’t want to choose their own colors, but they are free to customize them if they choose to. None of these parameter choices make a fundamental difference to the plot created (other than how aesthetically pleasing it is).\n\n\n\n\n\n\nTip 8.4: Using fonts in functions\n\n\n\nHere, we’ve specified that the default title typeface is \"Passion One\". A similar approach is used for the body typeface. Usually, such an approach is not recommended since there’s no guarantee that a user will have the \"Passion One\" typeface installed or loaded when running the function. This makes it a bad choice of default typeface.\nWe could add the font_add_google() code inside the function, but this also isn’t a good solution. We don’t want to re-install the fonts every time we run the function. A better option is to specify one of the integrated typefaces as a default e.g. title_font = \"sans\".\n(Or at the very least, add instructions for how to load the typefaces you’ve used as a default!)\n\n\nNow we can stitch together all the code we’ve used in this chapter, into the function body:\n\ncategory_plot &lt;- function(\n    nobel_category,\n    nobel_data,\n    r = 5,\n    bg_col = \"gray95\",\n    primary_col = \"black\",\n    secondary_col = \"gray70\",\n    body_font = \"Ubuntu\",\n    title_font = \"Passion One\") {\n  # Data wrangling\n  category_data &lt;- nobel_data |&gt;\n    filter(category == nobel_category) |&gt;\n    select(name, gender, year) |&gt;\n    arrange(year)\n  plot_data &lt;- category_data |&gt;\n    mutate(\n      theta = seq(\n        from = pi / 4,\n        to = (7 / 4) * pi,\n        length.out = nrow(category_data)\n      ),\n      x = r * cos(theta),\n      y = r * sin(theta),\n      angle = 180 + 360 * (theta / (2 * pi))\n    )\n  # Text\n  social &lt;- social_caption(\n    icon_color = primary_col,\n    font_color = primary_col,\n    font_family = body_font\n  )\n  cap &lt;- source_caption(\n    source = \"The Nobel Foundation\",\n    sep = \"&lt;br&gt;\",\n    graphic = social\n  )\n  # Plot\n  g &lt;- ggplot() +\n    geom_text(\n      data = plot_data,\n      mapping = aes(\n        x = x, y = y,\n        label = name,\n        angle = angle,\n        color = gender\n      ),\n      family = body_font,\n      hjust = 1,\n      size = 1\n    ) +\n    scale_color_manual(\n      values = c(\n        \"male\" = secondary_col,\n        \"female\" = primary_col\n      )\n    ) +\n    annotate(\"text\",\n      x = 10, y = 0,\n      label = \"Nobel Prize Laureates\",\n      hjust = 1,\n      color = primary_col,\n      family = title_font,\n      size = 7\n    ) +\n    annotate(\"text\",\n      x = 10, y = -1,\n      label = nobel_category,\n      hjust = 1,\n      color = primary_col,\n      family = body_font,\n      size = 5\n    ) +\n    labs(caption = cap) +\n    scale_x_continuous(limits = c(-9, 12)) +\n    scale_y_continuous(limits = c(-7.5, 7.5)) +\n    coord_fixed() +\n    theme_void(base_size = 6, base_family = body_font) +\n    theme(\n      legend.position = \"none\",\n      plot.background = element_rect(\n        fill = bg_col, color = bg_col\n      ),\n      panel.background = element_rect(\n        fill = bg_col, color = bg_col\n      ),\n      plot.caption = element_textbox_simple(\n        color = primary_col,\n        hjust = 0,\n        halign = 0,\n        lineheight = 0.5,\n        margin = margin(l = 5, b = 5)\n      )\n    )\n  return(g)\n}\n\nNow let’s test if our function works with a completely different set of data! Let’s use the Nobel Prize API again to download data on Nobel Peace Prize laureates. We edit the end of the API URL to use nobelPrizeCategory=pea (pea for peace) and then save the output to a CSV file, just as we did before for the physics data, this time using base R functions. \n\nnobel_peace &lt;- read.csv(\n  glue(\n    \"{api_url}?limit=250&nobelPrizeCategory=pea&format=csv\"\n  )\n)\nwrite.csv(\n  nobel_peace,\n  \"data/nobel_peace.csv\",\n  row.names = FALSE\n)\n\nAgain, we can either keep working with the loaded data from the API, or read in the data from the CSV file: \n\nnobel_peace &lt;- read_csv(\"data/nobel_peace.csv\")\n\nThen we pass the \"Peace\" category into our category_plot() function, alongside out newly downloaded nobel_peace data. The nobel_peace data doesn’t have quite as many observations as the nobel_physics data, so we can reduce the radius (r) slightly and start the text a little bit closer to the middle of the circle. We can also choose some different colors for the visualization (but leave the defaults for the fonts):\n\npeace_plot &lt;- category_plot(\n  \"Peace\",\n  nobel_peace,\n  r = 4,\n  bg_col = \"#FFEDE1\",\n  primary_col = \"#8B1E3F\",\n  secondary_col = \"#7286A0\"\n)\npeace_plot\n\n\n\n\n\n\nFigure 8.12: The names of Nobel Peace Prize awardees arranged in an anti-clockwise direction, with female awardees highlighted in pink.\n\n\n\n\nWhat you might notice about this version of the chart is that a third color has appeared! In scale_color_manual(), we only specified which colors relate to \"male\" and \"female\" laureates. However, the Nobel Peace Prize can also be awarded to an organization, not just an individual. The (newly appeared) gray text relates to organisations listed in the nobel_peace data.\n\n\n\n\n\n\nTip 8.5: Building your own ggplot2 extension\n\n\n\nOnce you’ve built a custom chart type with core ggplot2 functions, you might be considering turning it into a ggplot2 extension package to make it easier for you and other people to use. The Everyday ggplot2 extension website (Reynolds 2025) provides advice and tutorials for building your first (or next) extension.\n\n\nWe can save a copy of the visualization using ggsave(): \n\nggsave(\n  filename = \"peace-plot.png\",\n  plot = peace_plot,\n  width = 5,\n  height = 4\n)\n\n\n\n\n\n\n\nTip 8.6: Circular text with ggtextcircle\n\n\n\nThe ggtextcircle package (Rennie 2024a) implements this type of visualization in a generic way - if you want to create something similar with a different data set!",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Nobel Prize laureates: positioning text and parameterizing plots</span>"
    ]
  },
  {
    "objectID": "nobel-laureates.html#reflection",
    "href": "nobel-laureates.html#reflection",
    "title": "8  Nobel Prize laureates: positioning text and parameterizing plots",
    "section": "\n8.5 Reflection",
    "text": "8.5 Reflection\nWhen we’re evaluating our visualizations, it’s important to remember the purpose for which we built it and evaluate how well it achieves that purposes. This visualization of the gender split of Nobel Laureates is not a standard plot that aims to communicate numbers as efficiently as possible.\nThere are a few standard aspects of this visualization we may wish to improve:\n\nIt’s quite a hard visualization to understand without knowing what the colors and the order of the names represents. With a little bit of time and thought, a reader will likely pick out that the pink (for the Peace category plot) text represents female laureates. However, the ordering of the names in an anti-clockwise direction showing that the number of females laureates is generally increasing over time is much more difficult to pick up on. Add some text below the existing title and category label to explain how to interpret the visualization will help interested readers get the full message.\nIt’s a minimal visualization by design. But that means it doesn’t tell a reader the whole story. As we discussed earlier, Nobel Prizes can be awarded to multiple individuals. However, this visualization only shows laureates, and not whether they shared the prize with anyone else. Are female laureates more or less likely to share a prize than their male counterparts? You can’t tell from this visualization.\nFrom a technical (or artistic) perspective, we might also want to consider alternative designs. For example, placing the text to the left of, or below, the circle rather than to the right. We may want to include the start and finish positions of the text around the circle as arguments to the parameterized function.\n\nDespite the shortcomings when compared to more traditional visualizations, this approach is eye-catching and it does attract attention. Sometimes it’s not about the data visualization. Sometimes it’s about the art.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Nobel Prize laureates: positioning text and parameterizing plots</span>"
    ]
  },
  {
    "objectID": "nobel-laureates.html#exercises",
    "href": "nobel-laureates.html#exercises",
    "title": "8  Nobel Prize laureates: positioning text and parameterizing plots",
    "section": "\n8.6 Exercises",
    "text": "8.6 Exercises\n\nEdit the category_plot() to add another argument for the \"Organisation\" category. Make sure the function still works when there are no organisations in the data e.g. for the Physics data.\nDownload data for another category e.g. Chemistry and use the category_plot() function again to create a version of the plot for that category.\n\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Making use of icons, fonts, and text",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Nobel Prize laureates: positioning text and parameterizing plots</span>"
    ]
  },
  {
    "objectID": "images.html",
    "href": "images.html",
    "title": "Working with images",
    "section": "",
    "text": "Using images in charts can make them more eye-catching and engaging. They can also provide context to the data, especially if images (such as logos) may be more easily recognizable than plain text. Images often need some level of processing before being chart-ready, and this section aims to illustrate that you don’t necessarily need image processing software, and that you can do many simple image operations directly in R.\n\nChapter 9  Lemurs: manipulating images in R describes two packages for working with images in R: magick and imager. You will learn how to read images into R and how to manipulate images by cropping them or making specific pixels transparent. You’ll also see how these two different image packages can be used together.\nChapter 10  R packages: using images for custom facet labels illustrates how to work with multiple images, and how to read in and plot them in a data-driven way.\n\nThis section also includes further discussion about dealing with missing data, as well as how to choose effective and accessible color palettes. It also illustrates an alternative package for working with fonts in R.\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Working with images"
    ]
  },
  {
    "objectID": "lemurs.html",
    "href": "lemurs.html",
    "title": "9  Lemurs: manipulating images in R",
    "section": "",
    "text": "9.1 Data\nIn this chapter, we’ll cover how to load and manipulate images in R using the magick and imager packages. We’ll also look at how to combine images with plots using the cowplot package.\nPackages required in this chapter:\nWe’re going to be exploring data about lemurs from Duke Lemur Center in this chapter (Zehr et al. 2014). Duke Lemur Center houses hundreds of lemurs across many different species, and collect data on their lemur residents to better understand the factors that effect lemur health, reproduction, and social interaction. The data was used as a TidyTuesday dataset in August 2021 (after being suggested and cleaned by Jesse Mostipak), and so can be loaded into R using the tt_load() function from tidytuesdayR as we’ve done in previous chapters:\ntuesdata &lt;- tt_load(\"2021-08-24\")\nlemurs &lt;- tuesdata$lemurs\ntaxonomy &lt;- tuesdata$taxonomy\nThe lemurs data contains information on individual lemurs, and is the data set we’ll mainly focus on in this chapter. The data has 82609 rows and 54 columns, making it a reasonably large dataset. The first few rows can be inspected with head():\nhead(lemurs)\n\n# A tibble: 6 × 54\n  taxon dlc_id hybrid sex   name  current_resident stud_book\n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;            &lt;chr&gt;    \n1 OGG   0005   N      M     KANGA N                &lt;NA&gt;     \n2 OGG   0005   N      M     KANGA N                &lt;NA&gt;     \n3 OGG   0006   N      F     ROO   N                &lt;NA&gt;     \n4 OGG   0006   N      F     ROO   N                &lt;NA&gt;     \n5 OGG   0009   N      M     POOH… N                &lt;NA&gt;     \n6 OGG   0009   N      M     POOH… N                &lt;NA&gt;     \n# ℹ 47 more variables: dob &lt;date&gt;, birth_month &lt;dbl&gt;,\n#   estimated_dob &lt;chr&gt;, birth_type &lt;chr&gt;,\n#   birth_institution &lt;chr&gt;, litter_size &lt;dbl&gt;,\n#   expected_gestation &lt;dbl&gt;, estimated_concep &lt;date&gt;,\n#   concep_month &lt;dbl&gt;, dam_id &lt;chr&gt;, dam_name &lt;chr&gt;,\n#   dam_taxon &lt;chr&gt;, dam_dob &lt;date&gt;,\n#   dam_age_at_concep_y &lt;dbl&gt;, sire_id &lt;chr&gt;, …\nThe columns give information on the taxon code identifying the species of lemur, the name and sex of the lemur, the lemurs parents, whether they are still alive, the lemurs age and weight, and many other variables. Many of the columns give duplicated information since they express the same data in different units e.g. the lemur’s age is given in five different columns: in days, weeks, months, decimal months, and years.\nThough there are 82609 rows of data, this doesn’t mean that there are data on 82609 lemurs. Each lemur has multiple rows of data associated with it, each corresponding to a date (i.e. different age and associated weight measurements). There are many missing values across the data since not all columns are relevant for all lemurs e.g. if a lemur is still alive, there will be no age_at_death_y value. This also means that if we wanted to process the missing data, we’d likely need to start with rule-based approach to decide which values should be missing and which ones are unexpectedly missing.\nThe taxonomy data is essentially a look up table for the taxon column in the lemurs data. For each taxon code, the taxonomy data provides the Latin name (latin_name) for the species, as well as the common name (common_name). If desired, the two datasets could be joined using the taxon column.",
    "crumbs": [
      "Working with images",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Lemurs: manipulating images in R</span>"
    ]
  },
  {
    "objectID": "lemurs.html#exploratory-work",
    "href": "lemurs.html#exploratory-work",
    "title": "9  Lemurs: manipulating images in R",
    "section": "\n9.2 Exploratory work",
    "text": "9.2 Exploratory work\nGiven the size of the data and the diversity of the variables included, there are many aspects of it that we may wish to explore further. We could use the parental information to construct a family tree of lemurs. We could compare the range of weights and ages across different species of lemurs. We could look at the normal growth curve for lemurs to identify which ones are outside of a normal weight range for their age. There are almost endless options!\n\n9.2.1 Data exploration\nLet’s focus in on the growth curve idea, and look at the relationship between lemur age and weight. We can use the base R plot() function to create Figure 9.1, showing the relationship between age in months and weight in grams. As we might expect with a data set containing 82609 data points, the scatter plot doesn’t clearly show any real pattern as there’s too much variability and many of the points overlap. \n\nplot(\n  x = lemurs$age_at_wt_mo,\n  y = lemurs$weight_g,\n  xlab = \"Weight (g)\",\n  ylab = \"Age (months)\"\n)\n\n\n\n\n\n\nFigure 9.1: Scatter plot showing the relationship between weight and age pf lemurs. There are many data points on the plot, making it difficult to see any pattern.\n\n\n\n\nWe know that there are 27 species of lemur in the data, and, even if you don’t know much about lemurs, you might expect that the weights vary by species. A quick box plot of weights by species using the boxplot() function in R confirms this, with Figure 9.2 showing that there are big differences in lemur weights between species. \n\nboxplot(\n  weight_g ~ taxon,\n  data = lemurs,\n  horizontal = TRUE,\n  las = 1,\n  xlab = \"Weight\",\n  ylab = NULL\n)\n\n\n\n\n\n\nFigure 9.2: Horizontal boxplots showing the range of weights observed for each species of lemur recorded in the data showing significant variability between and within species.\n\n\n\n\n\n9.2.2 Exploratory sketches\nGiven the variability in weights between species, we may wish to focus in on a single species. Let’s keep the chart reasonably simply and create a scatter plot of how lemur weights change with age - essentially recreating Figure 9.1 for a single species and working to make it much more professional looking. Since there are many different species of lemur and they are not all easily recognizable just by their common name, we’ll add an image of the lemur species in the bottom right corner to add more context to the chart.\n\n\n\n\n\nFigure 9.3: Initial sketch of a scatter plot showing the relationship between age and weight, with space allocated for an image and lines indiating where title and subtitle text will go.",
    "crumbs": [
      "Working with images",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Lemurs: manipulating images in R</span>"
    ]
  },
  {
    "objectID": "lemurs.html#preparing-a-plot",
    "href": "lemurs.html#preparing-a-plot",
    "title": "9  Lemurs: manipulating images in R",
    "section": "\n9.3 Preparing a plot",
    "text": "9.3 Preparing a plot\nThe data is already reasonably clean, especially for the simple scatter plot that we’re aiming to create based on Figure 9.3, so there’s a limited amount of data wrangling required.\n\n9.3.1 Data wrangling\nWe want to subset the data to consider only one species of lemur. Unless you’re an expert in lemurs, you probably don’t know which taxonomy codes in the lemurs data relate to which species of lemur. We could join the taxonomy data to the lemurs data and then filter the data based on the joined common_name column. However, since the future data processing is so minimal, we could just browse through the taxonomy data, choose a species of lemur from the common_name column, and look up the relevant taxonomy code.\n\n\n\n\n\n\nThere are 27 species of lemurs included in the data, and for the rest of the chapter we’ll focus in on red ruffed lemurs. Red ruffed lemurs have the taxonomy code VRUB. We use the filter() function from dplyr to retain only the rows of data with \"VRUB\" in the taxon column: \n\nvrub_lemurs &lt;- lemurs |&gt;\n  filter(taxon == \"VRUB\")\n\nThis is definitely the easiest data wrangling process in this book, and we’re ready to move on to creating the first draft of our plot!\n\n9.3.2 The first plot\nStarting with the ggplot() function, we pass in the subset of our data on red ruffed lemurs, and set the age (age_at_wt_mo) as the default variable on the x-axis and with the weight (weight_g) on the y-axis. We also use color to differentiate the sex of the lemurs. The scatter plot is then created by adding the geom_point() layer. \n\nbasic_plot &lt;- ggplot() +\n  geom_point(\n    data = vrub_lemurs,\n    mapping = aes(\n      x = age_at_wt_mo,\n      y = weight_g,\n      color = sex\n    )\n  )\nbasic_plot\n\n\n\n\n\n\nFigure 9.4: Scatter plot of how the weights of red ruffed lemurs change with age, with male lemurs indicated by turquoise circles and females by orange circles. The circles are too large and many of them are overlapping.\n\n\n\n\nEven though the data shown in Figure 9.4 is a subset of the full data, it still contains 4166 observations. This means that many of the points in Figure 9.4 overlap, and it’s difficult to see how many points are actually in a specific area. Let’s edit the initial plot code. We can make the points slightly smaller by changing the size in geom_point(). We also make the points semi-transparent by setting alpha = 0.6. This is a useful technique when data points can overlap since areas of the chart with many points will appear darker, when the semi-transparent points are layered on top of each other. Since relying on color alone for visually identifying groups of data is not a good approach in terms of accessibility, we also map the shape of the points to the sex of the lemur. \n\nbasic_plot &lt;- ggplot() +\n  geom_point(\n    data = vrub_lemurs,\n    mapping = aes(\n      x = age_at_wt_mo,\n      y = weight_g,\n      color = sex,\n      shape = sex\n    ),\n    alpha = 0.6,\n    size = 0.8\n  )\nbasic_plot\n\n\n\n\n\n\nFigure 9.5: Scatter plot of how the weights of red ruffed lemurs change with age, with male lemurs indicated by turquoise triangles and females by orange circles. Both shapes are slightly transparent.",
    "crumbs": [
      "Working with images",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Lemurs: manipulating images in R</span>"
    ]
  },
  {
    "objectID": "lemurs.html#advanced-styling",
    "href": "lemurs.html#advanced-styling",
    "title": "9  Lemurs: manipulating images in R",
    "section": "\n9.4 Advanced styling",
    "text": "9.4 Advanced styling\nNow it’s time to style and edit the plot to make it more aesthetically pleasing, accessible, and informative.\n\n9.4.1 Colors\nFor the plot background and text, we’ll choose colors that might be found on a red ruffed lemur such as a light beige (bg_col) and warm brown (text_col). We also need to select two colors to represent the male and female lemurs. When choosing colors for categories, it’s important to choose colors that neither reinforce negative stereotypes nor contradict intuitive color choices. When choosing colors to represent gender or sex, it’s very common to see the stereotypical blue for boys, and pink for girls. We don’t want to reinforce the negative associations for different genders that these colors can have. Equally, we don’t want to make it confusing by choosing the opposite e.g. blue for girls and pink for boys. Instead, we’ll choose a purple for female lemurs (f_col) and turquoise for male lemurs (m_col). This is not an uncommon color combinations for representing gender, and other good options are discussed in Lisa Muth’s blog post An Alternative to Pink & Blue: Colors for Gender Data (Muth 2018). \n\nbg_col &lt;- \"#F5F5DC\"\ntext_col &lt;- \"#4E2E12\"\nf_col &lt;- \"#A053A1\"\nm_col &lt;- \"#21ADA8\"\n\nThe colors for male and female lemurs can then be applied to the plot using scale_color_manual() where we explicitly map the color variables to the values in the data by naming the vector elements passed into values. We could create these color variables as a named vector as we did in Chapter 6, but since we want the labels to be different than the data values (e.g. females instead of F) it’s a similar amount of work to simply pass them in as variables - especially for only two categories. \n\ncol_plot &lt;- basic_plot +\n  scale_color_manual(\n    values = c(\"F\" = f_col, \"M\" = m_col)\n  )\n\nWe’ll use colored text and icons in the subtitle to distinguish the two categories as we did in Chapter 6, and so we’ll remove the legend by setting legend.position = \"none\" inside the theme() function a little bit later. Here, we technically have two legends in one - one for color, and one for shape. If we only wanted to remove one part of the legend e.g. color, we could set guide = \"none\" inside scale_color_manual(). This would result in a legend for shape only with the shapes shown in black by default. \n\n9.4.2 Working with systemfonts\n\nRather than using a traditional legend for color and shape, we’re going to include colored text in the subtitle. Here, we’re also going to include some Unicode icons in the subtitle to identify how the circles and triangles map to the two categories. Unfortunately the showtext package, that we’ve been using to load the Font Awesome icon font and other Google fonts, doesn’t always play nicely with Unicode icons. We’ll look at an alternative font package: systemfonts (Pedersen, Ooms, and Govett 2024). As mentioned in Chapter 2, the systemfonts package allows you to locate or load font files available on your local system.\nTo register a font using systemfonts, we use the register_font() function. It looks quite similar to the font_add() function from showtext for loading local fonts - see Chapter 6 and Chapter 7 to compare them. Let’s load the Font Awesome Brand icons using systemfonts as an alternative approach to the one taken in Chapter 7. \nThe first argument name will be the name that the font is known by in R. You can choose any name you want, but here we’ll make sure to use the same name as we did for the family argument in Chapter 7, in order for our social_caption() function to still work. The plain argument is the the path to the font file.\n\nregister_font(\n  name = \"Font Awesome 6 Brands\",\n  plain = \"fonts/Font-Awesome-6-Brands-Regular-400.otf\"\n)\n\n\n\n\n\n\n\nTip 9.1: Setting a graphics device\n\n\n\nIn R, a graphics device is the system that is used to render visual outputs (including plots). The graphics device used will vary depending on what operating system you are using and what type of output format you want to create e.g. png or pdf. The ragg package (Pedersen and Shemanarev 2023) provides graphic devices for R based on the AGG library. \nIt’s recommended to use ragg for graphics in RStudio because it makes working with fonts easier and provides higher quality images. If you use a different graphics device, the icons or fonts loaded with systemfonts may not appear correctly. To use ragg for the graphics devices in RStudio, go to Tools -&gt; Global Options -&gt; General -&gt; Graphics -&gt; Backend and select AGG. In R Markdown or Quarto documents, you can add a set up chunk at the top to use ragg which includes knitr::opts_chunk$set(dev = \"ragg_png\"), or your device of choice. \n\n\nWe can also use register_font() from systemfonts to load the fonts we’ll use for the title and body text of our plot. The difference here is that if, for example, we want to use fonts from Google Fonts, we first need to download the font files. \nFor the body text, we’ll use Lato, a sans serif typeface designed by Łukasz Dziedzic. The font files can be downloaded from fonts.google.com/specimen/Lato or www.latofonts.com/lato-free-fonts. For the title, we’ll use Passion One - a typeface specifically designed for large titles! It can be downloaded from fonts.google.com/specimen/Passion+One. When you download these typefaces, you’ll see that you don’t just download a single file, you actually download multiple files - one for each variation of the font that is available e.g. bold and italic.\nIn register_font(), you pass these different font files into the relevant argument e.g. passing the font file for the bold version into the bold argument. Note that not all typefaces have every style available. Here, Passion One isn’t available in italic so we simply don’t pass anything into the italic argument when loading Passion One. If you’re not going to use a particular font style (for example, if you know you won’t write any text in bold when using Lato font) you don’t need to load this style in with register_font(). However, it can be useful to have it available, just in case you change your mind!\n\nregister_font(\n  name = \"Lato\",\n  plain = \"fonts/Lato/Lato-Regular.ttf\",\n  bold = \"fonts/Lato/Lato-Bold.ttf\",\n  italic = \"fonts/Lato/Lato-Italic.ttf\"\n)\nregister_font(\n  name = \"Passion One\",\n  plain = \"fonts/Passion_One/PassionOne-Regular.ttf\",\n  bold = \"fonts/Passion_One/PassionOne-Bold.ttf\"\n)\n\nWe then define variables with the name of the title and body typefaces:\n\nbody_font &lt;- \"Lato\"\ntitle_font &lt;- \"Passion One\"\n\nAn alternative to using register_font() is to install the font on your system, by right clicking on the downloaded font file and selecting Install. Then ragg should be able to find the font automatically. However, there may be reasons why you can’t or don’t want to prefer install a font system wide. Using register_font() in a script also leaves a record of how the fonts were installed, rather than relying on other processes happening outside of R.\n\n9.4.3 Adding text\nThe title for the plot can be defined as a simple character string, which asks the reader a question and encourages them to engage with the plot. To write the subtitle text we’ll use the glue() function from glue to do two things: \n\nAdd colored text in the subtitle, as we did in Chapter 7.\nCreate data-driven text, as we did in Chapter 2.\n\nWe’ll also use Unicode characters (for triangles and circles) in the subtitle to substitute the shape legend. Though the Unicode characters are not exactly identical to the shapes plotted on our chart, in the way that the colors are, the shapes are similar enough for this approach to work. The &#x25B2; string adds a black triangle, and the &#x25CF string adds a black circle. Though these define black shapes, they will appear in the color we desire. Here, black triangle really just means filled in triangle (with white triangle meaning outline only triangle). \n\ntitle &lt;- \"How much does a red ruffed lemur weigh?\"\nsubtitle &lt;- glue(\"At Duke Lemur Center, red ruffed lemurs live to an average of {round(mean(vrub_lemurs$age_at_death_y, na.rm = TRUE), 1)} years, and mature at about 2 years old. Although it may appear that, once fully-grown, &lt;span style='color:{f_col}'&gt;females &#x25CF;&lt;/span&gt; tend to weigh more than &lt;span style='color:{m_col}'&gt;males &#x25B2;&lt;/span&gt;, this chart does not account for pregnancy.\")\n\nWe’ll use the social_caption() function defined in Chapter 7, to create a caption that includes Font Awesome icons for social media (using the colors we defined earlier). We then use the social media caption in the source_caption() function from Chapter 6, and also pass in Duke Lemur Center and the data publication as the source of the data. \n\nsocial &lt;- social_caption(\n  icon_color = f_col,\n  font_color = text_col,\n  font_family = body_font\n)\ncap &lt;- source_caption(\n  source = \"Duke Lemur Center (Zehr et al. 2014)\",\n  sep = \"&lt;br&gt;\",\n  graphic = social\n)\n\nThe title, subtitle, and caption text can then be added to the plot using the labs() function, along with x- and y- axis labels showing the variables and units they are recorded in. \n\ntext_plot &lt;- col_plot +\n  labs(\n    title = title,\n    subtitle = subtitle,\n    caption = cap,\n    x = \"Age (months)\", y = \"Weight (g)\"\n  )\ntext_plot\n\n\n\n\n\n\nFigure 9.6: Scatter plot of how the weights of red ruffed lemurs change with age, with male lemurs indicated by turquoise triangles and females by purple circles. The subtitle text runs off the page, and the caption is incorrectly formatted as raw HTML text.\n\n\n\n\n\n9.4.4 Adjusting themes\nNow we need to add some final styling to implement the background and text colors, as well as making sure the raw HTML code is processed correctly.\nWe start with theme_minimal() as a base, which keeps the grid lines and axes but removes the grey background and dark axis ticks. We also set the base font size as size 6 and use our previously defined body_font variable as the base font family. We can then make a few further adjustments using theme(), where we remove the legend by setting legend.position = \"none\", add a margin around the edge of the plot, and apply the selected background color using element_rect(). \nSetting plot.title.position and plot.caption.position to \"plot\" aligns the title, subtitle, and caption with outside of the entire plot rather than the panel with the scatter plot - giving a cleaner, more balanced look. The title text is further adjusted with element_text() to use the title_font family, increase it in size, change the color, and add a little bit more space at the bottom of it. As described in Chapter 2 and Chapter 7, we use element_textbox_simple() from ggtext for the plot subtitle and caption to force the long text to wrap onto multiple lines, and to correctly process the HTML code in the caption. \n\ntheme_plot &lt;- text_plot +\n  theme_minimal(base_size = 6, base_family = body_font) +\n  theme(\n    # legend\n    legend.position = \"none\",\n    # background\n    plot.margin = margin(5, 5, 5, 5),\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    # text\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.title = element_text(\n      family = title_font,\n      size = rel(1.7),\n      color = text_col,\n      margin = margin(b = 5)\n    ),\n    plot.subtitle = element_textbox_simple(\n      color = text_col\n    ),\n    plot.caption = element_textbox_simple(\n      hjust = 0, halign = 0,\n      color = text_col\n    )\n  )\ntheme_plot\n\n\n\n\n\n\nFigure 9.7: Scatter plot of how the weights of red ruffed lemurs change with age, with the plot now having a beige background, subtitle text correctly wrapped, and attribution of data and graphic in the caption.\n\n\n\n\nWe’re going to add the image to the right hand side of the plot. The approach we’re taking requires us to make some blank space. Perhaps the simplest approach is to increase the size of the margin on the right hand side of the plot using the plot.margin argument in theme(): \n\ntheme_plot +\n  theme(\n    plot.margin = margin(5, 90, 5, 5)\n  )\n\n\n\n\n\n\nFigure 9.8: Scatter plot of how the weights of red ruffed lemurs change with age, with additional space left blank on the right hand side of the plot and subtitle text.\n\n\n\n\nHowever, as you can see in Figure 9.8, this approach results in the title and subtitle text also being squashed to the left hand side of the plot as it doesn’t extend into the margin. This may be desirable for some plots, but it doesn’t work well here. Another approach is to use the expand argument in scale_x_continuous() to increase the amount of space at the right hand side of the x-axis. However, since this extends the axis, this results in grid lines being included in the additional space. We could play around with the breaks and axis text to remove the unwanted components, but there’s an easier (slightly hacky) solution: add and edit a secondary y-axis. \nSecondary axes are almost always a poor choice of chart due to the fact that the choice of transformation for the secondary axis is entirely arbitrary but can hugely impact how the plot is interpreted. However, we’re not actually going to use the secondary axis to present data, we’re only going to use it to manipulate the layout of the plot background. To add some additional margin space on the right hand side, without squashing the title or adding grid lines in the margin, we can: \n\nDuplicate the y-axis to create a secondary y-axis on the right hand side by setting sec.axis = dup_axis() inside scale_y_continuous(). The sec_axis() function could be used instead of dup_axis(), but there’s no need to transform the axis in any way.\nAdd lots of margin space to the secondary axis labels by expand the right margin using margin = margin(r = 150) for the axis.text.y.right argument of theme().\nThen hide the secondary axis labels by making them the same color as the background through also setting color = bg_col for axis.text.y.right.\n\nWe also remove the title by setting axis.title.y.right to element_blank(). \n\nstyled_plot &lt;- theme_plot +\n  scale_y_continuous(sec.axis = dup_axis()) +\n  theme(\n    axis.text.y.right = element_text(\n      margin = margin(r = 90),\n      color = bg_col\n    ),\n    axis.title.y.right = element_blank()\n  )\nstyled_plot\n\n\n\n\n\n\nFigure 9.9: Scatter plot of how the weights of red ruffed lemurs change with age, with additional space left blank on the right hand side though the subtitle text spans the full plot width.\n\n\n\n\nWe now have an appropriate space to place an image.",
    "crumbs": [
      "Working with images",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Lemurs: manipulating images in R</span>"
    ]
  },
  {
    "objectID": "lemurs.html#working-with-images",
    "href": "lemurs.html#working-with-images",
    "title": "9  Lemurs: manipulating images in R",
    "section": "\n9.5 Working with images",
    "text": "9.5 Working with images\nThough you might not often find instructions in data visualization books about working with images, there are many reasons why you may wish to overlay an image on top of a plot. Perhaps you need to add your company logo in the corner for more consistent branding. Or perhaps you’re just looking for a way to make your plot more eye catching! \n\n9.5.1 Manipulating images with magick and imager\n\nThe magick package (Ooms 2024) provides bindings to the ImageMagick image processing library, which allows you to manipulate images through rotating, scaling, cropping, or blurring them (to name just a few!). It supports multiple different image formats including PNG, JPG, and PDF. \nThe magick package is not the only R package that enables you to process and manipulate images. A popular alternative is the imager package (Barthelme 2024) which is based on CImg, a C++ library by David Tschumperlé. Both packages have their strengths, and it’s easy to use both at the same time via the cimg2magick() and magick2cimg() conversion functions in imager. There are some operations that are easier in imager, and some that are easier in magick. In this chapter, we’re going to use both packages together to demonstrate how easy it is. \n\n\n\n\n\n\nTip 9.2: Finding images for reuse\n\n\n\nWhen you’re adding a logo to your plot, it’s (reasonably) easy to know which image to use and where to find it. If you don’t already have the image you want to overlay, you also need to know how and where to find it.\nIf you add images to plots that you don’t own, make sure you have permission to re-use the image and check that the license file allows you to. Sites such as Unsplash (unsplash.com), Wikimedia Commons (commons.wikimedia.org), or Pixabay (pixabay.com) can be good places to find images that are free to re-use.\n\n\nFor this visualization, we’re going to use a photograph of a red ruffed lemur from Unsplash taken by Jax (Jax (@lysrix) 2017).\nWe’re going to start with the imager package and use it to read the image into R with the load.image() function. If you were using magick to start with, you would use the image_read() function instead. \n\nlemur_img &lt;- load.image(\"images/lemur.jpg\")\nplot(lemur_img)\n\n\n\n\n\n\nFigure 9.10: Image of a red ruffed lemur shown with plot axes which indicate the size of the image in pixels.\n\n\n\n\nYou can view the image to check it’s been loaded correctly by running plot(lemur_img), and you’ll see that it’s plotted on a traditional base R graphics grid, with the axes indicating the number of pixels. Don’t worry about how to deal with this background grid - we’ll deal with that a little bit later!\nThough this is a fun image of a lemur, overlaying it on top of the plot in its raw format isn’t going to be the most aesthetically pleasing. The background of the image would be quite clear against the plot. It would be better if the image was simply of the lemur itself with a transparent background. There are many online tools and desktop software available that could remove the background for you, but we can also do this in R!\nLet’s start by cropping out as much of the background as possible. In imager, the Xc() and Yc() functions return pixel coordinates for an image, for x- and y- coordinates, respectively. Subsetting or updating the pixel value of an image based on pixel coordinates essentially works the same way as subsetting or updating a matrix value in R. \nRunning Xc(lemur_img) &lt;= 200 creates a pixel matrix where all values with an x-coordinate less than or equal to 200 are TRUE, and is otherwise FALSE. Setting these values to 0 turns those pixels to the color black. We can do something similar to remove sections where the x-coordinate is less than 275 and the y-coordinate is greater than 320. It takes a little bit of trial and error to get these boundaries correct, but you can use the plot axis as a guide. Be careful with the y-axis - it goes the opposite direction of most plots! \n\npx &lt;- Xc(lemur_img) &lt;= 200\nlemur_img[px] &lt;- 0\npx &lt;- Xc(lemur_img) &lt;= 275 &\n  Yc(lemur_img) &gt;= 320\nlemur_img[px] &lt;- 0\n\nNow we need to remove the rest of the background. Luckily, there is quite a lot of contrast between the part of the image we want to keep (the lemur) and the part that we don’t (the background). The px.flood() function from imager allows you to select pixels that are similar to some initial pixel. This means we can select a pixel from the lemur, and then use the px.flood() function to select all pixels that are similar to it. The x and y arguments are used to specify the coordinates of the initial pixel to start with. The sigma argument specifies how different we want to allow the pixels to be with lower indicating very similar, and higher values of sigma allowing more different values to be selected. \nIt takes a little bit of trial and error to choose the best values for these arguments, and we can visually inspect performance by plotting the boundary lines of the pixels that are considered similar. Passing in the output from px.flood() into highlight() from imager draws a red outline around the similar pixels. \n\ndetect_outline &lt;- px.flood(\n  im = lemur_img,\n  x = 420,\n  y = 200,\n  sigma = 0.5\n)\nplot(lemur_img)\nhighlight(detect_outline)\n\n\n\n\n\n\nFigure 9.11: Image of a red ruffed lemur with a red line indicating the boundary between the main part of the image and the background.\n\n\n\n\nYou can see in Figure 9.11 that the lemur’s white collar has been classified as part of the background. We can edit the x, y, and sigma arguments to select this part of the image separately:\n\ndetect_outline_2 &lt;- px.flood(\n  im = lemur_img,\n  x = 430,\n  y = 220,\n  sigma = 0.063\n)\n\nTo make it easier to create a transparent background, we turn the non-similar parts of the image i.e. the areas outside of the selected pixel sets, to black. As we did when cropping the image, we do this by setting the pixel values to 0 i.e. no color.\n\nlemur_img[detect_outline & !detect_outline_2] &lt;- 0\n\nWe now want to turn the sections of the image that are pure black into transparent sections. The easiest way to do this is through the image_transparent() function from magick. However, our lemur_img image is currently of a format designed to work with imager, and won’t work out of the box with magick. Luckily, the cimg2magick() function in the imager package converts it to a format that is compatible with magick. For some reason, the cimg2magick() also causes the image to be flipped horizontally. We can turn it back to the correct orientation using the image_flop() function in magick. \nNote that since the image is always the first argument of the image_*() functions in magick (and the output remains of the same class) we can use a piped workflow here, just as we do with tidyverse functions when working with data. Finally, we use the image_transparent() function in magick to turn all pixels that are currently \"black\" transparent. \n\nlemur_nobg &lt;- cimg2magick(lemur_img) |&gt;\n  image_flop() |&gt;\n  image_transparent(\"black\")\nlemur_nobg\n\n\n\n\n\n\nFigure 9.12: Image of a red ruffed lemur with the background removed, as well as a small portion of the lemur’s collar.\n\n\n\n\nWhen you print the image with magick, it returns the image itself to the plot window, but also returns output to the console with information about the image dimensions, format, and file size. You can see that the process of turning the background transparent is not perfect, as the white collar of the lemur has still been partially removed. It’s also a process that requires a lot of trial and error to find the right combination of argument values.\n\n9.5.2 Adding images to plots with cowplot\n\nBefore we go ahead with adding the image to the scatter plot, let’s first update the caption to add an attribution for the image, in addition to the attributions for the data and graphic. We can use paste0() to join together the output from the source_caption() function we were already using for the caption, with some additional styled text. You’ll see that this new text is similar to the text described in Chapter 6, with &lt;br&gt; adding a new and ** used to style the word Image in bold text. We can then override the existing caption in the labs() function. \n\ncap &lt;- paste0(\n  source_caption(\n    source = \"Duke Lemur Center (Zehr et al. 2014)\",\n    sep = \"&lt;br&gt;\",\n    graphic = social\n  ),\n  \"&lt;br&gt;**Image**: Jax (Unsplash: @lysrix)\"\n)\nstyled_plot &lt;- styled_plot +\n  labs(caption = cap)\n\nThe cowplot package (C. O. Wilke 2024) extends ggplot2 and allows you to arrange, align, and combine multiple plots into a single visual. In this chapter, we’re more interested in the cowplot functionality for adding annotations and customization - including images. \n\n\n\n\n\n\nTip 9.3: R packages for combining plots and images\n\n\n\nThere are several other R packages available for arranging different elements together e.g. combining multiple plots or adding images to plots. The most common for arranging charts is the patchwork package (Pedersen 2024) which we’ll use in Chapter 12 and Chapter 13. The egg package (Auguie 2019) is another popular alternative, with the geom_custom() function being especially useful for adding images. The ggimage package (Yu 2023) can also be used to add images to charts, and is great when you are mapping columns of your data to properties of the images e.g. file paths or image coordinates. \n\n\nWith cowplot, we start by using the ggdraw() function which sets up a layer on top of our ggplot2 styled_plot object to allow us to draw on top of it. The draw_image() function is then used to add the lemur_nobg image on top. By default, the layer on top of the plot has coordinates running from 0 to 1, with (0, 0) being the lower left corner of the plot and (1, 1) the top right. Since we want to position the image in the bottom right hand corner, we set hjust and halign to 1, to align the right hand side of the image with an x value of 1. Setting vjust and valign to 0 aligns the bottom of the image with the to the y- value of 0. The width defines how big the image is - some trial and error results in a choice of 0.4 for the image width. \n\nfinal_plot &lt;- ggdraw(styled_plot) +\n  draw_image(\n    lemur_nobg,\n    x = 1, y = 0,\n    hjust = 1, halign = 1,\n    vjust = 0, valign = 0,\n    width = 0.4\n  )\nfinal_plot\n\n\n\n\n\n\nFigure 9.13: Scatter plot of how the weights of red ruffed lemurs change with age, with an image of a red ruffed lemur overlaid in the bottom right corner.\n\n\n\n\nFinally, we save the image using ggsave(): \n\nggsave(\n  filename = \"lemurs.png\",\n  plot = final_plot,\n  width = 5,\n  height = 0.67 * 5\n)\n\nWhen you add the image using cowplot, you may see some warnings returned in the console about some of the custom fonts not being found. However, as long as the fonts are appearing correctly on the chart, you can ignore these warnings.",
    "crumbs": [
      "Working with images",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Lemurs: manipulating images in R</span>"
    ]
  },
  {
    "objectID": "lemurs.html#reflection",
    "href": "lemurs.html#reflection",
    "title": "9  Lemurs: manipulating images in R",
    "section": "\n9.6 Reflection",
    "text": "9.6 Reflection\nDespite the complexity of the code behind it, this is a relatively simple plot. And that’s where the strengths of this visualization lie - it often takes a lot of work to create a clean and minimal chart. The lemur image adds a fun element to the chart and makes it more eye-catching and interesting without adding any additional complexity to the way the data is presented. The use of shapes in addition to color for distinguishing data for male and female lemurs is another strength as it increases the accessibility of the chart, making it available to a wider audience. However, there are still a few areas where improvements could be made. The obvious one is the background removal of the lemur image. As we noted earlier, some of the lemur’s white fur has been incorrectly removed as it’s a similar color to the background.\nThe plot could be further improved by giving more consideration to the choice of axes - both x and y. Depending on what aspect of lemur ages or weights a reader is interested in, a different choice of axis may be more appropriate. For example, if the interest is in adult lemurs, subsetting the data to consider only lemurs above a certain age would work better. If the interest is in looking at when lemurs reaching their adult weight, looking at lemurs below a specific age or performing a transformation of the axis (e.g. logarithmic) would make it easier to see the point at which lemurs stop growing. Similarly, the y-axis uses grams as its units since this is how the weight data is recorded. For young lemurs, measuring on a scale of grams is appropriate. However, the majority of lemurs in the data are adults and so perhaps presenting the data in terms of kilograms might make more sense.\nIt’s not currently clear from this chart that each individual lemur has multiple weight measurements recorded. This means that the data points shown in the chart are not independent - a common assumption of many statistical models. Overall, this is a fun and easy-to-interpret chart that’s quite likely to draw people in to learn more about lemurs. However, if it’s a part of an exploratory step before statistical modelling, it may need a little bit more fine-tuning.",
    "crumbs": [
      "Working with images",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Lemurs: manipulating images in R</span>"
    ]
  },
  {
    "objectID": "lemurs.html#exercises",
    "href": "lemurs.html#exercises",
    "title": "9  Lemurs: manipulating images in R",
    "section": "\n9.7 Exercises",
    "text": "9.7 Exercises\n\nChoose a different species and recreate this visualization.\nBased on what you learned in Chapter 8, can you create a parameterized plot function that takes a species (and optional image path) as arguments?\n\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Working with images",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Lemurs: manipulating images in R</span>"
    ]
  },
  {
    "objectID": "r-packages.html",
    "href": "r-packages.html",
    "title": "10  R packages: using images for custom facet labels",
    "section": "",
    "text": "10.1 Data\nIn this chapter, we’ll learn about how to collect data on which packages and functions are used in R code, replacing the underlying data in a plot that’s already been made, and how to use images as category labels.\nPackages required in this chapter:\nIn July 2024, TidyTuesday (R4DS Online Learning Community 2023) featured some examples of using the funspotr package (Shalloway 2023) as datasets, suggested by Bryan Shalloway. The funspotr package was designed to help identify which R functions and packages are used in files and projects. Let’s try to identify which R functions and packages have been used in this GitHub repository of TidyTuesday visualizations: github.com/nrennie/tidytuesday.\nLet’s start by getting a list of all the files that exist in the GitHub repository. We can use the list_files_github_repo() function from funspotr to get this list of files - specifying which GitHub repository we want the list for (in the form of \"username/repository\"), and which branch of the repository we want to look at. The list_files_github_repo() function returns a data frame with two columns: relative_paths (file path relative to the root of the git repository) and absolute_paths (URL of each file).\nAll of the files in this repository are named and organised based on dates in the following structure: yyyy/yyyy-mm-dd/yyyymmdd.R (Rennie 2023c). Since the code to extract used functions takes a while to run, let’s filter this list of files to only include files dated 2023. We can use str_detect() from stringr to find any values in the relative_paths column that contain \"2023\" and then filter() from dplyr to keep only those rows.\nfiles_to_check &lt;- list_files_github_repo(\n  repo = \"nrennie/tidytuesday\",\n  branch = \"main\"\n) |&gt;\n  filter(\n    str_detect(relative_paths, \"2023\")\n  )\nWe then pass the files_to_check data frame into spot_funs_files() from funspotr to get the list of functions and packages uses in each file. Since we want to look at total package use, we set show_each_use = TRUE to make sure that individual rows are returned each time a function is used (rather than just once for an entire file).\nr_funs &lt;- files_to_check |&gt;\n  spot_funs_files(\n    show_each_use = TRUE\n  )\nWe then use the unnest_results() function from funspotr to get a row in the data for each use of a function. Since the code above takes a while to run, it’s also important that we save the data in a format that means we can use it later (rather than having to re-download it). We’ll save it as a CSV file using write.csv(), choosing an appropriate file name and removing the row names.\nr_pkgs &lt;- rfuns |&gt;\n  unnest_results()\nwrite.csv(r_pkgs, \"data/r_pkgs.csv\", row.names = FALSE)\nWe can then read the CSV back in using read_csv() from **readr``** (orread.csv()` if you prefer!)\nr_pkgs &lt;- read_csv(\"data/r_pkgs.csv\")\nThe contents of the nrennie/tidytuesday GitHub repository have likely expanded since this chapter was written. You can download the version of the CSV file used in this chapter here.\nThe r_pkgs data has 4059 rows and 4 columns. The funs column contains names of each function used, and pkgs has the name of the package that function comes from. The remaining two columns are the relative_paths and absolute_paths columns that identify which file the function was found in. Let’s have a quick look at the data using head():\nhead(r_pkgs)\n\n# A tibble: 6 × 4\n  funs            pkgs     relative_paths     absolute_paths\n  &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;              &lt;chr&gt;         \n1 library         base     2023/2023-01-03/2… https://raw.g…\n2 library         base     2023/2023-01-03/2… https://raw.g…\n3 library         base     2023/2023-01-03/2… https://raw.g…\n4 library         base     2023/2023-01-03/2… https://raw.g…\n5 font_add_google sysfonts 2023/2023-01-03/2… https://raw.g…\n6 font_add_google sysfonts 2023/2023-01-03/2… https://raw.g…",
    "crumbs": [
      "Working with images",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R packages: using images for custom facet labels</span>"
    ]
  },
  {
    "objectID": "r-packages.html#exploratory-work",
    "href": "r-packages.html#exploratory-work",
    "title": "10  R packages: using images for custom facet labels",
    "section": "\n10.2 Exploratory work",
    "text": "10.2 Exploratory work\nThe obvious question to start with here is: which packages are used most often?\n\n10.2.1 Data exploration\nLet’s start by counting the number of package used with the table() function, and using sort() to arrange packages from least to most used. \nWe can then pass this into the barplot() function to obtain an ordered bar chart of package use, setting horiz = TRUE to make a horizontal bar chart. We can see that ggplot comes out on top, closely followed by base!\n\n\n\n\n\n\nTip 10.1: Base R or tidyverse?\n\n\n\nAs an aside, this highlights that combining base R and tidyverse packages can be incredibly effective since they each have different strengths. There’s no need to choose a side on the base R versus tidyverse argument - use both!\n\n\n\nbarplot(\n  sort(table(r_pkgs$pkgs)),\n  las = 1,\n  horiz = TRUE\n)\n\n\n\n\n\n\nFigure 10.1: Ordered bar chart showing the number of times each package was used in 2023. The ggplot2 package is used most.\n\n\n\n\nOne thing that you may have noticed is that, for some reason, in the data the package is listed as \"ggplot\" rather than \"ggplot2\". So let’s fix that using mutate() and the if_else() function from dplyr. We can overwrite the existing pkgs column, where (i) if the value is currently \"ggplot\", we replace it with \"ggplot2\"; (ii) otherwise, we leave the existing value in the pkgs column. \n\nr_pkgs &lt;- r_pkgs |&gt;\n  mutate(\n    pkgs = if_else(\n      pkgs == \"ggplot\",\n      \"ggplot2\",\n      pkgs\n    )\n  )\n\n\n10.2.2 Exploratory sketches\nThere are currently 38 packages listed in the data, many of them with one or two uses. That’s quite a lot of categories to visualize at once, so let’s narrow it down to only the core tidyverse packages (Wickham et al. 2019). We could visualise a simple bar chart (or variation of a bar chart) showing how often each core tidyverse package was used. But due to the structure of the file names, we also have information about when each package was used. So we could visualize usage over time, for each package.\nFor each package, we could create an area (or line) chart showing usage over time using facets as we did in Chapter 3. This time, the categories don’t really have a natural order, so instead we’ll order the facets from most to least used. It might look something like Figure 10.2.\n\n\n\n\n\nFigure 10.2: Initial sketch of a faceted area charts showing packages use over time.\n\n\nOne of the most incredible things about the R community, is our adoration of hex stickers - package logos in the shape of a hexagon. All of the core tidyverse packages have their own hex sticker. Rather than simply using the package name as the facet label in our plot, we could replace the labels with images of hex stickers, as shown in Figure 10.3.\n\n\n\n\n\nFigure 10.3: Initial sketch of a faceted area charts showing packages use over time, with hex stickers instead of text labels.",
    "crumbs": [
      "Working with images",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R packages: using images for custom facet labels</span>"
    ]
  },
  {
    "objectID": "r-packages.html#preparing-a-plot",
    "href": "r-packages.html#preparing-a-plot",
    "title": "10  R packages: using images for custom facet labels",
    "section": "\n10.3 Preparing a plot",
    "text": "10.3 Preparing a plot\nTo prepare an initial draft of the plot in Figure 10.2, we need to wrangle the following information from the data:\n\nThe date each package use relates to (currently embedded in a file name);\nThe number of package uses per day for each core tidyverse package; and\nWhich package was used the most often?\n\n\n10.3.1 Data wrangling\nSince we’re going to focus on the core tidyverse packages, let’s start by making a vector of the package names:\n\ncore_tidyverse &lt;- c(\n  \"dplyr\", \"forcats\", \"ggplot2\", \"purrr\",\n  \"readr\", \"stringr\", \"tibble\", \"tidyr\"\n)\n\nWe can then use this vector to filter() the data and keep only rows where the pkgs column has a value in the core_tidyverse vector. \nThe relative_paths are currently of the form \"yyyy/yyyy-mm-dd/yyyymmdd.R\", and we want to extract the date from this file path. There are multiple ways of doing this - the easiest way is to extract the part of the file path that is between the two /. Here, we can make use of separate_wider_delim() from tidyr. This function allows you to separate a character string in one column, into multiple columns based on some delimiter. In this case, the delimiter will be /. By default, this will create three new columns for each section of the string: yyyy, yyyy-mm-dd, and yyyymmdd.R. We only want to keep the middle one, so we can use the trick of setting the names of columns we don’t want to keep to NA. Instead, we’ll create only one new column called date. \nWe then convert the date which is currently still a character string into a date object using mutate() and the ymd() function from lubridate (since the dates are specified in year, month, day format). Finally, we count how many observations there are of each package, per date. \n\nr_pkgs_date &lt;- r_pkgs |&gt;\n  filter(pkgs %in% core_tidyverse) |&gt;\n  separate_wider_delim(\n    relative_paths,\n    delim = \"/\",\n    names = c(NA, \"date\", NA)\n  ) |&gt;\n  mutate(date = ymd(date)) |&gt;\n  count(date, pkgs)\n\n\n\n\n\n\n\nTip 10.2: Alternative approach using stringr\n\n\n\nInstead of using separate_wider_delim(), you could use functions from the stringr package (Wickham 2023b), which is designed for processing character strings. For example: \n\nlibrary(stringr)\nr_pkgs |&gt;\n  mutate(date = str_extract(\n    relative_paths,\n    pattern = \"(?&lt;=/)[^/]+(?=/)\"\n  ))\n\nHere, we create a new date column using mutate() which consists of the part of the string in between the two /, extracted using str_extract() from stringr. The pattern is a regular expression (often shortened to regex) which is a sequence of characters that defines a search pattern. \nThis pattern breaks down as:\n\n\n(?&lt;=/): look behind for a /\n\n\n[^/]+: match one or more characters that are not /\n\n\n(?=/): look ahead for a /\n\n\n\n\nWe want the facets in our plot to be ordered from most to least used package, so let’s start by converting the pkgs column to a factor and set the levels equal to the vector of core tidyverse package names. This ensures that all core packages are included in the factor levels even if they do not appear in the data. If you look closely, you’ll notice that \"tibble\" is missing. It’s missing because it’s never been used directly - that’s not that surprising, since it’s often used in the background of the other tidyverse packages. Sometimes, it’s important to visualise zeroes, so it’s important that tibble is still represented in the data. \nWe can then use fct_reorder() from the forcats package (Wickham 2023a) to sort the pkgs column based on the sum of values in the n column. We set .desc to TRUE to sort in descending order, and set .default to -Inf to place any unused factor levels at the end i.e. where they would appear if they had a count of 0. \n\nplot_data &lt;- r_pkgs_date |&gt;\n  mutate(\n    pkgs = factor(pkgs, levels = core_tidyverse),\n    pkgs = fct_reorder(pkgs, n,\n      .fun = sum,\n      .desc = TRUE, .default = -Inf\n    )\n  )\n\nNow we’re ready to create a first draft of Figure 10.2!\n\n10.3.2 The first plot\nWe start our plot by passing plot_data into ggplot() to use this data as the base for all elements in the plot. We then add geom_area() to create the geometry for the area chart, specifying the aesthetic mapping using aes() again. We put the date on the x-axis, n on the y-axis. and set the fill color of the area chart based on the category in pkgs. This is very similar to the initial plots created in Chapter 3. \nWe then add facet_wrap() to create small multiple plots, split by pkgs. We want our facet plots all in one line rather than arranged as a grid, so we set nrow = 1 inside facet_wrap(). Although \"tibble\" is a level in our pkgs factor column, no observations of that factor level exist. To make sure it still appears as an (empty) facet, we set drop = FALSE. Otherwise, only 7 faceted plots would be shown. \n\nbasic_plot &lt;- ggplot(plot_data) +\n  geom_area(\n    mapping = aes(\n      x = date,\n      y = n,\n      fill = pkgs\n    )\n  ) +\n  facet_wrap(~pkgs, nrow = 1, drop = FALSE)\nbasic_plot\n\nWarning in min(diff(unique_loc)): no non-missing arguments\nto min; returning Inf\n\n\n\n\n\n\n\nFigure 10.4: Faceted area charts showing package use over time for each of the 8 core tidyverse packages, with facets ordered from most to least use. The ordering doesn’t quite look correct.\n\n\n\n\nYou might notice two things here:\n\nalongside the plot, a (slightly confusing) warning message is returned;\nthe ordering of the plot doesn’t look quite right.\n\nYou might also notice the large spike in the ggplot2 facet which shows 141 uses of the ggplot2 package in a single script and wonder if this is an error. It’s not an error - it was actually used that many times!\nLet’s start by thinking about the second one of these issues and see if we can figure out what’s happening. We’ve specified that the facets should be ordered from most to least used in total. But the area for the stringr package looks much larger than the area for the readr``** package - even though it should be smaller. It also looks as though there are no values in the **forcats** facet - but we know this isn't true for **forcats**, only for **tibble`. Why is this happening?\nThe problem is that 0 is not included in the data. The areas are being drawn between only the strictly positive values, never going back down to 0. For packages that are used a lot but only in a few scripts, this makes their area larger than packages that are used once or twice in many scripts.\nIn our data set, if a package isn’t used in a script, there is no entry in the data. This makes sense since there are tens of thousands of packages and it would be much more difficult and time consuming to list every package that isn’t used, rather than just those that are. But in our case, these missing, unobserved values aren’t really missing values - they are 0 values.\nThe warning message returned from the plot is also trying to tell us about this problem (the warning just isn’t very clear!)\n\n\n\n\n\n\nTip 10.3: Don’t ignore the warning signs!\n\n\n\nThis is it a zero or is it missing? question has highlighted a few important aspects of plotting charts and data processing: \n\nDon’t simply ignore warning messages if you don’t understand them. It might be tempting to ignore the warning message because you ended up with a plot that looks kind of like what you expected, and the warning message isn’t very clear about what’s wrong. But here, the warning was telling us that something was wrong with our assumptions about the data.\nOrdering your data (sensibly) can help you to spot issues. If the facets hadn’t been ordered, it would have been harder to recognize that some areas were overestimated, and some were underestimated.\nSometimes missing values are explicitly represented as NA values (or something else), and other times missing values are simply rows that do not exist in the data. We often think about missing values more when we see them as NA values. But just because you have no NA values in your data, doesn’t mean that you don’t have any missing values.\nAs discussed in Chapter 4, when you have missing values (whether explicit or implicit), it’s important to think about why they are missing and whether they are really missing. Does a missing values mean 0? Or does it mean it’s actually missing? Or does it mean something else entirely? It’s important to understand the process of data collection to answer this question correctly.\n\n\n\nLet’s go ahead and add in zeros where they should be. We know that the date and pkgs columns are complete: there are no missing values in the date column and we’ve already addressed the issue with the missing \"tibble\" values. We need to make sure that every possible combination of date and pkgs exists in the data: any that do not already exist should be added and given a value of 0 in the n column.\nWe can use the complete() function from tidyr to complete the data. We pass in the date and pkgs columns to say which combinations of columns we need to make sure exist. By default, missing combinations are represented by NA, but we can override the fill argument to use 0 instead. \n\nnew_plot_data &lt;- plot_data |&gt;\n  complete(\n    date, pkgs,\n    fill = list(n = 0)\n  )\n\nLet’s take a quick look at our updated data using head() to make sure this has worked: \n\nhead(new_plot_data, n = 8)\n\n# A tibble: 8 × 3\n  date       pkgs        n\n  &lt;date&gt;     &lt;fct&gt;   &lt;int&gt;\n1 2023-01-03 ggplot2    24\n2 2023-01-03 dplyr       9\n3 2023-01-03 readr       2\n4 2023-01-03 stringr     0\n5 2023-01-03 tidyr       3\n6 2023-01-03 purrr       0\n7 2023-01-03 forcats     0\n8 2023-01-03 tibble      0\n\n\nWe can see that there are now quite a few 0 values included in the n column. Notice that \"tibble\" is now explicitly included as well, with 0 in the n column for all observations. This is because, by default, complete() uses all levels of the factor even if they aren’t observed in the data.\nNow we need to update the data that is used in our basic_plot. We could simply edit (or copy and paste) the code from above and substitute plot_data for new_plot_data. But we can alternatively use the %+% operator.\nThe %+% operator allows you to replace the current default data frame on an existing plot. We start with our existing basic_plot, and then use %+% to set new_plot_data as the data used in the plot.\n\nbasic_plot &lt;- basic_plot %+% new_plot_data\nbasic_plot\n\n\n\n\n\n\nFigure 10.5: Faceted area charts showing package use over time for each of the 8 core tidyverse packages, with facets ordered from most to least use. The ordering now looks correct.\n\n\n\n\nNotice that the warning message has now disappeared.",
    "crumbs": [
      "Working with images",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R packages: using images for custom facet labels</span>"
    ]
  },
  {
    "objectID": "r-packages.html#advanced-styling",
    "href": "r-packages.html#advanced-styling",
    "title": "10  R packages: using images for custom facet labels",
    "section": "\n10.4 Advanced styling",
    "text": "10.4 Advanced styling\nNow that we have a first draft of the plot, it’s time to work on polishing it. We’ll make some adjustments to the colors, fonts, text, scales, and themes - before we move on to editing the facets labels to create a visualization like Figure 10.3.\n\n10.4.1 Colors\nLet’s go for a dark theme for our plot this time. We’ll choose a dark gray for the background color, and white for the text to ensure sufficient contrast. \n\nbg_col &lt;- \"#3A3B3C\"\ntext_col &lt;- \"white\"\n\nLet’s also define a color palette that we’ll use for the fill color of the area charts. As we did in Chapter 6, we’ll use one of the palettes in rcartocolor (Nowosad 2018). Again, similar to Chapter 6, to avoid the gray color, we ask for one more color than we need and then throw away the gray color. We have 8 categories in our plot, so we ask for 9 colors using the carto_pal() function and then extract only the first 8. We’ll use the \"Bold\" palette here. \nTo keep a more consistent color theme in the plot, we define our highlight color variable, highlight_col, to be the first color in our chosen color palette.\n\ncol_palette &lt;- carto_pal(\n  length(core_tidyverse) + 1, \"Bold\"\n)[1:length(core_tidyverse)]\nhighlight_col &lt;- col_palette[1]\n\nWe can then pass this col_palette vector into scale_fill_manual() function to apply the colors to our plot: \n\ncol_plot &lt;- basic_plot +\n  scale_fill_manual(\n    values = col_palette\n  )\ncol_plot\n\n\n\n\n\n\nFigure 10.6: Faceted area charts showing package use over time for each of the 8 core tidyverse packages. Each area chart is colored using a different color from the rcartocolor package.\n\n\n\n\n\n10.4.2 Text and fonts\nSimilar to Chapter 2, since code is the subject of the visualization, we might want to choose a typeface that’s consistent with that theme. Here we’ll use Source Code Pro, a monospace typeface originally designed specifically for coding environments. It’s loaded into R using font_add_google() from sysfonts.\nIn this chapter, we’ll use the same typeface for the title and body text so we only need to define one variable, body_font. \n\nfont_add_google(\n  name = \"Source Code Pro\",\n  family = \"source\"\n)\nshowtext_auto()\nshowtext_opts(dpi = 300)\nbody_font &lt;- \"source\"\n\nAs we’ve done in previous chapters, we’ll use the social_caption() function we defined in Chapter 7 to create a caption containing Font Awesome icons with social media handles: \n\nsocial &lt;- social_caption(\n  icon_color = highlight_col,\n  font_color = text_col,\n  font_family = body_font\n)\n\nThe subtitle includes a quote from the tidyverse website, so we’ll format it in italics using *. Package names are formatted in bold with **. We also use the source_caption() function we defined in Chapter 6 to create a caption with information about the data source, combined with the social icons to attribute the graphic. \n\ntitle &lt;- \"How many times did I use **tidyverse** packages for TidyTuesday?\"\nst &lt;- \"The **tidyverse** is a collection of open source R packages that *share an underlying design philosophy, grammar, and data structures*. Of the 8 core **tidyverse** packages, **ggplot2** was my most used package for TidyTuesday visualizations in 2023.\"\nsource_cap &lt;- source_caption(\n  source = \"github.com/nrennie/tidytuesday\",\n  graphic = social,\n  sep = \"&lt;br&gt;\"\n)\n\nWe also join together the subtitle text with the data and graphic source information using paste0() (although you could use glue() instead). \n\ncap &lt;- paste0(st, \"&lt;br&gt;\", source_cap)\n\nWe can then pass this text into the labs() function to apply it to our plot. We also set x = \"\" to remove the x-axis text, and define a more informative y-axis title. \n\ntext_plot &lt;- col_plot +\n  labs(\n    title = title,\n    subtitle = cap,\n    x = \"\",\n    y = \"Number of package calls\"\n  )\n\n\n\n\n\n\n\nTip 10.4: Removing axis titles\n\n\n\nThere are multiple different ways to remove the axis labels. You can set x = \"\" as we’ve done here, or x = NULL. You can also set axis.text.x = element_blank() inside theme() to remove the text. \n\n\n\n10.4.3 Adjusting scales and themes\nWe can adjust the x- and y- axes labeling to deal with the over-crowding of the labels. By default, labels have been added on each facet, at every three months. Although the data only covers 2023, ggplot2 also extends the x-axis to cover the beginning of 2024. We can adjust the limits and breaks of the x-axis scale to show only 2023, and have fewer labels. Since the values on the x-axis are dates, we use scale_x_date() to make the adjustments. This also means that the values we pass into the breaks and limits arguments of scale_x_date() should be dates, and so we again make use of ymd() from lubridate. We set the x-axis limits to be from January 1 to December 31 of 2023, and add labels on the first of January and July. \nFor the y-axis, we choose nice limits and breaks - setting the limits to between 0 and 150, with breaks every 50. To remove the excess space around the edge of each facet plot, we also set expand = FALSE in coord_cartesian(). \n\nlimits_plot &lt;- text_plot +\n  scale_x_date(\n    limits = ymd(c(\"20230101\", \"20231231\")),\n    breaks = ymd(c(\"20230101\", \"20230701\")),\n    labels = c(\"Jan\", \"Jul\")\n  ) +\n  scale_y_continuous(\n    limits = c(0, 150),\n    breaks = c(0, 50, 100, 150)\n  ) +\n  coord_cartesian(expand = FALSE)\nlimits_plot\n\n\n\n\n\n\nFigure 10.7: Faceted area charts showing package use over time for each of the 8 core tidyverse packages. A title and subtitle has been added but runs of the page. However, the x-axis labels no longer overlap.\n\n\n\n\nLet’s edit the arguments of theme() to finalise our plot. There’s a fairly large number of adjustments to make, so we’ll do them in two stages. \nWe’ll start by setting the default font family and base font size in the text argument through element_text(). We also remove the legend and add a little bit of space around the edges of the plot using the margin() function. \nWe then edit the plot.background and panel.background to have the background color we defined earlier (as bg_col) by using the fill and color arguments in element_rect(). We also do the same for the facet label background which is controlled by the strip.background argument. Although we’re planning to replace the facet labels with images, for now we’ll format them with bold text in our preferred color. The spacing between the facets is controlled by the panel.spacing argument. \n\ninit_theme_plot &lt;- limits_plot +\n  theme(\n    text = element_text(family = body_font, size = 6),\n    legend.position = \"none\",\n    plot.margin = margin(5, 10, 5, 10),\n    # plot background\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    # facet strip text and background\n    strip.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    strip.text = element_text(\n      face = \"bold\",\n      color = text_col\n    ),\n    panel.spacing = unit(0.5, \"lines\")\n  )\n\nOur final adjustments include specifying that we’re using ggtext for the title and subtitle to allow the HTML and Markdown text to be processed correctly. We do this by using element_textbox_simple() from ggtext in the plot.title and plot.subtitle arguments, where we also set the font color, left-align it, and add a little padding around the edges. The title text is made slightly larger than normal by using the rel() function in size. Setting plot.title.position = \"plot\" means that the title and subtitle text is aligned with the edge of the whole plot, rather than the edge of the first facet plot. This gives a cleaner looker and avoids extra white created due to the width of the y-axis text. \nWe also make sure that the x- and y-axes labels and title are the correct color using element_text(). Finally, the grid lines are made thinner and semi-transparent using the color and linewidth arguments in element_line(). The minor grid lines are made a little bit more transparent than the major grid lines. \n\ntheme_plot &lt;- init_theme_plot +\n  theme(\n    # title and subtitle text\n    plot.title.position = \"plot\",\n    plot.title = element_textbox_simple(\n      color = text_col,\n      hjust = 0,\n      halign = 0,\n      margin = margin(b = 5, t = 5),\n      face = \"bold\",\n      size = rel(1.4)\n    ),\n    plot.subtitle = element_textbox_simple(\n      color = text_col,\n      hjust = 0,\n      halign = 0,\n      margin = margin(b = 5, t = 0)\n    ),\n    # axes styling and grid lines\n    axis.text = element_text(\n      color = text_col\n    ),\n    axis.title = element_text(\n      color = text_col\n    ),\n    axis.ticks = element_blank(),\n    panel.grid.major = element_line(\n      color = alpha(text_col, 0.3),\n      linewidth = 0.2\n    ),\n    panel.grid.minor = element_line(\n      color = alpha(text_col, 0.1),\n      linewidth = 0.2\n    )\n  )\ntheme_plot\n\n\n\n\n\n\nFigure 10.8: Faceted area charts showing package use over time for each of the 8 core tidyverse packages. The plot has a dark background, and white text (which no longer exceeds the plot area).\n\n\n\n\nThis visualization is perfectly fine as it is, but we can still edit the facet labels to use hex stickers instead of text labels, as we proposed in Figure 10.3.\n\n10.4.4 Using images as facet labels\nAs we discussed in Chapter 9, packages such as cowplot (C. O. Wilke 2024), egg (Auguie 2019), patchwork (Pedersen 2024), and ggimage (Yu 2023) can all be used to plot images. Here, we want to use images for the facet labels, which lie outside of the plot panel. There are several good options for overlaying elements outside of the main plot area. The inset_element() function from patchwork can add elements on top of existing plots (we’ll see an example in Chapter 12). Similarly,the draw_image() function from cowplot simplifies the process of combining plots and images. However, to edit the facet labels we don’t actually need any additional packages beyond the ones we’ve already used to make the plot. \nWe’ve used the ggtext package (C. O. Wilke and Wiernik 2022) many times already to add styling through the use of both Markdown and HTML syntax. For example, we added lines breaks using &lt;br&gt; and colored text using &lt;span&gt;&lt;/span&gt;. The &lt;img&gt; tag is used to add images in HTML. So let’s use that in combination with ggtext to format the facet labels!\nBefore we get started, we need to get some images! The hex stickers for many R packages can be found at github.com/rstudio/hex-stickers. For each of the 8 packages included in the plot, we can download the relevant hex sticker and save it somewhere sensible. Here, we’ll save each image as a PNG file and the name of the file is the same as the name of the package e.g. the hex sticker for dplyr is saved as dplyr.png (RStudio 2020a). To keep our directories looking clean and tidy, we might choose to save them in a folder. Here, we’ll save them in a nested folder: images/hex/. This means the (relative) file path for our dplyr hex sticker is images/hex/dplyr.png. This is what we want to pass in as the image source in the &lt;img&gt; HTML tag for the dplyr facet label.\nThis means we need to make two edits to our data:\n\nincluding &lt;img&gt; tags in the pkgs column that is used as the faceting variable.\nincluding &lt;img&gt; tags in the factor levels of the pkgs column to keep the correct ordering.\n\nLet’s start with the factor levels. Currently, the factor levels are just the package names. Luckily, we’ve been smart enough to save the images with the package name as the file name. This means we can use glue() from the glue package to stick together the package names with the HTML code.\nLet’s first extract the factor levels of the pkgs column, and save it as a variable called pkgs_levels. We then append these names to the end of the image file path, to create a new vector for the factor levels: \n\npkgs_levels &lt;- levels(new_plot_data$pkgs)\nnew_levels &lt;- glue(\n  \"&lt;img src='images/hex/{pkgs_levels}.png'&gt;\"\n)\n\nWe can also control how the images appear within the &lt;img&gt; tag (to some extent). For example, we can set the width of the image (this will take a little bit of trial and error!). Unfortunately, the hjust and halign arguments don’t seem to fully center the image within the facet label area. Instead, we can use a slightly hacky solution and add some blank space to the left hand side. In HTML, &nbsp; can be used to add a (non-breaking) space. Again, a little bit of trial and error is needed to figure out how many spaces we need to add.\n\nnew_levels &lt;- glue(\n  \"&nbsp;&nbsp;&nbsp;&nbsp;&lt;img src='images/hex/{pkgs_levels}.png' width='20'&gt;\"\n)\n\nNow we need to do the same thing to the pkgs column. It’s important that we overwrite the pkgs column here rather than making an entirely new column. This means that we can use the %+% operator to update the data and ggplot2 will still be able to find the correct variable to facet by. We again use glue() to add the pkgs column into HTML &lt;img&gt; tags - being very careful to make sure that the new column values match exactly to the factor levels we defined in new_levels. This allows us to then apply these factor levels using mutate() to make sure the ordering of the packages from most to least used in retained. \n\nplot_img_data &lt;- new_plot_data |&gt;\n  mutate(\n    pkgs = glue(\"&nbsp;&nbsp;&nbsp;&nbsp;&lt;img src='images/hex/{pkgs}.png' width='20'&gt;\")\n  ) |&gt;\n  mutate(\n    pkgs = factor(pkgs, levels = new_levels)\n  )\n\nAs we did earlier, let’s update the data to use our new plot_img_data using the %+% operator:\n\nimg_plot &lt;- theme_plot %+% plot_img_data\n\nWe also need to tell ggplot2 that the facet labels are using HTML tags, just as we’ve done with the caption. We edit the theme() function further and update the styling for strip.text.x. We again use element_textbox_simple() from ggtext, and set hjust and halign both to 0.5. \n\nimg_plot +\n  theme(\n    strip.text.x = element_textbox_simple(\n      hjust = 0.5,\n      halign = 0.5\n    )\n  )\n\n\n\n\n\n\nFigure 10.9: Faceted area charts showing package use over time for each of the 8 core tidyverse packages. Hex stickers have replaced the text labels on the facets.\n\n\n\n\nLastly, use ggsave() to save a copy as a PNG file: \n\nggsave(\n  filename = \"r-packages.png\",\n  width = 5,\n  height = 2.5\n)\n\n\n\n\n\n\n\nTip 10.5: Facet label images using marquee\n\n\n\nYou can do a very similar thing using the marquee package (Pedersen and Mitáš 2024) instead of ggtext. The images can be added to pkgs using standard Markdown syntax instead of HTML tags: \n\nplot_img_data &lt;- new_plot_data |&gt;\n  mutate(\n    pkgs = glue(\"![](images/hex/{pkgs}.png)\")\n  )\n\nRemember that you’d also need to update the factor levels and the data used in the plot. You’d then adjust the theme to use element_marquee() to process the Markdown syntax: \n\nlibrary(marquee)\nimg_plot +\n  theme(\n    strip.text.x = element_marquee(\n      hjust = 0.5,\n      width = 1\n    )\n  )\n\nHowever, controlling the sizing and placement of the images is (at the time of writing) a little bit more difficult with marquee.",
    "crumbs": [
      "Working with images",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R packages: using images for custom facet labels</span>"
    ]
  },
  {
    "objectID": "r-packages.html#reflection",
    "href": "r-packages.html#reflection",
    "title": "10  R packages: using images for custom facet labels",
    "section": "\n10.5 Reflection",
    "text": "10.5 Reflection\nOverall, this plot is very effective - it clearly shows the differing levels of R package use whilst still being eye-catching. However, there are still a few improvements that can be made. Other than for ggplot2 and dplyr, it’s quite hard to read the values as they are very small compared to the height of the y-axis. This is due to the high usage of ggplot2 on a single occasion. Maybe using a logarithmic transformation of the y-axis would make it easier to see the very small values - although log transformations do have their own downsides in terms of interpretability.\nThe use of color could also be improved here. The colors are used to differentiate the different packages, and so don’t provide any further information not already given by the facet labels - similar to Chapter 3. A single color for all area plots would provide the same amount of information, but look a little bit less distracting. If we did still want to use different colors, we may consider matching them more closely to the colors in the hex sticker images. For example, the green in the stringr hex sticker image is quite similar to the green used in the dplyr area chart - this is currently a little bit distracting. \nEach plot created during the process of developing the original version of this visualization was captured using camcorder, and is shown in the gif below. If you’d like to learn more about how camcorder can be used in the data visualization process, see Section 14.1.",
    "crumbs": [
      "Working with images",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R packages: using images for custom facet labels</span>"
    ]
  },
  {
    "objectID": "r-packages.html#exercises",
    "href": "r-packages.html#exercises",
    "title": "10  R packages: using images for custom facet labels",
    "section": "\n10.6 Exercises",
    "text": "10.6 Exercises\nIn July 2024, TidyTuesday used the funspotr package to look at how David Robinson has explored TidyTuesday data in his YouTube screencasts. You can load the data with:\n\nlibrary(tidytuesdayR)\ntuesdata &lt;- tt_load(\"2024-07-09\")\ndrob_funs &lt;- tuesdata$drob_funs\n\n\nRecreate the visualization from this chapter for this new dataset. Are the patterns similar?\nChoose a more appropriate color scheme for the area charts.\n\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Working with images",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R packages: using images for custom facet labels</span>"
    ]
  },
  {
    "objectID": "spatial.html",
    "href": "spatial.html",
    "title": "Visualizing spatial data",
    "section": "",
    "text": "Spatial data refers to information about the physical location or shape of objects, and their relationships to each other. Examples of spatial data include latitude and longitude of a place; the boundary lines of a region; or a grid showing the elevation of an area.\n\nChapter 11  Doctors across the world: making maps with ggplot2 will discuss extracting country boundary data using the maps package, and then plotting choropleth maps with ggplot2 to visualize the value of a variable for each country.\nChapter 12  Time zones: spatial data and mapping with sf introduces you to the sf package for manipulating spatial data in R, and shows you how to plot geographic coordinate data. This chapter also covers co-ordinate systems.\nChapter 13  US House elections: geography on a grid with geofacet describes creating multiple area charts, each for a different region, and then arranging them in a grid that represents the underlying geography using the geofacet package.\n\nIn this section, you’ll also learn how to create and arrange custom legends using patchwork, as well as repurposing elements of ggplot2 charts to create more aesthetically pleasing titles.\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Visualizing spatial data"
    ]
  },
  {
    "objectID": "doctors.html",
    "href": "doctors.html",
    "title": "11  Doctors across the world: making maps with ggplot2",
    "section": "",
    "text": "11.1 Data\nIn this chapter we’ll learn how to identify open data sources, make maps with ggplot2 using data from the maps package, and create title panels with an unorthodox use of facets.\nPackages required in this chapter:\nWe’ll visualize data on Medical doctors per 1,000 people using the dataset from the Our World in Data website (ourworldindata.org) (Our World in Data 2019). The aim of Our World in Data, according to their website, is to publish the research and data to make progress against the world’s largest problems. There are datasets on everything from energy and environment, to poverty and education, to name a few. Their website also has many examples of beautiful, effective data visualizations if you’re ever looking for inspiration.\nYou can either download the CSV file from ourworldindata.org/grapher/physicians-per-1000-people manually or you can do as we did in Chapter 6, and download it directly into R using the URL. Simply pass the URL into the read_csv() function from **readr``** (orread.csv()` from base R if you prefer). As in Chapter 6, we split the URL into the base URL and the specific page of interest to make it easier to later load in other datasets if we choose to.\nbase_url &lt;- \"https://ourworldindata.org/grapher/\"\nurl &lt;- paste0(\n  base_url,\n  \"physicians-per-1000-people.csv\"\n)\ndoctors &lt;- read_csv(url)",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Doctors across the world: making maps with **`ggplot2`**</span>"
    ]
  },
  {
    "objectID": "doctors.html#data",
    "href": "doctors.html#data",
    "title": "11  Doctors across the world: making maps with ggplot2",
    "section": "",
    "text": "Tip 11.1: Connecting to Our World in Data via R\n\n\n\nThe owidapi R package (Scheuch 2025) provides an R interface to the Our World in Data website, allowing you to search and download data in R without having to navigate through the website. However, it’s not much less complicated than passing in the URL to read_csv(). \n\nlibrary(owidapi)\ndoctors &lt;- owid_get(\"physicians-per-1000-people\")\n\nPreviously the owidR package (York 2023) also provided a similar interface, but at the time of writing, it hasn’t been updated to use the newest Our World in Data API which results in errors when accessing data. \n\n\n\n\n\n\n\n\nTip 11.2: Saving data for later use\n\n\n\nYou may choose to save a copy of doctors as a CSV file for later use by using write.csv() or write_csv() from readr``**. This means you don't have to download the data each time you open R and don't have to worry about the data updating when you're halfway through your analysis. You can then later read in the data withread.csvorread_csv()from **readr``. \n\n\n\n\n\n\n\n\nTip 11.3: Finding sources of data\n\n\n\nThere’s often a Bring Your Own Data week each year of TidyTuesday (R4DS Online Learning Community 2023), where participants are encouraged to source their own data. Some use their own data - visualizing how many times they’ve gone for a run over the past year, or recreating GitHub contributions graphs. Others choose to find and visualize other sources of data. So where do you find publicly available data?\nThere are many open sources of data, covering a wide range of topics, time frames, and regions across the world. Some government organisations have data portals, some companies have APIs you can access, some academic papers have accompanying data, or the Google dataset search engine (datasetsearch.research.google.com) might also help you to identify data you’re interested in.",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Doctors across the world: making maps with **`ggplot2`**</span>"
    ]
  },
  {
    "objectID": "doctors.html#exploratory-work",
    "href": "doctors.html#exploratory-work",
    "title": "11  Doctors across the world: making maps with ggplot2",
    "section": "\n11.2 Exploratory work",
    "text": "11.2 Exploratory work\nLet’s start by exploring the data to see if there are interesting patterns that can be visualized.\n\n11.2.1 Data exploration\nThe data is reasonably small, containing only 4 columns: Entity (denoting the country or a larger region), Code (the country code), Year (year the data relates to), and Physicians (per 1,000 people). The 4939 rows of data cover 222 different regions (some aggregates of others), with data covering 62 years.\n\nhead(doctors)\n\n# A tibble: 6 × 4\n  Entity      Code   Year `Physicians (per 1,000 people)`\n  &lt;chr&gt;       &lt;chr&gt; &lt;dbl&gt;                           &lt;dbl&gt;\n1 Afghanistan AFG    1960                           0.035\n2 Afghanistan AFG    1965                           0.063\n3 Afghanistan AFG    1970                           0.065\n4 Afghanistan AFG    1981                           0.077\n5 Afghanistan AFG    1986                           0.183\n6 Afghanistan AFG    1987                           0.179\n\n\nOften when there’s a time component to data, one of the most obvious patterns to consider is how other variables change over time. Although line charts are probably most common for visualizing time series data, a simple scatter plot can also indicate if there’s a general trend in the data. Sometimes scatter plots also look cleaner than line charts - a line for each region in this chart would very much look like a spaghetti chart as discussed in Chapter 3. \n\nplot(\n  x = doctors$Year,\n  y = doctors$`Physicians (per 1,000 people)`,\n  xlab = \"Year\",\n  ylab = \"Physicians per 1,000 people\"\n)\n\n\n\n\n\n\nFigure 11.1: Simple non-styled scatterplot of number of physicians per 1,000 people over time showing an increasing trend, created in base R.\n\n\n\n\nThere seems to be a general increasing trend between 1960 and 2020. The other important component of this data that we may want to explore is the spatial aspect - is there a pattern over space as well as over time?\n\n11.2.2 Exploratory sketches\nThe most common approach to visualizing spatial data is, of course, to plot it on a map. If the aim is to show how a variable changes across different countries (or other defined regions), it’s very common to color the country based on the value of the variable. These are often termed choropleth maps.\n\n\n\n\n\nFigure 11.2: Initial sketch of a map of the world, showing title enclosed in a box and legend positioned horizontally in the bottom right\n\n\nAt this point, it’s also often a good time to start thinking about the orientation and aspect ratio of the plot you’ll create. This will depend a lot of where the plot is going to end up - for example, plots in a single column academic article will typically be landscape graphs. The choice of orientation and aspect ratio can also affect how clearly your data is displayed - choosing a very wide plot for time series data can stretch the series and obliterate any appearance of trend. With maps, you’re a little bit more constrained because there is already an underlying aspect ratio in the plot you’re creating. For this map, a landscape orientation with a 6x4 aspect ratio should work reasonably well.",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Doctors across the world: making maps with **`ggplot2`**</span>"
    ]
  },
  {
    "objectID": "doctors.html#preparing-a-plot",
    "href": "doctors.html#preparing-a-plot",
    "title": "11  Doctors across the world: making maps with ggplot2",
    "section": "\n11.3 Preparing a plot",
    "text": "11.3 Preparing a plot\nTo create the map sketched out in Figure 11.2, we need to do two things (i) decide which data to plot: which regions, and which years; and (ii) source some spatial data beyond just region names and country codes.\n\n11.3.1 Data wrangling\nSince this data is already fairly tidy, there isn’t too much data wrangling to be done. The only processing we really need to do is getting rid of the data we don’t need, and renaming a couple of columns to make them easier to work with. We can use the rename() function from dplyr to rename the Entity column to region (for reasons that will become clear in the next paragraph!). We also rename the Physicians (per 1,000 people) column to doctors to make it easier to work with, and rename Year to year for consistency. The data has multiple entries for each country, spanning different years. We could make an animated map to show how the number of doctors is changing over time, but for now we’ll keep it simple with a static map showing a snapshot at one point in time. However, there’s a bit of a problem. If you inspect the data, you’ll see that not every country has an entry for each year - let’s use the most recent data available for each country. For each region, we keep the row with only the most recent year using a combination of group_by() and slice_max() from {dplyr}.\n\ndoctors &lt;- doctors |&gt;\n  rename(\n    year = Year,\n    region = Entity,\n    doctors = `Physicians (per 1,000 people)`\n  ) |&gt;\n  select(region, year, doctors) |&gt;\n  group_by(region) |&gt;\n  slice_max(year) |&gt;\n  ungroup()\n\nTo plot this data on a world map, we also need data for the country borders. Luckily, the map_data() function built into ggplot2 can help us with that! This function takes data from the maps package and turns it into an object you can plot directly with ggplot2.\n\nworld &lt;- map_data(\"world\")\n\nOf course, it’s never quite that straightforward. We need to join the world map data to our doctors data, and to do that we need a column in each data sets to join by - we’ll use the region column. If you try to join these two data sets using the region column, you’ll notice that you end up with some unexpected NA values. So what’s going on?\n\n\n\n\n\n\nTip 11.4: Renaming columns\n\n\n\nYou don’t need to rename columns in your data to be able to join them, but you may find it easier to work with the data after renaming Entity to region to maintain consistency across datasets.\n\n\nThere are two issues here. Firstly, there are more regions in the world data than there are in the doctors data:\n\nlength(unique(world$region))\n\n[1] 252\n\nlength(unique(doctors$region))\n\n[1] 222\n\n\nThis is partly due to the fact that the doctors data has implicitly missing values - if no data is available for a region, no rows exists in the data for that region. It isn’t listed with NA values. Note that there are also some regions in doctors which do not exist in world - for example, the entity \"Upper-middle-income countries\" is listed within doctors.\nSecondly, if you inspect the region names, you’ll see that for some countries, their names are encoded differently. For example, in the world data, the United States is listed as \"USA\" whilst in the doctors data, it’s listed as \"United States\". Here, the easiest thing to do is manually rename the values that differ in one of the datasets. We can use the recode() function from dplyr to do that. Note that recode() has the rather unusual (for the tidyverse) syntax of old_name = new_name:\n\nplot_data &lt;- doctors |&gt;\n  mutate(\n    region =\n      recode(region,\n        \"United Kingdom\" = \"UK\",\n        \"United States\" = \"USA\",\n        \"Democratic Republic of Congo\" = \"Democratic Republic of the Congo\",\n        \"Cote d'Ivoire\" = \"Ivory Coast\",\n        \"Congo\" = \"Republic of Congo\",\n        \"Czechia\" = \"Czech Republic\"\n      )\n  )\n\nThe entries in the region column of doctors that don’t correspond to countries e.g. \"Upper-middle-income countries\" are not values that are required for the map. Therefore a left_join() can be performed, with world on the left - keeping all the countries listed in world and joining only those with a corresponding value in doctors. The remaining countries in world with no match in doctors are listed with NA values. The rows for \"Antarctica\" are filtered out - Antarctica is often given a disproportionate amount of space on world maps (at least those not centered on Antarctica) in the process of projecting a sphere onto a rectangle. \n\nmap_data &lt;- left_join(\n  world,\n  plot_data,\n  by = \"region\"\n) |&gt;\n  filter(region != \"Antarctica\")\n\nNow, we have everything we need to create a simple map.\n\n11.3.2 The first plot\nWe start, as almost always, with the ggplot() function, and pass in the data and aesthetic mappings that will apply to the whole plot. The longitude (long) and latitude (lat) are passed to the x and y axes; and we specify that the fill color of each country should be based on the doctors column. We also specify map_id - an aesthetic mapping that isn’t seen as often as the others. This is used to tell geom_map() which column defines each region polygon (not entirely unlike the group aesthetic). Then, we use geom_map() to actually draw the map. \n\n\n\n\n\n\nTip 11.5: Alternatives to geom_map()\n\n\n\nBoth geom_sf() and geom_polygon() can be used as an alternative to geom_map() for creating maps within ggplot2.\nHowever, they expect different formats of data. The geom_sf() function expects an sf object, in contrast to geom_map() which works with coordinates as columns in a data.frame or tibble. For examples of using geom_sf(), see Chapter 12. \nYou could also use geom_polygon() to plot map_data instead of geom_map(), but it makes it more difficult to project the map in the way we want to. \n\n\n\nbasic_plot &lt;- ggplot(\n  data = map_data,\n  mapping = aes(\n    x = long,\n    y = lat,\n    map_id = region,\n    fill = doctors\n  )\n) +\n  geom_map(map = map_data)\nbasic_plot\n\n\n\n\n\n\nFigure 11.3: Map of the world with countries colored based on number of doctors per 1,000 people. The map looks stretched.\n\n\n\n\nWe now have a simple map that shows our data, but there are several problems with it:\n\nThe map looks as if someone has stretched it vertically, since there’s no map projection specified. Countries are still recognizable, but not quite the right shape.\nThe color palette is not ideal. It’s more intuitive for brighter or lighter colors to represent smaller values, and for darker colors to represent higher values - at least for light colored backgrounds (Schloss et al. 2019). The default gradient color scale in ggplot2 is the opposite way around.\nThere are labels that don’t need to be there (lat and long), and missing labels that should be there (title and subtitle, for example).\n\nSo let’s fix those elements of the initial plot.",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Doctors across the world: making maps with **`ggplot2`**</span>"
    ]
  },
  {
    "objectID": "doctors.html#advanced-styling",
    "href": "doctors.html#advanced-styling",
    "title": "11  Doctors across the world: making maps with ggplot2",
    "section": "\n11.4 Advanced styling",
    "text": "11.4 Advanced styling\nWe’ll start by considering alternative color palettes, then think about what text that should be added, before finalizing the layout.\n\n11.4.1 Colors\nThere are many, many color palette R packages in existence, and even more outside of the R ecosystem. In fact, the paletteer package (Hvitfeldt 2021) is designed to give a common interface to a comprehensive collection of color palettes in R. A popular color palette R package is MetBrewer (Mills 2022) - a collection of color palettes inspired by works of art at the Metropolitan Museum of Art in New York. It has many beautiful palettes, and many that work in traditional data visualizations. You can view all available palettes using display_all(colorblind_only = TRUE). Since doctors is a continuous variable, we’ll look at the sequential palettes only. \nMetBrewer does have functions that interface directly with ggplot2 (such as scale_fill_met_c()) but we’re going to use some of the colors in the palette to also define variables for the highlight and text colors. To get a good range of colors, we extract 20 colors from the \"Hokusai2\" palette. The text_col is the 18th color and highlight_col is the 15th color. A variable containing the background color, bg_col, is also defined.\n\nlibrary(MetBrewer)\ncol_palette &lt;- met.brewer(\"Hokusai2\", n = 20)\ntext_col &lt;- col_palette[18]\nhighlight_col &lt;- col_palette[15]\nbg_col &lt;- \"#EADEDA\"\n\nThese colors can then be passed into scale_fill_gradientn() from ggplot2. The limits of the color scale can also be set. Rather than adding labels for values on the legend, we can add text labels for Fewer doctors and More doctors. These are positioned 0.8 in from the limits of the color scale.\n\ncol_plot &lt;- basic_plot +\n  scale_fill_gradientn(\n    colors = col_palette,\n    limits = c(0, 10),\n    breaks = c(0.8, 9.2),\n    labels = c(\"Fewer doctors\", \"More doctors\")\n  )\ncol_plot\n\n\n\n\n\n\nFigure 11.4: Map of the world with countries colored based on number of doctors per 1,000 people, showing a different color scheme.\n\n\n\n\n\n11.4.2 Text and fonts\nAs in previous chapters, fonts can be defined using the sysfonts and showtext packages. Here, the Roboto typeface is loaded through Google Fonts for the main font used, and Roboto Slab is loaded for use in the title. \n\nfont_add_google(name = \"Roboto\")\nfont_add_google(name = \"Roboto Slab\")\nshowtext_auto()\nshowtext_opts(dpi = 300)\nbody_font &lt;- \"Roboto\"\ntitle_font &lt;- \"Roboto Slab\"\n\nNow, we can define some text for the title, subtitle, and caption. As in previous chapters, we’ll be using ggtext for formatting which means we can use HTML syntax to add line breaks.\n\ntitle &lt;- \"Doctors across the world\"\nsubtitle &lt;- \"This map show the number of doctors per thousand people, revealing which countries* may be more likely to struggle in providing care for a population.&lt;br&gt;&lt;br&gt;*using the most recent available data for each country.\"\n\nLet’s create a custom caption that includes Font Awesome icons, as described in Chapter 7, which is passed into the source_caption() function we defined in Chapter 6: \n\nsocial &lt;- social_caption(\n  icon_color = highlight_col,\n  font_color = text_col,\n  font_family = body_font\n)\ncaption &lt;- source_caption(\n  source = \"Our World in Data\",\n  sep = \"&lt;br&gt;\",\n  graphic = social\n)\n\nThese text variables can then be passed into the labs() function. \n\ntext_plot &lt;- col_plot +\n  labs(\n    title = title,\n    subtitle = subtitle,\n    caption = caption\n  )\n\nTo apply our chosen typefaces to the plot, the theme elements need to be adjusted. \n\n11.4.3 Adjusting themes\nWe start by adding theme_void() from ggplot2. The theme_void function removes all theme elements - including grid lines, axis labels, and the background. The legend and specified titles and subtitles remain. This theme is especially useful for maps where it’s more common for axis lines, axis titles, and grid lines not to be displayed. Like other built-in theme options, we can still set the base_size and base_family to set the default size and typeface for any text that is displayed. \nWe also set the plot.title, plot.subtitle, and plot.caption to use element_textbox_simple from ggtext to allow the markdown syntax and automatically wrap long subtitles as we’ve seen in previous chapters.\n\ntext_plot +\n  theme_void(base_size = 8, base_family = body_font) +\n  theme(\n    plot.margin = margin(10, 10, 10, 10),\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    plot.title = element_textbox_simple(\n      color = text_col,\n      family = title_font\n    ),\n    plot.subtitle = element_textbox_simple(\n      color = text_col\n    ),\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col\n    )\n  )\n\n\n\n\n\n\nFigure 11.5: Map of the world with countries colored based on number of doctors per 1,000 people. The map looks stretched, and the fonts in the title and subtitle are close together.\n\n\n\n\nOne of the aesthetic design choices we might want to make here, is to include the title within a banner with a different colored background. Although this might seem like a fairly straightforward thing to want, it’s actually not that easy with ggplot2. There are some solutions to the problem using packages like cowplot (C. O. Wilke 2024) or grid (R Core Team 2024) to draw rectangles and text. But we can do this within ggplot2 - by using facets in a way they were not designed to be used. Let’s start by adding an additional column called label to map_data that contains the title (for every row in the data): \n\nmap_data$label &lt;- title\n\n\n\n\n\n\n\nTip 11.6: Choosing a column name\n\n\n\nThis column does not need to be called label, you can use any name you choose as long as it’s not an existing column.\nYou could also pass the title directly into facet_wrap() instead of creating a new column:\n\nfacet_wrap(~\"Doctors across the world\")\n\n\n\nThen we can use facet_wrap() and facet across the label column. Since there’s only one value of label in the data, this just adds the title as strip text at the top of the plot. While we’re here, let’s make the country outlines in the map the same color as the background, and make the lines a little bit thicker. \n\nstyled_plot &lt;- ggplot(\n  data = map_data,\n  mapping = aes(\n    long,\n    lat,\n    map_id = region,\n    fill = doctors\n  )\n) +\n  geom_map(\n    map = map_data,\n    color = bg_col,\n    linewidth = 0.3\n  ) +\n  scale_fill_gradientn(\n    colors = col_palette,\n    limits = c(0, 10),\n    breaks = c(0.8, 9.2),\n    labels = c(\"Fewer doctors\", \"More doctors\")\n  ) +\n  labs(\n    title = title,\n    subtitle = subtitle,\n    caption = caption\n  ) +\n  facet_wrap(~label) +\n  theme_void(base_size = 7, base_family = body_font) +\n  theme(\n    plot.margin = margin(10, 10, 10, 10),\n    plot.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    panel.background = element_rect(\n      fill = bg_col, color = bg_col\n    ),\n    plot.title = element_textbox_simple(\n      color = text_col,\n      family = title_font,\n      lineheight = 0.5\n    ),\n    plot.subtitle = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.5\n    ),\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col,\n      lineheight = 0.5\n    ),\n    strip.background = element_rect(\n      fill = highlight_col, color = highlight_col\n    )\n  )\nstyled_plot\n\n\n\n\n\n\nFigure 11.6: Map of the world with duplicated title in the facet strip text, with dark text against a dark blue background.\n\n\n\n\nIt’s obvious that there are some issues with this plot now that the strip text contains the title:\n\nThere is a duplicate title set using labs(), and the strip.text title is too dark to read against the blue background.\nThe subtitle is above the title.\nThe map still appears stretched.\nThe legend is taking up quite a lot of space, and the white ticks in the colorbar are distracting.\n\nTo solve the first two problems, the title and subtitle arguments of labs() can be set to NULL to remove them from the plot. Instead, the tag argument in labs() can be used to set the subtitle. The nice thing about using tag is the plot.tag.position argument within theme() which allows you to position the text anywhere on the plot. The strip.text and plot.tag arguments of theme should also be set using element_textbox_simple() from ggtext to allow the text to be styled as we wish. The top, left, and right margins of the plot should be set to 0 using plot.margin to make sure that the strip text banner goes to the edge of the plot. \nTo solve the third problem of the map looking stretched, we can apply coord_sf() which applies the World Geodetic System 1984 (WGS84) CRS (coordinate reference system). Chapter 12 discusses coordinate reference systems in more detail. The upper limit of the y axis can also be extended beyond the range of the data to make room for the subtitle added using tag. \n\nstyled_plot2 &lt;- styled_plot +\n  labs(\n    title = NULL, subtitle = NULL, tag = subtitle\n  ) +\n  # add space for the tag (subtitle) text\n  coord_sf(ylim = c(-60, 140)) +\n  theme(\n    # move and format the tag (subtitle) text\n    plot.margin = margin(0, 0, 5, 0),\n    plot.tag.position = c(0.015, 0.8),\n    plot.tag = element_textbox_simple(\n      color = text_col,\n      lineheight = 0.6,\n      hjust = 0,\n      maxwidth = 0.98\n    ),\n    # add margin for caption\n    plot.caption = element_textbox_simple(\n      hjust = 0,\n      color = text_col,\n      margin = margin(l = 5),\n      lineheight = 0.6\n    ),\n    # change title text color\n    strip.text = element_textbox_simple(\n      color = bg_col,\n      family = title_font,\n      margin = margin(7, 5, 7, 5),\n      lineheight = 0.6,\n      size = rel(1.7)\n    )\n  )\n\nNote that the values used in plot.tag.position = c(0.015, 0.8) and the strip.text argument margin = margin(7, 5, 7, 5) took a lot of trial and error to get just right. There’s no magic involved in choosing these values!\nTo solve the final problem of the legend appearance, we can edit the style elements in theme. The legend.title is removed by setting it to a blank element with element_blank(), and the legend text labels are styled with element_text(). \nThe placement of the legend is set through the legend.position, legend.justification.bottom, legend.margin, and legend.direction arguments.\n\n\n\n\n\n\nTip 11.7: Styling guides in ggplot2\n\n\n\nSince version 3.5.0 of ggplot2, you can also style the theme of individual legends from inside the guide_*() functions. Prior to version 3.5.0, legend.position was used to position the legend inside the plot before legend.position.inside and legend.justification.bottom were introduced to allow custom legend positions more easily.\nThe other difference is that legend.ticks = element_blank() can be used to remove the white tick marks inside the colorbar legend. In older versions of ggplot2, guides(fill = guide_colorbar(ticks = FALSE)) would be used instead. \n\n\nThe size of the legend is controlled through the legend.key.width and legend.key.height arguments.\n\nstyled_plot2 +\n  theme(\n    # legend text\n    legend.title = element_blank(),\n    legend.text = element_text(\n      color = text_col,\n      lineheight = 0.5,\n      hjust = 0.5\n    ),\n    # legend size\n    legend.key.width = unit(1.5, \"cm\"),\n    legend.key.height = unit(0.3, \"cm\"),\n    # legend position\n    legend.position = \"bottom\",\n    legend.justification.bottom = \"right\",\n    legend.margin = margin(-5, 5, 0, 0),\n    legend.direction = \"horizontal\",\n    legend.ticks = element_blank()\n  )\n\n\n\n\n\n\nFigure 11.7: Final styled plot showing a map of the world, with title inside a blue banner and a horizontal colorbar legend at the bottom right of the page.\n\n\n\n\nWe can then finally save a copy with ggsave(): \n\nggsave(\n  filename = \"doctors.png\",\n  width = 5,\n  height = 0.67 * 5\n)",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Doctors across the world: making maps with **`ggplot2`**</span>"
    ]
  },
  {
    "objectID": "doctors.html#reflection",
    "href": "doctors.html#reflection",
    "title": "11  Doctors across the world: making maps with ggplot2",
    "section": "\n11.5 Reflection",
    "text": "11.5 Reflection\nThe color scale in Figure 11.7 is quite hard to interpret and the choice was made to use Fewer doctors and More doctors labels instead of values. When the underlying data is simple and easy to interpret, having the values on the legend would add more useful information. The title could probably also be changed to something more informative. \nWhen the data was processed, the choice was made to plot a map showing the values for the most recently available data. This means that for some countries the data is more recent (and therefore perhaps more reliable), whilst for others it’s much older. In fact, running range(doctors$year) shows that the most recent data in the plot is from 2019, whilst the oldest is from 1980 - a gap of almost 40 years! That makes it much harder to accurately compare between countries, and there’s no indication for each country on this map how recent the data is. Readers might end up drawing conclusions that show differences between countries, when actually the difference is between time periods. Showing uncertainty on maps is tricky, and there’s no straightforward solution here. Perhaps setting the colors to a binary scale showing whether the value is above or below average, with the intensity of the color denoting the recentness of the data, is one approach. The Vizumap package (Lucchesi and Kuhnert 2020), which provides functions for visualizing uncertainty on maps, could be used to create a bivariate map showing both the value and how recent it is. Or at least a more detailed explanation about the range of time the data relates to could be included within the subtitle.\nEach plot created during the process of developing the original version of this visualization was captured using camcorder, and is shown in the gif below. If you’d like to learn more about how camcorder can be used in the data visualization process, see Section 14.1.",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Doctors across the world: making maps with **`ggplot2`**</span>"
    ]
  },
  {
    "objectID": "doctors.html#exercises",
    "href": "doctors.html#exercises",
    "title": "11  Doctors across the world: making maps with ggplot2",
    "section": "\n11.6 Exercises",
    "text": "11.6 Exercises\n\nSubset the data to create a map for only the following regions: c(\"France\", \"Spain\", \"Italy\", \"Portugal\", \"Switzerland\"). Do you need to change the limits of the x- and y-axes?\nCan you keep the countries that border these regions on the map, but fill them with a neutral gray color?\n\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Doctors across the world: making maps with **`ggplot2`**</span>"
    ]
  },
  {
    "objectID": "time-zones.html",
    "href": "time-zones.html",
    "title": "12  Time zones: spatial data and mapping with sf",
    "section": "",
    "text": "12.1 Data\nIn this chapter we’ll learn how to obtain map data using rnaturalearth``**, manipulate spatial data using **sf** and plot it with **ggplot2`, and add a custom bar chart legend to a map of the world.\nPackages required in this chapter:\nThe IANA (Internet Assigned Numbers Authority) tz database contains data on the history of local time for different locations around the world (Internet Assigned Numbers Authority 2023). The website states that “each main entry in the database represents a timezone for a set of civil-time clocks that have all agreed since 1970.” Many websites use the data in the IANA tz database to operate.\nThe time zones data was used as a TidyTuesday dataset in March 2023, where the data wrangling code was adapted from code by Davis Vaughan. There are actually four data sets included but we’ll focus on the timezones data for now. We can load the data into R using the tt_load() function from the tidytuesdayR package (Hughes 2022b):\ntuesdata &lt;- tt_load(\"2023-03-28\")\ntimezones &lt;- tuesdata$timezones\nThe data contains information for 4 different variables on 337 time zones. The zone column contains the time zone name; the latitude and longitude columns contain coordinates for the time zones principal location e.g. biggest city; and the comments column contains comments from the original time zone definition file.",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Time zones: spatial data and mapping with **`sf`**</span>"
    ]
  },
  {
    "objectID": "time-zones.html#exploratory-work",
    "href": "time-zones.html#exploratory-work",
    "title": "12  Time zones: spatial data and mapping with sf",
    "section": "\n12.2 Exploratory work",
    "text": "12.2 Exploratory work\nLet’s start by looking at what the timezones data looks like!\n\n12.2.1 Data exploration\nLet’s inspect the first few rows of the data using head(): \n\nhead(timezones)\n\n# A tibble: 6 × 4\n  zone              latitude longitude comments      \n  &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;         \n1 Africa/Abidjan        5.32     -4.03 &lt;NA&gt;          \n2 Africa/Algiers       36.8       3.05 &lt;NA&gt;          \n3 Africa/Bissau        11.8     -15.6  &lt;NA&gt;          \n4 Africa/Cairo         30.0      31.2  &lt;NA&gt;          \n5 Africa/Casablanca    33.6      -7.58 &lt;NA&gt;          \n6 Africa/Ceuta         35.9      -5.32 Ceuta, Melilla\n\n\nThe first thing that jumps out is the comments column which appears to have a lot of missing data. Let’s plot it to confirm, making use of the is.na() function to plot only the counts of missing and non-missing data: \n\nbarplot(table(is.na(timezones$comments)))\n\n\n\n\n\n\nFigure 12.1: A bar chart of the number of missing values in the comments column, where TRUE represents missing.\n\n\n\n\nAlmost 40% of the time zones have no comments associated with them. Inspecting the data further tells us that these comments typically offer clarification or an alternative for the timezone name. Although we could explore how the presence of these comments varies across the globe, we’ll use select() from dplyr to drop the comments column for now since it’s not the most interesting thing to plot in the data.\nThe first column, zone, contains information on the timezone name - it’s typically in the form of \"Continent/City\". To explore the spread of time zones across continents, we need to split this variable into two (or extract just the continent name from the timezone name). We can use separate_wider_delim() from tidyr to create two new columns from the zone column, splitting on the / character. Some of the timezone names have two / in their name e.g. \"America/North_Dakota/New_Salem\" meaning there are too many pieces for two columns. We can tell separate_wider_delim() to merge the last pieces since it still uniquely specifies the location. \n\ntimezones_data &lt;- timezones |&gt;\n  select(-comments) |&gt;\n  separate_wider_delim(\n    cols = zone,\n    delim = \"/\",\n    names = c(\"continent\", \"place\"),\n    too_many = \"merge\"\n  )\n\nNow, we can explore how many time zones there are per continent, again using the barplot() function. In Figure 12.2, we can see that the first part of the time zone names don’t quite map to continents since there are nine values - but they do map onto large geographic regions. \n\nbarplot(table(timezones_data$continent))\n\n\n\n\n\n\nFigure 12.2: A bar chart of the number of defined time zones in each of nine geographic regions.\n\n\n\n\nOf course, when we have coordinate data, the most obvious thing to do is plot those coordinates on a map!\n\n12.2.2 Exploratory sketches\nGiven that we have a latitude and longitude data for the principal locations (usually largest cities) within each time zone, the first map idea that springs to mind is a world map with the time zone locations plotted as points:\n\n\n\n\n\nFigure 12.3: Initial sketch of time zone locations as points on a world map.\n\n\nWe could color the points based on the geographic region (continent) they belong to. As we’ve already seen, if we do this in ggplot2, coloring based on a variable automatically adds a legend to the chart. Instead of the traditional legend using colored squares next to the category label, we could add our own custom legend - using a bar chart. The bars will show the number of time zones per region, and be colored in the same way as the points on the map. This bar chart legend below the map doesn’t take up any more space than a traditional legend, but it does add information (or at least makes the existing information quicker and easier to process).\n\n\n\n\n\nFigure 12.4: Initial sketch of points on a world map with text in the lower left corner, and a bar chart as a legend in the bottom right.\n\n\nA title and subtitle can be added below the map, next to the bar chart. Positioning the text in a more square layout (rather than a long string of text across the top of the chart) makes it easier to read, and helps to prevent the visualization from becoming very wide and short.",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Time zones: spatial data and mapping with **`sf`**</span>"
    ]
  },
  {
    "objectID": "time-zones.html#preparing-a-plot",
    "href": "time-zones.html#preparing-a-plot",
    "title": "12  Time zones: spatial data and mapping with sf",
    "section": "\n12.3 Preparing a plot",
    "text": "12.3 Preparing a plot\nTo make our plot, we need to get some background map data and understand how to work with multiple spatial data files at once.\n\n12.3.1 Maps with rnaturalearth\n\nBefore we start plotting points on a map, we need a map of the world that we can use as a background to show the underlying countries. In Chapter 11, we used map_data from ggplot2. Here, let’s look at an alternative using the rnaturalearth package (Massicotte and South 2023).\nThe rnaturalearth package allows you to interact with Natural Earth map data. You can download polygons for different geographic regions using the ne_countries() function. The default is to download data for all countries: \n\nworld &lt;- ne_countries()\n\n\n\n\n\n\n\nTip 12.1: Polygons for a specific country with rnaturalearth\n\n\n\nIf you wanted only the polygon(s) for a specific country or region, you can specify the country argument:\n\nuk &lt;- ne_countries(\n  country = \"united kingdom\"\n)\n\nFor specified countries, the ne_states() function provides administrative level 1 polygons e.g. major within-country regions such as states.\n\n\nThe default output from the ne_countries() function is an sf object - where sf stands for Simple Features. Simple Features is a standardized model for representing geometric objects such as points, lines, and polygons in spatial databases and geographic information systems (GIS). The sf package (Pebesma 2018) implements simple features in R, allowing simple features to be represented as a data.frame (or tibble). \nSince sf objects in R can be thought of as fancy data.frames, this means they can be plotted using ggplot2. In fact, ggplot2 has built-in capabilities for plotting sf objects - through the geom_sf() function. That means that we can build maps from sf objects, in the same we we build other types of charts: by starting with the ggplot() function, and then layering on the geom_sf() geometry. \n\nbg_map &lt;- ggplot() +\n  geom_sf(data = world)\nbg_map\n\n\n\n\n\n\nFigure 12.5: Map of the world showing country outlines, with the default gray background.\n\n\n\n\nYou’ll notice that there’s one key difference - there’s no aesthetic mapping using the aes() function. Since the spatial coordinates are embedded within the sf object, there’s no need to explicitly map the x and y variables. The geom_sf() function can directly extract and use the embedded coordinates for plotting.\n\n12.3.2 Spatial objects with sf\n\nThough you can combine geom_sf() with other functions and non-sf data, such as geom_point(), it’s often easier to convert the other data to sf objects first. The main reason for this is to ensure the coordinate reference system (CRS) is the same for both geometries. Coordinate reference systems define how the Earth’s three-dimensional surface is represented, either in a three-dimensional coordinate system (e.g. latitude and longitude) or as a two-dimensional projected map. There are many different coordinate reference systems, each commonly used for different areas of the world. If you’re combining multiple spatial objects, they may have different coordinate reference systems. For example, using the British National Grid (BNG) CRS, London has the following coordinates: X = 492983 and Y = 188837. Under the World Geodetic System 1984 (WGS84) CRS, London has the following coordinates: Longitude (X) = 1.200235W and Latitude (Y) = 53.870659N. You can imagine how these two coordinates cannot be plotted on the same map without transforming them first.\nIn R, you can use the sf package to set or transform between different coordinate reference systems. The easiest way is by using EPSG codes - numerical identifiers assigned to specific coordinate reference systems. The WGS84 uses EPSG code 4326. This is the coordinate reference system used in the world data that we’re using for the background map. You can check using the st_crs() function from sf which retrieves the CRS from an object: \n\nst_crs(world)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nTo make sure the CRS of the timezones data matches the CRS of the world data, we can set the CRS of the timezones data as 4326. At the moment, the timezones data is not a spatial object - it’s just a simple data.frame that contains two columns with latitude and longitude information. First, we need to convert it into an sf object using the st_as_sf() function from sf, also specifying the column names that relate to the coordinates data. \nThe latitude and longitude coordinates given in the timezones data are in the EPSG:4326 CRS, so we don’t need to convert the CRS - just set it. We know it’s in EPSG:4326 because this information is given to us with the data, and we can set it using the crs argument of st_as_sf(). \n\ntimezones_sf &lt;- timezones_data |&gt;\n  st_as_sf(\n    coords = c(\"longitude\", \"latitude\"),\n    crs = 4326\n  )\n\n\n\n\n\n\n\nTip 12.2: Dealing with an unknown CRS\n\n\n\nIf you don’t know which CRS your coordinates are in, the best thing to do is go back to the source of the data to see if you can find that information. Otherwise, you may wish to try the guess_crs() function from crsuggest (Walker 2022) which will guess potential coordinate reference systems for data that are lacking a defined CRS. \nYou can then use the st_set_crs() function to set the coordinate reference system. .\n\n\n\n12.3.3 The first plot\nSince the time zones coordinates are now stored as an sf object, we can plot it in the same way as the world data. We pass in the timezones_sf object to the data argument, and specify that we want to color the points based on the continent column by passing this into the color argument inside the aes() function: \n\nbasic_map &lt;- bg_map +\n  geom_sf(\n    data = timezones_sf,\n    mapping = aes(color = continent)\n  )\nbasic_map\n\n\n\n\n\n\nFigure 12.6: Points representing different time zone locations on a world map, with points colored by continent and a legend indicating color mapping on the right of the map.\n\n\n\n\nWe now have a basic map with points colored by region, and the default legend added on the right hand side. Let’s get started on a better, custom legend.\nBefore we create a new legend for the map, we need to define which colors will be used in the legend (and the rest of the plot).\n\n12.3.4 Colors\nAs we’ve done in previous chapters, we start by defining a text color, highlight color, and background color as variables. \n\ntext_col &lt;- \"#2F4F4F\"\nhighlight_col &lt;- \"#508080\"\nbg_col &lt;- \"#F0F5F5\"\n\nThen we define a named vector of colors, mapping the names of the regions to different hex codes. It can be difficult to find a qualitative color palette with enough colors (one for each of the nine regions) that remains colorblind safe. Paul Tol discusses several options for qualitative palettes in his Colour schemes and templates blog post (Tol 2021). Here, we use the muted qualitative color scheme palette (Tol 2021) which has 10 colors (including a pale gray for missing data) and is colorblind safe: \n\ncol_palette &lt;- c(\n  \"#CC6677\", \"#332288\", \"#DDCC77\",\n  \"#117733\", \"#88CCEE\", \"#882255\",\n  \"#44AA99\", \"#999933\", \"#AA4499\"\n)\nnames(col_palette) &lt;- unique(timezones_sf$continent)\n\n\n12.3.5 Fonts\nSimilarly, we also load any typefaces we want to use. Again, for this visualization we’re using Google Fonts, so we can make use of the font_add_google() function in sysfonts. For the title, we’ll use Fraunces, an old style serif typeface inspired by those used in the 20th century. For the body text, we’ll use Commissioner, a sans serif typeface. As we’ve done in previous chapters, we use showtext_auto() to use showtext automatically for plotting fonts, and set the desired resolution using showtext_opts() to set the dpi. \n\nfont_add_google(name = \"Commissioner\")\nfont_add_google(name = \"Fraunces\")\nshowtext_auto()\nshowtext_opts(dpi = 300)\nbody_font &lt;- \"Commissioner\"\ntitle_font &lt;- \"Fraunces\"\n\n\n12.3.6 Creating a custom bar chart legend\nThere are many ways to make a bar chart in ggplot2 - the two most often used are geom_bar() and geom_col(). What’s the difference? Well, geom_bar() is essentially a special version of geom_col() that counts up how many observations are in each category for you. For this visualization, we’re going to use the category counts for other purposes besides just defining the height of the bars so we’ll do the counting ourselves and use geom_col() instead. \nWe’ll use the count() function from dplyr to count how many observations of each geographical region are present in the continent column. We could use either the timezones_sf data or the timezones_data here as the input data. If you try both, you’ll notice that, as we expect, the count column (n) is the same in both cases, but that the two outputs are not identical! When you run count(timezones_data, continent), you get a 2 column data.frame. When you run count(timezones_sf, continent) you get an 3 column data.frame that remains an sf object. This is because the geometry column in sf can be described as sticky - you often (though not always) want the sf class to be preserved after any operations. You can remove it using the st_drop_geometry() function from sf: \n\nbar_data &lt;- timezones_sf |&gt;\n  count(continent) |&gt;\n  st_drop_geometry()\n\nLet’s plot a basic bar chart, by starting (as we always do) with passing our new bar_data object into the ggplot() function. We also add the aesthetic mapping via the aes() function and place the continent on the x-axis and the count (n) on the y-axis. We then draw the columns of the bar chart using geom_col(): \n\nggplot(\n  data = bar_data,\n  mapping = aes(x = continent, y = n)\n) +\n  geom_col()\n\n\n\n\n\n\nFigure 12.7: Bar chart showing the number of time zone locations in each continent.\n\n\n\n\nTo make it work effectively as a legend, we need to do two things:\n\nColor the bars based on the continent column.\nAdd labels directly to the bars instead, and remove the x-axis labels and legend.\n\n\n\n\n\n\n\nTip 12.3: Adding color to bar charts\n\n\n\nIf you were just creating a normal bar chart (not to be used as a legend) then adding colors to the bars might make your plot look brighter but it doesn’t add any additional information. The categories can already be distinguished by the labels on the x-axis.\n\n\nLet’s remake our bar chart, this time also mapping fill and label to the continent column in the aesthetic mapping. Adding label to the aesthetic mapping in ggplot() won’t affect our bar chart in any way since we aren’t (yet) adding geom_text() but there’s no harm in adding it as a global aesthetic mapping here anyway. We’ll also use scale_fill_manual() to set the colors used to those defined in the col_palette vector we created earlier. \n\nbar_plot &lt;-\n  ggplot(\n    data = bar_data,\n    mapping = aes(\n      x = continent, y = n,\n      fill = continent, label = continent\n    )\n  ) +\n  geom_col() +\n  scale_fill_manual(\n    values = col_palette\n  )\nbar_plot\n\n\n\n\n\n\nFigure 12.8: Bar chart showing the number of time zone locations in each geographical region, with different colors for each region.\n\n\n\n\nNow we can add the text labels directly to the bars. But where should they go? It’s quite common to add category labels in line with the end of the bar but that might not work well here. If we add labels within the bars, for regions with few time zones where the bars are short, the text will be very squashed. If we add labels outside the bars, for regions with many time zones where the bars are long, the text will run off the graph or extend the height of the visualization. Neither is ideal. But maybe we could have the best of both worlds. We want to add labels under the following conditions:\nWhen the bars are long, text should:\n\nappear inside the bar and be right-aligned;\nbe light in color to contrast the dark bar backgrounds;\n\nAnd conversely, when the bars are short, text should:\n\nappear outside the bar and be left-aligned;\nbe dark in color to contrast the light plot background;\n\nIt might take a little bit of trial and error to find the value that defines a bar as being short or tall. Here, we’ll use 45. If a region has more than 45 time zones, it’s classed as a tall bar. Otherwise, it’s short.\nWe want to map the alignment and color of the text to a (transformation of) the n column in the data set. This sounds like something that should go into an aesthetic mapping in the aes() function. We already know the color argument can be used to map the text color. The hjust and vjust arguments are used for horizontal and vertical positioning of text. Unfortunately, within the geom_text() function, neither hjust nor vjust can be used inside the aes() function. \nLuckily, the ggtext package once again comes to the rescue! We can use the geom_textbox() function from ggtext instead of geom_text(). It works very similarly to geom_text() but it allows us to map variables to hjust and vjust. \nWe’ll use case_when() from dplyr to specify the settings for the hjust argument, depending on the value of n. When n is greater than 45, hjust should be 1 to use right alignment, otherwise it should be 0 to use left alignment. If you wanted to, you could create a new column in the data instead of using case_when() directly inside the aes() function. \nSince geom_textbox() the draws a box, we need to control both (i) the alignment of the box relative to the coordinates using hjust, and (ii) the alignment of the text within the box using halign. Within geom_textbox() we also use orientation = \"left-rotated\" to rotate the text anti-clockwise by 90 degrees (similar to using angle = 90 in geom_text()). We can remove the background fill color and box outline by setting both fill = NA and box.color = NA, and set the size and font family options using the size and family arguments (where we pass in our body_font variable we defined earlier).\n\n\n\n\n\n\nTip 12.4: Alignment of text\n\n\n\nIn ggplot2, hjust (and halign) controls horizontal alignment and vjust (and valign) controls vertical alignment. When text is rotated, the non-rotated alignment arguments should be used. For example, although we’re moving the text up and down, we still use hjust to align the text.\n\n\nWe use a similar process for setting the color of the text - using case_when() to specify if the text should use the bg_col or text_col color based on whether or not it is greater than 45. Note that we wrap the bg_col and text_col variables inside the I() function to use these variables as is rather than treating them as a variable to map to. \nFinally, we can also use theme_void() to remove all existing theme elements, and theme(legend.position = \"none\") to remove the legend. \n\nlegend_plot &lt;- bar_plot +\n  geom_textbox(\n    mapping = aes(\n      hjust = case_when(\n        n &gt; 45 ~ 1,\n        TRUE ~ 0\n      ),\n      halign = case_when(\n        n &gt; 45 ~ 1,\n        TRUE ~ 0\n      ),\n      color = case_when(\n        n &gt; 45 ~ I(bg_col),\n        TRUE ~ I(text_col)\n      )\n    ),\n    family = body_font,\n    size = 2.5,\n    fill = NA,\n    box.color = NA,\n    orientation = \"left-rotated\"\n  ) +\n  theme_void() +\n  theme(\n    legend.position = \"none\"\n  )\nlegend_plot\n\n\n\n\n\n\nFigure 12.9: A minimalist bar chart showing the number of time zone locations in each continent, with labels on each bar naming the continent.\n\n\n\n\nNow we have a much nicer looking custom legend. We can apply some nicer styling to our main map before we join the two together!",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Time zones: spatial data and mapping with **`sf`**</span>"
    ]
  },
  {
    "objectID": "time-zones.html#advanced-styling",
    "href": "time-zones.html#advanced-styling",
    "title": "12  Time zones: spatial data and mapping with sf",
    "section": "\n12.4 Advanced styling",
    "text": "12.4 Advanced styling\nWe have multiple elements of our plots that we need to improve:\n\nthe background map should use our defined colors rather than the defaults;\nthe points should also use our defined colors;\na title and subtitle should be added using our defined typefaces;\n\n\n12.4.1 Applying colors\nLet’s start by re-drawing the background map but using our text_col for the border color and a semi-transparent version of our highlight_col for the fill color. We can use the alpha() function from ggplot2 to set the transparency to 30% (0.3). \nWe’ll also re-draw the points again with a small adjustment - let’s change the shape that’s used for the points. You can set the shape using the pch (or shape) argument. There are 25 different options available for pch, which can be specified using the numbers 1 to 25. The shape we’ll use here is a circle with a dot in the middle. Unfortunately, this isn’t one of the 25 available options so we’ll have to make it ourselves. We can draw the dot in the middle using the default shape but making it a little smaller. We can add the circle by choosing pch = 21 (which allows you to control both the fill and color of the shape) and making it a little bit bigger with a transparent fill. \n\nbasic_map &lt;- ggplot() +\n  # Apply colors to background map\n  geom_sf(\n    data = world,\n    color = text_col,\n    fill = alpha(highlight_col, 0.3)\n  ) +\n  # Draw points for time zone locations\n  geom_sf(\n    data = timezones_sf,\n    mapping = aes(color = continent),\n    size = 0.4,\n  ) +\n  # Draw outer circle\n  geom_sf(\n    data = timezones_sf,\n    mapping = aes(color = continent),\n    size = 1.6,\n    pch = 21,\n    fill = \"transparent\"\n  )\nbasic_map\n\n\n\n\n\n\nFigure 12.10: Points representing different time zone locations on a world map, with points colored by geographical region. The default legend is shown on the right hand side.\n\n\n\n\nWe also apply the same colors for (both of) the points as we did for the bar chart (remembering to use scale_color_manual() rather than scale_fill_manual() for points). \n\ncol_map &lt;- basic_map +\n  scale_color_manual(values = col_palette)\n\n\n12.4.2 Editing the axes\nBefore we add the title and subtitle text, we need to make some space for it (and the legend that we’ll add later). Let’s set the limits of the x- and y- axes using scale_x_continuous() and scale_y_continuous(). We extend the lower limit of the y-axis beyond the range of the data, leaving blank space at the bottom where we can overlay the text. We also adjust the breaks in the x-axis scale to make the grid lines closer together. The choice of grid lines every 15 x values might seem like an odd choice, but every fifteen degrees difference in longitude (x-axis) is approximately one hour of time difference (since Earth rotates 360 degrees in 24 hours, or 15 degrees per hour)! \nIt will take some (probably a lot of) trial and error to figure out exactly how much you need to extend the y-axis by. Here, we want the height of the blank space to be about half the height of the map area. Using st_bbox(world) to return the bounding box of the world map data, you’ll see that the y-axis of the world map ranges between -90 to +83.6. This means extending the y-axis by around 80 or 90 is a good starting point. We also remove the extra padding around the sides by setting expand = FALSE inside coord_sf(). \n\naxes_map &lt;- col_map +\n  scale_x_continuous(\n    breaks = seq(-180, 180, by = 15),\n    limits = c(-190, 190)\n  ) +\n  scale_y_continuous(\n    limits = c(-170, 100)\n  ) +\n  coord_sf(expand = FALSE)\naxes_map\n\n\n\n\n\n\nFigure 12.11: Points representing different time zone locations on a world map, with points colored by geographical region. The default legend is shown on the right hand side, with a large blank space below the world map.\n\n\n\n\n\n12.4.3 Adding text\nWe can create our custom Font Awesome icon caption, as described in Chapter 7, which we’ll later add to the top of the visualization: \n\nsocial &lt;- social_caption(\n  icon_color = highlight_col,\n  font_color = text_col,\n  font_family = body_font\n)\n\nAs we did in Chapter 6 and Chapter 7, we can also add colored text within the subtitle to denote the categories. This might be unnecessary for this visualization since we have our custom bar chart legend, but reinforcing the color mapping won’t hurt. Here, we’ll use ggtext as we did in Chapter 7 (although you can also use marquee as we did in Chapter 6 if you prefer). This means we’ll be writing HTML &lt;span&gt;&lt;/span&gt; tags and using glue() to pass in the colors from col_palette vector. Here, we’ll take a slightly different approach of calling the variables - using each vector element name instead of the index. This approach is a little more manual, but can be useful if you want the written text to be slightly different to the category name. The code is also often a little bit clearer to read! Rather than using our source_caption() function as we’ve done in previous chapters, we’ll add information about the source directly in the subtitle text. \n\nsubtitle &lt;- glue(\"Time zones tend to follow the boundaries between countries and their subdivisions instead of strictly following longitude. For every one-hour time, a point on the earth moves through 15 degrees of longitude. Each point relates to one of 337 time zones listed in the IANA time zone database. The colors show which time zones are in\n&lt;span style='color:{col_palette[\\\"Africa\\\"]};'&gt;Africa &lt;/span&gt;,\n&lt;span style='color:{col_palette[\\\"America\\\"]};'&gt;America &lt;/span&gt;,\n&lt;span style='color:{col_palette[\\\"Antarctica\\\"]};'&gt;Antarctica &lt;/span&gt;,\n&lt;span style='color:{col_palette[\\\"Asia\\\"]};'&gt;Asia &lt;/span&gt;,\n&lt;span style='color:{col_palette[\\\"Atlantic\\\"]};'&gt;Atlantic &lt;/span&gt;,\n&lt;span style='color:{col_palette[\\\"Australia\\\"]};'&gt;Australia &lt;/span&gt;,\n&lt;span style='color:{col_palette[\\\"Europe\\\"]};'&gt;Europe &lt;/span&gt;,\n&lt;span style='color:{col_palette[\\\"Indian\\\"]};'&gt;Indian &lt;/span&gt;, and\n&lt;span style='color:{col_palette[\\\"Pacific\\\"]};'&gt;Pacific &lt;/span&gt; zones.&lt;br&gt;**Data**: IANA tz database&lt;br&gt;\")\n\nWe also specify some text for the visualization title. We’re going to join together the title and subtitle and plot them as one text object, so we also use HTML &lt;span&gt;&lt;/span&gt; tags to set the font size, family, and color of the title.\n\ntitle &lt;- glue(\"&lt;span style='font-size:12pt; font-family:{title_font}; color:{text_col};'&gt;Time Zones of the World&lt;/span&gt;&lt;br&gt;\")\ntitle_text &lt;- glue(\"{title}{subtitle}\")\n\nWe add the social caption to the map using the tag option in the labs() function - just as we did in Chapter 11. When we edit the theme elements in the final step, we’ll specify a position for the tag. \nUnfortunately, we can’t have two tags and since we also want a non-standard position for the title/subtitle text object, we’ll use geom_textbox() to add it instead. We specify the x- and y- coordinates of where we want the textbox to go (again, lots of trial and error!) and pass the social object in for the label. We also use the other arguments in geom_textbox() to set the font size and family as well as specify the alignment of the text and box (just as we did earlier when making the bar chart). The box fill and outline colors are removed by setting their arguments to NA. \n\ntext_map &lt;- axes_map +\n  # add social icons\n  geom_textbox(\n    data = data.frame(x = 0, y = 93, label = social),\n    mapping = aes(x = x, y = y, label = label),\n    family = body_font,\n    size = 2.3,\n    fill = NA,\n    box.color = NA,\n    halign = 0.5,\n    hjust = 0.5,\n    valign = 0\n  ) +\n  # add title and subtitle\n  labs(tag = title_text)\n\n\n12.4.4 Adjusting themes\nThe final step is making a few small changes to the ggplot2 theme. We start by removing all theme elements using theme_void() and setting the base_family and base_size for the text. Although we don’t have many text elements in our visualization controlled by the theme() functions, this will still affect the tag text. \nUsing the theme() function, we make some further edit to remove the default legend, change the background color to out bg_col variable, and add the grid lines back in with an almost transparent text_col color. The position of the tag text can be set using the plot.tag.position argument to place it in the bottom left of the plot. We also use element_textbox_simple() from ggtext to format the text in the tag since it includes the HTML &lt;span&gt;&lt;/span&gt; tags. Within element_textbox_simple(), the maxwidth argument is used to set the width of the textbox, ensuring the only takes up the left hand side of the blank space at the bottom. The bar chart legend will go on the other side. \n\nstyled_map &lt;- text_map +\n  theme_void(base_size = 6, base_family = body_font) +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(\n      fill = bg_col,\n      color = bg_col,\n    ),\n    panel.grid.major = element_line(\n      color = alpha(text_col, 0.1)\n    ),\n    # add and position text\n    plot.tag.position = c(-0.01, 0.12),\n    plot.tag = element_textbox_simple(\n      color = text_col,\n      hjust = 0,\n      maxwidth = unit(200, \"pt\"),\n      margin = margin(\n        l = 15, t = 5, b = 10\n      )\n    )\n  )\nstyled_map\n\n\n\n\n\n\nFigure 12.12: Points representing different time zone locations on a world map, with points colored by geographical region. Title and subtitle are shown in the bottom left.\n\n\n\n\n\n12.4.5 Joining plots with patchwork\n\nFinally, we need to join the legend bar chart to our main plot. For this, we’ll use patchwork (Pedersen 2024). The patchwork package allows you to combine multiple visualizations (including ggplot2 graphics, base R plots, or gt tables) into a single layout. It’s very flexible, and you can add arrange plots easily into simple rows or columns, or create very complex layouts with many nested plots. The patchwork package also allows you to add inset plots i.e. a smaller plot placed within a larger plot to provide additional detail.\n\n\n\n\n\n\nTip 12.5: Arranging plots with patchwork\n\n\n\nAlthough this book doesn’t contain examples of arranging multiple plots side-by-side, patchwork makes it very easy to do so. If you have two plots g1 and g2, then you can arrange them side-by-side by simply running g1 + g2. More complex layouts can be achieved by specifying a grid of which plots should be placed where. The patchwork package also contains additional functions for adding multiplot annotations or titles, consistent themes across all subplots, and defining plot alignment across multiple pages. Read the package documentation at patchwork.data-imaginist.com for examples.\n\n\nIn this visualization, rather than the more traditional approach of arranging plots side by side, we instead want to position one plot (bar chart) on top of another (main map). We start with our styled_map and add the legend_plot on top using the inset_element() function. The four positions given in the inset_element() function are the left, bottom, right, and top outer bounds of the inset plot. The default unit is npc (normalized parent coordinates). In this setting the bottom left is (0, 0) and the top right is (1, 1). This means specifying the left outer bound as 0.55 tells patchwork to start at the left hand side of the inset plot 55% of the way in from the left of the main plot. \nWe also remove the added margin from around the edge of the plot using the theme() function and setting all of the margins to zero. Remember that when combining a theme() with a patchwork object, it’s added using the & operator rather than +. \n\nstyled_map + inset_element(legend_plot, 0.55, 0, 1, 0.3) &\n  theme(plot.margin = margin(0, 0, 0, 0))\n\n\n\n\n\n\nFigure 12.13: Points representing different time zone locations on a world map, with points colored by geographical region. Title and subtitle are shown in the bottom left, with an inset bar chart shown on the bottom right being used as a legend.\n\n\n\n\nNow our map is finished and we can save it with ggsave()! \n\nggsave(\n  filename = \"time-zones.png\",\n  width = 5,\n  height = 0.92 * 5\n)",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Time zones: spatial data and mapping with **`sf`**</span>"
    ]
  },
  {
    "objectID": "time-zones.html#reflection",
    "href": "time-zones.html#reflection",
    "title": "12  Time zones: spatial data and mapping with sf",
    "section": "\n12.5 Reflection",
    "text": "12.5 Reflection\nWhat could still be improved about this plot?\nAlthough the bar chart legend is an improvement on a boring, traditional legend, it could do with some further improvement. For example, it’s not immediately clear what the bar chart shows. With a little bit of time, readers probably put together the number of dots with the height of the bars but it could be more obvious. Adding numbers to the bar chart would also improve readability. Perhaps this could be with a traditional y-axis, or perhaps as more informative labels. For example, instead of a label that reads \"Africa\", it could read \"Africa (18 time zones)\".\nIf we’re talking about improving readability of bar charts, an easy action is to make the bars (and therefore text) horizontal - it’s much easier to read text that’s the right way up!\nEach plot created during the process of developing the original version of this visualization was captured using camcorder, and is shown in the gif below. If you’d like to learn more about how camcorder can be used in the data visualization process, see Section 14.1.",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Time zones: spatial data and mapping with **`sf`**</span>"
    ]
  },
  {
    "objectID": "time-zones.html#exercises",
    "href": "time-zones.html#exercises",
    "title": "12  Time zones: spatial data and mapping with sf",
    "section": "\n12.6 Exercises",
    "text": "12.6 Exercises\n\nEdit the bar chart legend to include information about the number of time zones in each geographic region.\nEdit the bar chart to have horizontal bars instead of vertical ones.\nConsider where the updated bar chart legend is positioned. Is the lower right corner still a good location if the bars are horizontal? Try moving it somewhere else.\n\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Time zones: spatial data and mapping with **`sf`**</span>"
    ]
  },
  {
    "objectID": "us-elections.html",
    "href": "us-elections.html",
    "title": "13  US House elections: geography on a grid with geofacet",
    "section": "",
    "text": "13.1 Data\nIn this chapter, we’ll learn how to arrange faceted plots in a grid that resembles a geographic area with geofacet, and look at another approach for creating customized legends.\nPackages required in this chapter:\nThe MIT Election Data and Science Lab collects, analyzes, and shares data and results about elections in the United States of America, with the aim to improve democracy in the USA. This includes data on elections to the U.S. House of Representatives, at the constituency level (MIT Election Data and Science Lab 2017). The data is regularly updated, and a version of this dataset containing information about elections from 1976 to 2022 was used as a TidyTuesday dataset in November 2023. We can again load the data in using the tt_load() function from tidytuesdayR:\ntuesdata &lt;- tt_load(\"2023-11-07\")\nhouse &lt;- tuesdata$house\nThere are 32452 rows and 20 columns in the data. Let’s take a look at the first few rows of the data using head() (or View() if you prefer):\nhead(house)\n\n# A tibble: 6 × 20\n   year state  state_po state_fips state_cen state_ic office\n  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; \n1  1976 ALABA… AL                1        63       41 US HO…\n2  1976 ALABA… AL                1        63       41 US HO…\n3  1976 ALABA… AL                1        63       41 US HO…\n4  1976 ALABA… AL                1        63       41 US HO…\n5  1976 ALABA… AL                1        63       41 US HO…\n6  1976 ALABA… AL                1        63       41 US HO…\n# ℹ 13 more variables: district &lt;chr&gt;, stage &lt;chr&gt;,\n#   runoff &lt;lgl&gt;, special &lt;lgl&gt;, candidate &lt;chr&gt;,\n#   party &lt;chr&gt;, writein &lt;lgl&gt;, mode &lt;chr&gt;,\n#   candidatevotes &lt;dbl&gt;, totalvotes &lt;dbl&gt;,\n#   unofficial &lt;lgl&gt;, version &lt;dbl&gt;, fusion_ticket &lt;lgl&gt;\nThere are many state columns, essentially providing similar information in different formats e.g. the state column provides the state name and the state_po column provides the state two-letter abbreviation. There is also a column to identify the constituency (district) within the state. The data gives information about candidates: their name, their political party affiliation, and how many votes they received in the elections they stood in. Other columns provide information about the election, including total number of votes cast, the electoral stage, whether it was a special election, and whether it was a runoff election. The version column contains a data which identifies which release version of the data it is.",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>US House elections: geography on a grid with **`geofacet`**</span>"
    ]
  },
  {
    "objectID": "us-elections.html#exploratory-work",
    "href": "us-elections.html#exploratory-work",
    "title": "13  US House elections: geography on a grid with geofacet",
    "section": "\n13.2 Exploratory work",
    "text": "13.2 Exploratory work\nThe house data is very granular, and it’s unlikely we’ll be able to visualize all of the information in one chart. Therefore we can think about different ways of subsetting or aggregating the data. We might choose to focus on:\n\nState: We could look at voting patterns within a specific state, or aggregate to look at state-level data instead of constituency-level.\nParty: We have information on which party each candidate stood for in the election, including data on fusion tickets where candidates stand for multiple parties.\nTime: Data is provided from 1976 to 2022, and we might want to look at trends in vote share or vote counts over time.\n\n\n13.2.1 Data exploration\nLet’s start by having a quick look at whether or not the number of votes has changed over time. The data goes back to 1976 and the population of the USA has increased by over 150% between the 1970 and 2020 censuses (United States Census Bureau 2021a) so might we also expect a similar increase in votes? Let’s start by having a look at the number of candidate votes over time with a quick scatter plot made with plot():\n\nplot(\n  x = house$year,\n  y = house$candidatevotes,\n  xlab = \"\",\n  ylab = \"Number of candidate votes\"\n)\n\n\n\n\n\n\nFigure 13.1: Scatter plot showing the number of candidate votes over time, where it’s clear that elections take place every two years and there has been little change over time.\n\n\n\n\nThere doesn’t seem to be an especially interesting pattern in votes over time in Figure 13.1, at least at first glance. However, it has highlighted a potential data issue. In most years, the highest values are around 300,000 but there are two observations in 2022 where the values are well over 1,000,000. We had a similar issue in Chapter 4, where some observations were the sum of other observations. This doesn’t seem to be the case here. For now, let’s exclude these and look at data where the number of candidate votes is below 600,000.\nWe might also be interested in how the number of candidate votes varies by party, and we can use the boxplot() function to explore whether or not there are big differences: \n\nboxplot(\n  candidatevotes ~ party,\n  data = house[house$candidatevotes &lt; 600000, ],\n  horizontal = TRUE,\n  las = 1,\n  xlab = \"Number of candidate votes\",\n  ylab = NULL\n)\n\n\n\n\n\n\nFigure 13.2: Box plot showing the number of candidate votes for each party, with many party labels being hidden due to the large number of unique parties (with small numbers of votes).\n\n\n\n\nIn Figure 13.2 there are a couple of interesting points to note. First, there are many, many unique party names because every independent candidate is listed as a different party name. This means that not all party names can actually by read off from the chart. Secondly, there are a lot of outliers shown in the data, which is highly skewed. Finally, there are a couple of parties that have a much higher numbers of votes. Inspecting the data confirms that these are, as we might guess, the Democratic Party and the Republican Party.\n\n13.2.2 Exploratory sketches\nThe Democratic and Republican parties have dominated elections during this time period. It’s unlikely we’d be able to draw any reliable insights about individual independent candidates because the numbers are so small, so let’s group all other party candidates together into an other category. We can look at combining Figure 13.1 and Figure 13.2, alongside information about each state to look at whether there are changing patterns in vote share for the major parties over time and space.\nWe might consider creating an area chart faceted by state showing the percentage of votes for the Democratic party, the Republican party, and other parties. States that are geographically close together may be more likely to exhibit similar patterns. Rather than arranging the faceted area charts in a rectangular grid, it would make more sense to arrange them based on their geographic location. This would enable easier comparison of patterns across states. Figure 13.3 shows an example of what this might look like:\n\n\n\n\n\nFigure 13.3: Initial sketch of a faceted area chart arranged in a grid shaped like the United States.\n\n\nOften in facet charts, the x- and y- axes are shown multiple times. This can often make a chart, especially when using a geographic layout like this, look overly busy. We might choose to create a very minimalist set of facet charts, and use colored text as a legend, as we did in Chapter 6 and Chapter 9. Though the minimalist approach may look cleaner, it can also mean that it’s not as clear what’s being shown on a chart. Let’s add a how to read this chart explainer as a legend, created from a zoomed in version of one of the facet plots: \n\n\n\n\n\nFigure 13.4: Initial sketch of a faceted area chart arranged in a grid shaped like the United States. An enlarged version of one area chart is used as a legend on the left hand side.",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>US House elections: geography on a grid with **`geofacet`**</span>"
    ]
  },
  {
    "objectID": "us-elections.html#preparing-a-plot",
    "href": "us-elections.html#preparing-a-plot",
    "title": "13  US House elections: geography on a grid with geofacet",
    "section": "\n13.3 Preparing a plot",
    "text": "13.3 Preparing a plot\nIn order to bring Figure 13.4 to life, we need to start by aggregating the other parties, and calculating the number of votes per party, year, and state.\n\n13.3.1 Data wrangling\nTo aggregate the other parties, we use mutate() from dplyr to update the existing party column. We create the new party categories using case_when() and also take the opportunity to provide slightly better, alternative labels for the two dominant parties. \nThe stage column contains information on whether the election was a general election (\"GEN\") or primary election (\"PRI\"). To keep things simpler, we use filter() from dplyr to restrict the data to general elections only. We then use group_by() and summarise() to add up the number of votes in each year, state, and party category - remembering to ungroup() the data at the end! \n\nhouse_data &lt;- house |&gt;\n  mutate(party = case_when(\n    party == \"REPUBLICAN\" ~ \"Republican Party\",\n    party == \"DEMOCRAT\" ~ \"Democratic Party\",\n    TRUE ~ \"Other\"\n  )) |&gt;\n  filter(stage == \"GEN\") |&gt;\n  group_by(year, state_po, party) |&gt;\n  summarise(votes = sum(candidatevotes)) |&gt;\n  ungroup()\n\nThere are some years for which there were no \"Other\" candidates in some states, and so there are no rows for these values i.e. they are implicitly missing. As we saw in Chapter 10, this can cause misleading area charts and results in a warning from ggplot2. As in Chapter 10, these missing values are not actually missing, they are simply 0. We’ll do as we did before and make sure that every combination of year, state_po, and party exists in the data by using complete() from tidyr, and setting any missing combinations explicitly to 0. \n\nplot_data &lt;- house_data |&gt;\n  complete(\n    year, state_po, party,\n    fill = list(votes = 0)\n  )\n\n\n13.3.2 The first plot\nWe’re once again going to create a faceted plot, as we did in Chapter 2, Chapter 3, and Chapter 5. There are two key differences with this plot:\n\nInstead of arranging the plots into a rectangular shape with a specified number of rows and columns, we want to arrange the plots in a way that resembles some underlying geography.\nThere are far more facets (over 50) compared to the previous plots we’ve made (which have mostly had less than 10). Sometimes creating a large number of facets can be slow.\n\nIt’s this second issue that means when developing faceted plots, especially when using large data or a complex visualization, it can be useful to create a single plot first. That is, filter the data and create a chart for just one level of the faceting category. This allows you to get the basics of your chart correct, before you start worrying about facet layout.\nWe start by passing in our plot_data to the data argument of ggplot(), wrapped inside the filter() function from dplyr which subsets the data to just California. We set up the aesthetic mapping to plot the year on the x-axis and the number of votes on the y-axis, split by party. \nWe’ve already seen examples of making area charts in Chapter 3 and Chapter 10, but we’re going to make a slight change in this chapter. Since we’re going to be comparing states (which each have very different population sizes, and therefore will have very different numbers of votes), rather than considering an area chart of number of votes, we’ll look at the proportion for each party. Luckily, we don’t have to calculate these percentages ourselves, since setting position = \"fill\" inside geom_area() does this for us. \n\nbasic_plot &lt;- ggplot(\n  data = filter(plot_data, state_po == \"CA\")\n) +\n  geom_area(\n    mapping = aes(\n      x = year, y = votes, fill = party\n    ),\n    position = \"fill\"\n  )\nbasic_plot\n\n\n\n\n\n\nFigure 13.5: Area chart showing the percentage of votes for different political party categories for California. The default colors, styling, and legend have been applied.\n\n\n\n\nWe now have a basic plot for one of the facet values.\n\n\n\n\n\n\nTip 13.1: Piping data into ggplot()\n\n\n\nSince the first argument of ggplot is data, this means that we could pipe the data into the ggplot() function rather than explicitly stating it as the first argument. For example, the code above could be re-written as:\n\nplot_data |&gt;\n  filter(state_po == \"CA\") |&gt;\n  ggplot() +\n  geom_area(\n    mapping = aes(\n      x = year, y = votes, fill = party\n    ),\n    position = \"fill\"\n  )\n\nThough this may arguably look neater than nesting filter() inside ggplot(), you’re unlikely to see any other examples of piping into ggplot() for two reasons:\n\nThe combination of + and |&gt; looks odd, and this outweighs the increased neatness from piping (personal opinion).\nIt makes it easier to end up with very long, complicated code. Keeping the data wrangling and the plotting code separate often makes more sense.\n\n\n\nWe can now pass the full data into ggplot() (rather than just the California subset) and add facet_wrap() to create an area chart for each value in state_po. \n\nbasic_plot &lt;- ggplot(\n  data = plot_data\n) +\n  geom_area(\n    mapping = aes(\n      x = year, y = votes, fill = party\n    ),\n    position = \"fill\"\n  )\nbasic_plot +\n  facet_wrap(~state_po)\n\n\n\n\n\n\nFigure 13.6: Faceted area chart arranged in a rectangular grid shaped, showing percentage of votes per party over time. The area charts cannot be seen due to the size of the facet labels.\n\n\n\n\nIn Figure 13.6, we can’t actually see any of our area charts, only the facet labels. This is a very common problem when working with large numbers of facet categories, and smaller chart sizes. We’ll deal with this problem a little bit later when adjusting the plot theme.\n\n13.3.3 Faceting with geofacet\n\nTo arrange the faceted plots into a grid that resembles the underlying geography, we’ll use the geofacet package (Hafen 2023). The geofacet package makes it easier to arrange facets in the shape of a map. This makes it easier to compare data across regions, like states or countries, in a grid format. There are many built-in grids for different geographical regions, including the several for the United States of America. However, you can also create your own custom facet grid if you prefer a different layout, or if no grid exists for the region you are plotting.\nTo do faceting with geofacet, we use facet_geo() instead of facet_wrap(). It works in essentially the same way, and we start by using a ~ to indicate which column is the faceting column. However, there are two things that are a little bit different: \n\nWe need to specify which grid layout we want to use. You can use the get_grid_names() function in geofacet to get a list of all of the valid grid names. They are named sensibly based on what region the grid is for e.g. \"us_state_grid1\" and \"eu_grid1\". Here, we’ll use \"us_state_grid2\".\nIn order to map the data to the correct facet position on the grid, one of the columns in the data must align with the value in the code column of your chosen grid. In the \"us_state_grid2\" grid, the code column contains the two letter state abbreviations which matches the state_po column in our data. If you didn’t have the two letter abbreviations, you may need to do some data joining to attach them.\n\nIf you have additional states (e.g. Puerto Rico can sometimes be listed in a US state column even though it isn’t) or are missing some states, you can still use facet_geo(). However, it will only plot states listed in the facet grid, and you may get a warning message.\n\nmap_plot &lt;- basic_plot +\n  facet_geo(\n    ~state_po,\n    grid = \"us_state_grid2\"\n  )\nmap_plot\n\n\n\n\n\n\nFigure 13.7: Faceted area chart arranged in a grid shaped like the United States, showing percentage of votes per party over time. The area charts cannot be seen due to the size of the facet labels.\n\n\n\n\nWe still have the same problem of not being able to see the details of the chart as there are so many, but you can see from just the facet titles, that the plots are now arranged in a grid that resembles the USA.",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>US House elections: geography on a grid with **`geofacet`**</span>"
    ]
  },
  {
    "objectID": "us-elections.html#advanced-styling",
    "href": "us-elections.html#advanced-styling",
    "title": "13  US House elections: geography on a grid with geofacet",
    "section": "\n13.4 Advanced styling",
    "text": "13.4 Advanced styling\nWe’ll now style our charts to apply more intuitive colors, adjust the facet labels to allow the charts to be seen more easily, and create a custom legend that explains how to read this chart.\n\n13.4.1 Colors\nIn the USA, the Republican Party is represented by the color red and the Democratic Party by blue. As we discussed in Chapter 9, when choosing which colors to use for well-known categories, it’s important not to play into negative stereotypes (e.g. pink for girls). But it’s also important to use what is intuitive. Since these are colors that the parties have chosen to represent themselves, and because they are so well recognized, we’ll stick to red and blue. \nSince the visualization is already quite busy, we keep the background colors very simple - using only black and white.\n\nblue_col &lt;- \"#0015BC\"\nred_col &lt;- \"#C41E3A\"\nother_col &lt;- \"#AAAAAA\"\ntext_col &lt;- \"black\"\nbg_col &lt;- \"white\"\n\nWe can then apply the colors to our plot using scale_fill_manual(), and assign each color to the relevant party label in values. Since we know we’re going to be creating our own legend later, we’ll remove the default legend by setting guide = \"none\". \n\ncol_plot &lt;- map_plot +\n  scale_fill_manual(\n    values = c(\n      \"Democratic Party\" = blue_col,\n      \"Republican Party\" = red_col,\n      \"Other\" = other_col\n    ),\n    guide = \"none\"\n  )\n\n\n13.4.2 Text and fonts\nAs in previous chapters, typefaces can be defined using the sysfonts and showtext packages. For the main font, we’ll use the Roboto typeface as we did in Chapter 11. For the title text, we’ll use Carter One, a display font designed by Vernon Adams inspired by typefaces used in mid 20th century advertising. It’s a bold typeface which works well for titles of visualizations. \n\nfont_add_google(name = \"Roboto\")\nfont_add_google(\n  name = \"Carter One\", family = \"Carter\"\n)\nshowtext_auto()\nshowtext_opts(dpi = 300)\nbody_font &lt;- \"Roboto\"\ntitle_font &lt;- \"Carter\"\n\nWe write text for the subtitle, using glue() to add HTML styling for colored text as we did in Chapter 7 and Chapter 9. The colored text serves as a legend (though we’ll later also add our own custom legend in addition), and the subtitle text provides information about what the chart shows. As in Chapter 12, we’ll add the information about the source of the data on a new line at the end of subtitle, rather than in the caption. We also add the title text directly in the subtitle variable to enable easier placement of the text, again as we did in Chapter 12. \n\nst &lt;- glue(\"&lt;span style='font-size:10pt; font-family:{title_font}; color:{text_col};'&gt;Votes in US House Elections&lt;/span&gt;&lt;br&gt;Area charts indicate the percentage of votes for the &lt;span style='color:{blue_col};'&gt;Democratic Party&lt;/span&gt;, the &lt;span style='color:{red_col};'&gt;Republican Party&lt;/span&gt;, and &lt;span style='color:#aaaaaa;'&gt;Other&lt;/span&gt; parties in general elections between 1976 and 2022.&lt;br&gt;&lt;br&gt;**Data**: U.S. House 1976–2022. MIT Election Data and Science Lab.\")\n\nWe also use our social_caption() function defined in Chapter 7, which we’ll later add as a plot caption: \n\nsocial &lt;- social_caption(\n  icon_color = blue_col,\n  font_color = text_col,\n  font_family = body_font\n)\n\nWe then pass our subtitle, and caption text into the labs() function to add it to our plot. Since we want to position the subtitle text in an unusual place, we use the tag argument rather than subtitle, similar to what we did in Chapter 12. \n\ntext_plot &lt;- col_plot +\n  labs(\n    tag = st,\n    caption = social\n  )\n\n\n13.4.3 Adjusting themes\nWe know that the facet labels are too large and are currently dominating the visualization as seen in Figure 13.7. There are a few solutions to this:\n\nMake the facet labels much smaller. However, this can make them hard to read and renders the labels somewhat pointless.\nIncrease the size of the chart. Here, we’re constrained by the physical width of the plot and can’t make it wider. Though we could make the plot taller, we’re then adding quite a lot of additional space simply for labels.\nCreate our own custom facet labels.\n\nHere, we’re going to go for the third option. Later, we’ll use the theme() function to remove the default facet labels. For now, let’s think about what labels to add. To save space in the plot, the easiest way is to use inset facet labels - positioning the state label inside the area chart. This has the downside of hiding part of the data. However, we can make the text semi-transparent to allow both the state label and the area chart behind to be seen.\nWe add text labels with geom_text(). The x-coordinate position of the text is set as the mean of the years in the full plot_data data to automatically position it in the middle of the chart. The y-coordinate position is set to 0.5 i.e. also in the middle of the chart since the position = \"fill\" argument scales the y-axis to be between 0 and 1. The alpha() function is used to control the transparency of the text color. \nNote that we use a much smaller value of in alpha() than we normally would here. This is because there are actually multiple labels drawn on top of each other - one for each year, and party combination. Though this isn’t necessarily a problem, if we’re trying to create semi-transparent labels, stacking many copies of the same semi-transparent label on top of each other results in a pretty opaque label. Though we could filter the data to consider only one year and party, the geofacet package sometimes has issues rendering the labels correctly with this approach.\n\nstyled_plot_1 &lt;- text_plot +\n  geom_text(\n    mapping = aes(\n      x = mean(range(plot_data$year)),\n      y = 0.5,\n      label = state_po\n    ),\n    family = title_font,\n    color = alpha(bg_col, 0.02),\n    size = 2.5\n  )\n\nAs we’ve done in previous chapters we set expand = FALSE inside coord_cartesian() to remove the additional space around each plot panel. We also use theme_void() to remove any additional plot elements since we’re aiming for a minimal look and we’ll later design a custom legend that gives the reader all the information that would normally be conveyed by the axes labels and title. \nAs in previous chapters we use the element_rect() function to set plot.background to our pre-defined background color variable. We also adjust the plot margins using plot.margin. Note that here we’re making the left plot margin very large, as this is where we’ll later position our custom legend. We discussed pros and cons of this approach in Chapter 9. \nWe can position the title text to the left of the plot, in the wide margin by choosing negative values for hjust. Remember the 0 means left-aligned and 1 means right-aligned. Negative values essentially mean very left aligned! This works here because the title is a single line of text, but for multi-line text the text alignment can often look odd. That means that for the subtitle text (which is a short paragraph), we’re using tag instead of subtitle text. The plot.tag.position allows us to specify a vector of co-ordinates for where we want the text to appear - with negative x-coordinates also placing the text into the widened plot margin. It takes a little bit of trial and error to ensure that the title and tag text are aligned with each other. We again use element_textbox_simple() to enable automatic text wrapping for the plot tag text, and for the caption to make the icons render correctly. \nWe set both the strip.background and strip.text arguments to element_blank() to remove all default facet labels, and use panel.spacing to control the amount of space between the facets and move them closer together. \n\nstyled_plot_2 &lt;- styled_plot_1 +\n  coord_cartesian(expand = FALSE) +\n  theme_void(base_size = 6, base_family = body_font) +\n  theme(\n    # Background elements\n    plot.background = element_rect(\n      fill = bg_col,\n      color = bg_col\n    ),\n    plot.margin = margin(5, 5, 5, 125),\n    plot.tag = element_textbox_simple(\n      hjust = 0,\n      color = text_col,\n      maxwidth = 0.65,\n      lineheight = 0.6,\n      size = rel(1.0)\n    ),\n    plot.caption = element_textbox_simple(\n      hjust = 1,\n      halign = 1,\n      color = text_col,\n      maxwidth = 0.65,\n      margin = margin(b = 0, t = 10)\n    ),\n    plot.tag.position = c(-0.50, 0.77),\n    # Facet arguments\n    strip.background = element_blank(),\n    strip.text = element_blank(),\n    panel.spacing = unit(0.05, \"lines\")\n  )\nstyled_plot_2\n\n\n\n\n\n\nFigure 13.8: Faceted area chart arranged in a grid shaped like the United States, showing percentage of votes per party over time. A large blank space appears on the left hand side, where a legend will later be placed.\n\n\n\n\n\n13.4.4 Developing a custom legend\nAs we did in Chapter 12, we’ll design a custom legend. In Chapter 12, we used a bar chart as a legend which also served as another source of information in the visualization. In this chapter, our custom legend will instead serve as a how to read this chart explainer. \nWe can take one of the facets, enlarge it, and add annotations to explain what data is shown on the chart. To keep the main chart looking clean, we don’t currently have any axes titles or labels. For example, it’s not immediately clear what years are covered by the data. This doesn’t need added to every chart, but should be annotated on the legend. To increase the accessibility of the chart, and to make sure we don’t rely on color alone as discussed in Chapter 9, we’ll also add direct labels to identify the Democratic Party and Republican Party areas on the chart.\nLet’s start by filtering the data, to select only a single state. It doesn’t really matter which one we choose, although ideally one that has enough space for us to add the party labels directly on the chart. Here, we’ll use California (\"CA\") for the legend plot. \n\nca_data &lt;- filter(plot_data, state_po == \"CA\")\n\nWe then reuse the code written for the main plot, passing in the ca_data to the ggplot() function, then adding the aesthetic mapping and the area chart with geom_area(). The colors and custom state (facet) labels are added with scale_fill_manual() and geom_text() as discussed earlier in this chapter. \n\nca_plot &lt;- ggplot(data = ca_data) +\n  geom_area(\n    mapping = aes(\n      x = year,\n      y = votes,\n      fill = party\n    ),\n    position = \"fill\"\n  ) +\n  # label for state\n  geom_text(\n    mapping = aes(\n      x = mean(range(year)),\n      y = 0.5,\n      label = state_po\n    ),\n    family = title_font,\n    color = alpha(bg_col, 0.3),\n    size = 4\n  ) +\n  # colors\n  scale_fill_manual(\n    values = c(\n      \"Democratic Party\" = blue_col,\n      \"Republican Party\" = red_col,\n      \"Other\" = other_col\n    ),\n    guide = \"none\"\n  )\n\nWe then use the annotate() function to add: \n\nTwo labels for the start and end year of the data. To keep these within the bounds of the plot, we left align the start label on the left, and right align the end label on the right.\nTwo labels for the Republican and Democratic parties. We leave the Other category unlabeled as it’s very small, and it’s obviously the only category left over.\n\nAs in the main plot, we also set expand = FALSE inside coord_cartesian() to remove the additional space around the edges. We also use theme_void() to remove any additional chart elements, since the annotations convey all the necessary information. \n\np_inset &lt;- ca_plot +\n  # year labels\n  annotate(\n    geom = \"text\",\n    x = min(ca_data$year),\n    y = 0.05,\n    label = min(ca_data$year),\n    family = body_font,\n    color = bg_col,\n    size = 3,\n    hjust = 0\n  ) +\n  annotate(\n    geom = \"text\",\n    x = max(ca_data$year),\n    y = 0.05,\n    label = max(ca_data$year),\n    family = body_font,\n    color = bg_col,\n    size = 3,\n    hjust = 1\n  ) +\n  # Party labels\n  annotate(\n    geom = \"text\",\n    x = mean(range(ca_data$year)),\n    y = 0.8,\n    label = \"Democratic Party\",\n    family = body_font,\n    color = bg_col,\n    size = 3.5\n  ) +\n  annotate(\n    geom = \"text\",\n    x = mean(range(ca_data$year)),\n    y = 0.2,\n    label = \"Republican Party\",\n    family = body_font,\n    color = bg_col,\n    size = 3.5\n  ) +\n  coord_cartesian(expand = FALSE) +\n  theme_void()\np_inset\n\n\n\n\n\n\nFigure 13.9: A custom legend plot consisting of a zoomed in version of the California facet with additional annotations indicating the time period and categories represented by different colors.\n\n\n\n\nOur custom legend is now ready to add to Figure 13.8.\n\n13.4.5 Joining with patchwork\n\nNow, the last step is to join together our custom legend with the main plot. We’ve already left some blank space on the main plot for the legend to go in, so we’ll use the inset_element() function from patchwork (Pedersen 2024) as we did in Chapter 12. We use the left, right, top, and bottom arguments to choose where the corners of the legend appear in relation to the main plot - getting these values correct takes some trial and error! Setting align_to = \"full\" allows us to choose the coordinates relative to the full chart area, rather than just the panel area as per the default settings. \n\nfinal_plot &lt;- styled_plot_2 + inset_element(\n  p = p_inset,\n  left = 0.035,\n  bottom = 0.087,\n  right = 0.295,\n  top = 0.55,\n  align_to = \"full\"\n)\nfinal_plot\n\n\n\n\n\n\nFigure 13.10: Faceted area chart arranged in a grid shaped like the United States, showing percentage of votes per party over time. An enlarged version of the area chart for California is used as a legend on the left hand side.\n\n\n\n\nWe can then save it to a file with ggsave()! \n\nggsave(\n  filename = \"us-elections.png\",\n  plot = final_plot,\n  width = 5,\n  height = 0.5 * 5\n)",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>US House elections: geography on a grid with **`geofacet`**</span>"
    ]
  },
  {
    "objectID": "us-elections.html#reflection",
    "href": "us-elections.html#reflection",
    "title": "13  US House elections: geography on a grid with geofacet",
    "section": "\n13.5 Reflection",
    "text": "13.5 Reflection\nThis visualization summarise a large amount of complex information in a way that is fairly intuitive - the colors match recognisable party colors, the grid is arranged in the a shape that is instantly recognisable, and the area charts clearly indicate vote share over time. However, there are a few more improvements that could be made and other elements we may want to consider.\nThough use of state two-letter abbreviations saves space and avoids excessive text, it is more difficult for a reader to easily look up the state they are interested in - especially if they are less familiar with US geography. Perhaps adding some smaller text under the abbreviations, or creating an interactive version that provides state names upon hover, would make it easier.\n\n\n\n\n\n\nTip 13.2: Interactive charts from {ggplot2}\n\n\n\nThough this books focuses on creating static visualizations, you may also be interested in developing interactive charts for use in web-based outputs. There are many packages in R that enable you to make interactive visualizations, and a few that are particularly useful for ggplot2 users: \n\nplotly (Sievert 2020): allows you to build interactive graphics using the plotly.js JavaScript library. The ggplotly() function can transform a ggplot2 plot to a plotly plot as a quick way to make interactive graphics.\nggiraph (Gohel and Skintzos 2024): allows you to add tooltips, zooming, and clickable elements to ggplot2 graphics.\n\n\n\nThough the colors are intuitive, they are not the most accessible since they are of similar intensity. If we were to use the cvd_grid() function from colorblindr as we did in Chapter 5, these colors might look much less distinguishable. Choosing a combination of a lighter blue and bright red, or lighter red and bright blue would retain the intuitiveness of the colors, but improve accessibility. \nThe use of area charts to show percentages is intuitive and sensible for this, since vote share is essentially what decides an election. However, it would also be interesting to see the counts of the number of votes - especially since states can have vastly different populations. A small change in percentage for a state with a large population may result in large changes in number of votes, but this wouldn’t be seen in our version of this visualization.\nEach plot created during the process of developing the original version of this visualization was captured using camcorder, and is shown in the gif below. If you’d like to learn more about how camcorder can be used in the data visualization process, see Section 14.1.",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>US House elections: geography on a grid with **`geofacet`**</span>"
    ]
  },
  {
    "objectID": "us-elections.html#exercises",
    "href": "us-elections.html#exercises",
    "title": "13  US House elections: geography on a grid with geofacet",
    "section": "\n13.6 Exercises",
    "text": "13.6 Exercises\n\nInstead of using California for the custom legend plot, create a plot showing the percentage of total votes across all states. Do you need to update the text to explain how to interpret the charts?\nEdit the visualization to show total number of votes rather than the percentage of the vote share. Do you see similar patterns? How can you choose the position of the facet label for the state in an automated way?\n\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Visualizing spatial data",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>US House elections: geography on a grid with **`geofacet`**</span>"
    ]
  },
  {
    "objectID": "other-tricks.html",
    "href": "other-tricks.html",
    "title": "14  Other tips and tricks",
    "section": "",
    "text": "14.1 Recording gifs with camcorder\nThere are many functions within ggplot2, and many more within the wider community of extension packages, that the chapters in this book can’t cover. Some of those packages are used to add different geometries, a few are used behind the scenes to help streamline workflows, and a few are more generally useful R packages.\nPackages required in this chapter:\ncamcorder (Hughes 2022a) is an R package to track and automatically save graphics generated with ggplot2. You can set up your R session to use camcorder by running gg_record(). If you’re using RStudio, you’ll notice that your plots now appear in the Viewer tab rather than the Plots tab.\ngg_record(\n  width = 6,\n  height = 4\n)\nIf you’re reading the online version of this book, you will have seen several examples of gifs showing the visualization development process at the end of chapters. The gg_playback() function combines the previously saved images and saves them to a gif. You can set different preferences using the arguments in gg_playback(). For example, you can define the length of each frame in the gif, make the first and last frames longer or shorter, or set the background color.\ngg_playback(\n  name = \"data-viz.gif\",\n  first_image_duration = 4,\n  last_image_duration = 20,\n  frame_duration = .25,\n  background = bg_col\n)\nNote that there are a few plots (including those produced by geofacet) that don’t work automatically with gg_record(). However, you can manually run record_polaroid() manually to capture the image with camcorder and view it at your desired resolution in the Viewer pane.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Other tips and tricks</span>"
    ]
  },
  {
    "objectID": "other-tricks.html#sec-camcorder",
    "href": "other-tricks.html#sec-camcorder",
    "title": "14  Other tips and tricks",
    "section": "",
    "text": "Tip 14.1: Transparent backgrounds in gifs\n\n\n\nSome of the built-in themes in ggplot2 have a transparent background. If you’ve used these at some point during the development process, when you viewed them in RStudio the background likely appeared white. The default background color in gg_playback() is \"black\" - meaning that your gif might not quite look as you expect. Instead set the background color to something more sensible, for example your bg_col variable.\n\n\n\n\n\n14.1.1 Setting the size resolution of images\nHave you ever spent ages tinkering with a plot you’re previewing in RStudio, before using ggsave() to save a higher resolution image, only to end up with the text looking ridiculously larger (or smaller) than you thought? Or do you struggle to preview plots with your desired aspect ratio? One of the nice features of using camcorder is the ability to preview plots with the same height, width, and resolution that you want your final plot to be in. Simply set the height, width, and dpi (and optionally units) arguments in gg_record() to your desired values. Then what you see is what you save! The ggview (Domin 2024) package also provides similar functionality.\n\n\n\n\n\n\nTip 14.2: Choosing a plot resolution\n\n\n\nThe RStudio Plots tab shows images at 96dpi, but the default in ggsave() is 300dpi. This is what causes the mismatch between the sizes of text and other elements. The default dpi in gg_record() is also 300dpi so it integrates nicely with ggsave().",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Other tips and tricks</span>"
    ]
  },
  {
    "objectID": "other-tricks.html#sec-ggbuild",
    "href": "other-tricks.html#sec-ggbuild",
    "title": "14  Other tips and tricks",
    "section": "\n14.2 Extracting information from plots",
    "text": "14.2 Extracting information from plots\nIn Chapter 6, we reflected that it would be better to use a wind turbine icons instead of the fan icon - since the data is about wind turbines! An alternative to the Font Awesome icons we used in Chapter 6 are icons from Flaticon. You can download Flaticon icons as PNG images for free, as long as you provide attribution. More specifically, you can download a Wind Power icon from www.flaticon.com/free-icon/wind-power_5670189 (Flaticon.com 2024). Let’s save it in an images/ project directory.\nNow instead of plotting icons as fonts, we want to plot icons as images. The problem is that:\n\nwe want to use the x- and y- coordinates for the icons provided by geom_pictogram()\n\nwe want to use an image instead of a font icon\n\nThese two things aren’t currently compatible.\n\n14.2.1 Extracting co-ordinates\nWe’ve already built the plot with geom_pictogram() from waffle so the x- and y- coordinates have already been calculated. Luckily, we can use the ggplot_build() function to extract from the basic_plot we created in Chapter 6. \n\nbasic_built &lt;- ggplot_build(basic_plot)\n\nYou can save an ggplot plot as a variable, and then pass it into ggplot_build() to access the data associated with the plot (including data that was calculated by geom functions). The data is stored in the basic_built$data[[1]] element. The x, y, and colour variables are all stored in their respective columns. The variable used to define the facets, Year_Group, is stored in the PANEL column and is given by numbers rather than the original category names.\nUnfortunately, PANEL is a forbidden column name for a faceting variable, so we need to start by renaming this column. We also convert this renamed column into a factor, and pass in the Year_Group categories from Chapter 6 as labels. \n\nnew_data &lt;- basic_built$data[[1]] |&gt;\n  rename(Year_Group = PANEL) |&gt;\n  mutate(\n    Year_Group = factor(\n      Year_Group,\n      labels = c(\n        \"2000 - 2004\", \"2005 - 2009\",\n        \"2010 - 2014\", \"2015 - 2019\"\n      )\n    )\n  )\n\nLet’s use geom_point() as a quick sense check that the x- and y- coordinates are the values that we’re expecting, faceting by our Year_Group column. You can see the similarity with Figure 6.6.\n\nggplot(\n  data = new_data,\n  mapping = aes(\n    x = x, y = y\n  )\n) +\n  geom_point() +\n  facet_wrap(~Year_Group, nrow = 1)\n\n\n\n\n\n\nFigure 14.1: Waffle plot of the number of wind turbines commissioned in different time periods.\n\n\n\n\n\n14.2.2 Plotting with ggpattern\n\nNow instead of using geom_point() we want to plot images. We could use ggimage (Yu 2023), or alternatively ggpattern (FC, Davis, and ggplot2 authors 2024). The ggpattern package provides more ggplot2 geom functions which support filled areas with geometric or image patterns. We can use the geom_tile_pattern() function, and specify that we want to use an \"image\" pattern and supply the file name of the Flaticon image to pattern_filename. Setting fill = \"white\" gives a white background to the icons. We can also set theme_void() to remove all of the distracting background elements.\n\nggplot(\n  data = new_data,\n  mapping = aes(\n    x = x, y = y\n  )\n) +\n  geom_tile_pattern(\n    fill = \"white\",\n    pattern = \"image\",\n    pattern_filename = \"images/wind-power.png\"\n  ) +\n  facet_wrap(~Year_Group, nrow = 1) +\n  theme_void()\n\n\n\n\n\n\nFigure 14.2: Pictogram of the number of wind turbines commissioned in different time periods, using the Flaticon.com wind power icon.\n\n\n\n\nIf we wanted to color the icons based on the Region variable, we would need to have multiple copies of the image in different colors. We could combine the information in Chapter 9 about manipulating and re-coloring images, along with the information in Chapter 10 about defining image paths based on data values to do this programmatically.\nOne of the benefits of using ggplot2 is that they are stored as lists, and all of the information about that plot is stored with it - even information you didn’t pass in! This allows you to use ggplot_build() to take a layout created by one ggplot2 extension package and use it in an entirely different extension - meaning you can create custom plots by mixing and matching features of different extensions.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Other tips and tricks</span>"
    ]
  },
  {
    "objectID": "other-tricks.html#sec-code-style",
    "href": "other-tricks.html#sec-code-style",
    "title": "14  Other tips and tricks",
    "section": "\n14.3 Code formatting with lintr and styler\n",
    "text": "14.3 Code formatting with lintr and styler\n\nWriting code that follows a consistent style can make it easier for other people to read, makes collaboration simpler, and can help pick up errors in your code more quickly. In R, the lintr package (Hester et al. 2024) checks for adherence to a specified coding style and identifies possible syntax errors, then reports them so you can take action. \nThe styler package (Müller and Walthert 2023) goes one step further in terms of code styling, and actually styles your code for you. Although you may be a little bit skeptical of packages that overwrite scripts you’ve written, it makes it quick and easy to style code. Creating a keyboard shortcut for the style_active_file() function means you can apply code styling easily, without having to call a function manually or click a specific button (Rennie 2023c). \n\n\n\n\n\n\nTip 14.3: A new formatter for R\n\n\n\nAs an alternative to the styler R package, you may wish to explore Air, an R formatter released in early 2025. Air doesn’t require R itself to run, and is much faster than styler. However, it’s less easy to customize the styling implemented.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Other tips and tricks</span>"
    ]
  },
  {
    "objectID": "other-tricks.html#sec-template-files",
    "href": "other-tricks.html#sec-template-files",
    "title": "14  Other tips and tricks",
    "section": "\n14.4 Template files for TidyTuesday",
    "text": "14.4 Template files for TidyTuesday\nYou may notice that each chapter of this book has followed a similar structure: load packages, read in some data, perform some exploratory analysis, load fonts and colors as variables, write relevant text, create a simple plot, add styling with ggtext, and save a PNG file. This means that for each plot, there’s a lot of overlap in the structure of the .R files and the code they contain.\nIf you visualize data using R on a regular basis, you’ll likely find yourself repeating similar steps. You might even find yourself copying and pasting code from a previous file to your new file. Like many things in the world of programming, if you find yourself copying and pasting the same thing several times, there is almost certainly a better way of doing it. And in this case there is - template files! \nFor each TidyTuesday visualization, an .R script with the following file can be created (Rennie 2023b):\n\ndate_str &lt;- \"2024-04-02\"\n\n# Load packages ----\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(patchwork)\nlibrary(camcorder)\nlibrary(ggtext)\nlibrary(glue)\n\nsource(\"source_caption.R\")\nsource(\"social_caption.R\")\n\n\n# Load data ----\n\ntuesdata &lt;- tidytuesdayR::tt_load(date_str)\n\n\n# Load fonts ----\n\nfont_add_google(\"Roboto\", \"roboto\")\nshowtext_auto()\n\n\n# Define colors and fonts ----\n\nbg_col &lt;- \"\"\ntext_col &lt;- \"\"\nhighlight_col &lt;- \"\"\n\nbody_font &lt;- \"roboto\"\ntitle_font &lt;- \"roboto\"\n\n\n# Data wrangling ----\n\n\n\n# Start recording ----\n\ngg_record(\n  dir = file.path(date_str, \"recording\"),\n  device = \"png\",\n  width = 7,\n  height = 5,\n  units = \"in\",\n  dpi = 300\n)\n\n\n# Define text ----\n\nsocial &lt;- social_caption(\n  bg_color = bg_col,\n  icon_color = highlight_col,\n  font_color = text_col,\n  font_family = body_font\n)\ntitle &lt;- \"\"\nsubtitle &lt;- \"\"\ncaption &lt;- source_caption(\n  source = \"\",\n  sep = \"&lt;br&gt;\",\n  graphic = social\n)\n\n\n# Plot ----\n\n\ntheme(\n  plot.margin = margin(5, 5, 5, 5),\n  plot.background = element_rect(\n    fill = bg_col,\n    color = bg_col\n  ),\n  panel.background = element_rect(\n    fill = bg_col,\n    color = bg_col\n  ),\n  plot.title = element_textbox_simple(\n    color = text_col,\n    hjust = 0.5,\n    halign = 0.5,\n    margin = margin(b = 10, t = 5),\n    lineheight = 0.5,\n    family = title_font\n  ),\n  plot.subtitle = element_textbox_simple(\n    color = text_col,\n    hjust = 0.5,\n    halign = 0.5,\n    margin = margin(b = 10, t = 5),\n    lineheight = 0.5,\n    family = body_font\n  ),\n  plot.caption = element_textbox_simple(\n    color = text_col,\n    hjust = 0.5,\n    halign = 0.5,\n    margin = margin(b = 5, t = 10),\n    lineheight = 0.5,\n    family = body_font\n  )\n)\n\n\n# Save gif ----\n\ngg_playback(\n  name = file.path(date_str, paste0(date_str, \".gif\")),\n  first_image_duration = 4,\n  last_image_duration = 20,\n  frame_duration = .25,\n  background = bg_col\n)\n\nThere are several components of this script that make it useful:\n\nIt’s separated into different sections which can help to break down the process of creating a visualization into smaller, more manageable chunks. In RStudio, the Ctrl+Shift+R keyboard shortcut can be used to add a new section.\nIt defines variables and code snippets that are used repeatedly in different visualizations. For example, defining variables for the colors and fonts, or using the theme elements from ggtext to style the title and subtitle text.\nThere are also some elements of the script that are similar for each plot, but not exactly the same. For example, reading in the data using the tidytuesdayR package or saving the gif created by gcamcorder. Here, the code is changing based on the date associated with the TidyTuesday data. Instead of manually editing the date in the script in each location, a date_str variable is defined at the top of the script - meaning you only need to set the date once.\n\nYou can also create template files for other aspects of your data visualization workflow. For example, creating a README.md file for each visualization.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Other tips and tricks</span>"
    ]
  },
  {
    "objectID": "other-tricks.html#writing-your-own-helper-functions",
    "href": "other-tricks.html#writing-your-own-helper-functions",
    "title": "14  Other tips and tricks",
    "section": "\n14.5 Writing your own helper functions",
    "text": "14.5 Writing your own helper functions\nAs you’ve already seen in Chapter 6 and Chapter 7, creating functions for code you reuse frequently can save time and space. We created the source_caption() and social_caption() functions for adding a caption with data source attribution, and to write plot caption that contained Font Awesome icons. These functions have then been used in almost every subsequent chapter (and therefore also the template file described in the previous section). What other helper functions might be useful? \n\nTo use the Font Awesome icons, you need to load the Font Awesome font files. We did this using sysfonts::font_add() and specifying a path to the font file. You might also want to load other fonts that aren’t normally available on your system or through Google Fonts. You could write a function that loads (multiple) font files that you use often. You could go one step further and place the fonts and your font loading function into an R package.\nFor the template file discussed in the previous section, the date was defined as a variable at the top of the script. Instead, you could create a function that takes the date as an argument. The function could then create your .R script, insert the date where it needs to go, and save the file to the desired location.\nIf you’re creating plots for corporate reports, creating your own ggplot2 theme and color palette functions can save time implementing the same styling and colors for every visualization. It can also make it easier for other people you work with to use the same styling.\n\n\nYou can create helper functions for anything that you do often. If you don’t use Font Awesome icons in your captions, you don’t need to create the social_caption() function. But if, for example, you always save your images in a specific size with a specific background color, create a function that does that. You’ll be amazed at how much time you can save.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Other tips and tricks</span>"
    ]
  },
  {
    "objectID": "other-tricks.html#exercises",
    "href": "other-tricks.html#exercises",
    "title": "14  Other tips and tricks",
    "section": "\n14.6 Exercises",
    "text": "14.6 Exercises\n\nBrowse through the available TidyTuesday datasets at github.com/rfordatascience/tidytuesday, and choose one you find interesting.\nUse the skills and techniques you’ve learned in this book to create your own visualization that tells a story about the data.\n\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Other tips and tricks</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Bibliography",
    "section": "",
    "text": "Anscombe, F. J. 1973. “Graphs in Statistical Analysis.”\nThe American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a\nLanguage. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for\n’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels,\nSymmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image\nProcessing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary\nDimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH\n’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of\nBees: A Global Perspective.” Apidologie 40 (3): 410–16.\nhttps://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools\nfor Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying\nChanges Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT\nDataset.” Working Paper 15319. Working Paper Series. National\nBureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak:\nAnother Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan,\nand Dan Tenenbaum. 2024. remotes: R Package\nInstallation from Remote Repositories, Including ’GitHub’.\nhttps://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’\nPicture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with\nEasy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks,\nand Jessica Hullman. 2021. “The Science of Visual Data\nCommunication: What Works.” Psychological Science in the\nPublic Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024.\nviridis(Lite) - Colorblind-Friendly\nColor Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive.\nhttps://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation:\nColours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical\nData. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R.\nCRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren,\nAlexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record\nYour Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the\nWeekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer:\nComprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily\nWork with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time\nData.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A.\nPowers, L. Shell, et al. 2020. “The Small Home Ranges and Large\nLocal Ecological Impacts of Pet Cats.” Animal\nConservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A\nStatistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap:\nVisualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural\nEarth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats,\nDifferent Graphs: Generating Datasets with Varied Appearance and\nIdentical Statistics Through Simulated Annealing.” In, 1290–94.\nhttps://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home\nRanges and Large Local Ecological Impacts of Pet Cats [United\nKingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R\nfigures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024.\n“Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc\nSampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes\nInspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House\n1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of\nR Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for\nGender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine\nDatabase.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics\nand Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000\nPeople.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R:\nStandardized Support for Spatial Vector Data.”\nThe R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce:\nAccelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of\nPlots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R\nGraphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on\nAGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming\nLanguage Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading\nFonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More\nEasily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for\nStatistical Computing. Vienna, Austria: R Foundation for\nStatistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly\nSocial Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with\nggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.”\nhttps://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R\nWorkflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in\n’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel\nPrize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.”\nGitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part\n1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2\nextension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex\nSticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’,\nStatistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations.\nhttps://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization\nwith r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi:\nAccess the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz\nMarbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L.\nParker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in\nColormap Data Visualizations.” IEEE Transactions on\nVisualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R\nFunctions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with\nr, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel:\nAutomatically Position Non-Overlapping Text Labels with\n’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising\nWhole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data\nPrinciples to Facilitate Missing Data Exploration, Visualization and\nAssessment of Imputations.” Journal of Statistical\nSoftware 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour\nschemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change\nData (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point\nCoordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and\nMarket Information System. 2022. “Honey Bee Colonies.”\nUSDA Economics, Statistics and Market Information System.\nhttps://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference\nSystem Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen.\n2021. “The Role of Titles in Enhancing Data Visualization.”\nEvaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant\nGraphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working\nwith Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent\nWrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy\nD’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019.\n“Welcome to the tidyverse.”\nJournal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023.\nR for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis\nVaughan. 2023. dplyr: A Grammar of Data\nManipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing\nTextured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot:\nStreamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version\n2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data\nfrom Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in\n’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight:\nHighlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H.\nCameron, and Anne D. Yoder. 2014. “Life\nhistory profiles for 27 strepsirrhine primate taxa generated using\ncaptive data from the Duke Lemur Center.” Scientific\nData 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Bibliography"
    ]
  },
  {
    "objectID": "appendix.html",
    "href": "appendix.html",
    "title": "Appendix",
    "section": "",
    "text": "Frequently asked questions (FAQs)",
    "crumbs": [
      "Appendix"
    ]
  },
  {
    "objectID": "appendix.html#frequently-asked-questions-faqs",
    "href": "appendix.html#frequently-asked-questions-faqs",
    "title": "Appendix",
    "section": "",
    "text": "When I run the code in the examples, I get an error message or a different result. How do I fix it?\n\nMake sure you haveve run all of the code in the chapter in order, including loading all packages.\nCheck to see if you’re using a different version of R, or a specific package by looking at the software requirements in the appendix.\n\n\nHow do I stop my plots looking squashed, stretched, or just different when I view them using RStudio vs saving them?\n\nTake a look at Recording gifs with camcorder for a solution to this problem!\n\n\nI’ve completed the exercises at the end of each chapter. Can I check my answers?\n\nThe exercises are purposefully left open-ended, rather than prescriptive questions with defined answers. Since there’s often no single right answer in data visualization, solutions are not provided. You’re encouraged to think about how you would design and implement different solutions, and you’re encouraged to get feedback from others as a way of checking your answers instead.",
    "crumbs": [
      "Appendix"
    ]
  },
  {
    "objectID": "appendix.html#software-requirements",
    "href": "appendix.html#software-requirements",
    "title": "Appendix",
    "section": "Software requirements",
    "text": "Software requirements\nThis book was built using R version 4.5.0. This book is built with Quarto, using version number 1.7.32. All R packages required to build this book can be found in the following table. Note that this table contains all packages required to create the book, not just those required for the examples.\n\n\n\nTable 1: R packages and version numbers\n\n\n\n\nPackage\nVersion\nPackage\nVersion\nPackage\nVersion\n\n\n\nDBI\n1.2.3\nggimage\n0.3.3\npromises\n1.3.2\n\n\nDT\n0.33\nggpattern\n1.1.4\nproxy\n0.4-27\n\n\nGGally\n2.2.1\nggplot2\n3.5.2\nps\n1.9.1\n\n\nKernSmooth\n2.23-26\nggplotify\n0.1.2\npurrr\n1.0.4\n\n\nMASS\n7.3-65\nggrepel\n0.9.6\nquarto\n1.4.4\n\n\nMatrix\n1.7-3\nggstats\n0.9.0\nragg\n1.4.0\n\n\nMetBrewer\n0.2.0\nggtext\n0.1.2\nrappdirs\n0.3.3\n\n\nR.cache\n0.17.0\ngh\n1.4.1\nrcartocolor\n2.1.1\n\n\nR.methodsS3\n1.8.2\ngifski\n1.32.0-2\nreactR\n0.6.1\n\n\nR.oo\n1.27.1\ngitcreds\n0.1.2\nreactable\n0.4.4\n\n\nR.utils\n2.13.0\nglue\n1.8.0\nreadbitmap\n0.1.5\n\n\nR6\n2.6.1\ngridExtra\n2.3\nreadr\n2.1.5\n\n\nRColorBrewer\n1.1-3\ngridGraphics\n0.5-1\nrenv\n1.0.5\n\n\nRcpp\n1.0.14\ngridpattern\n1.3.1\nrex\n1.2.1\n\n\nRcppArmadillo\n14.4.2-1\ngridtext\n0.1.5\nrlang\n1.1.6\n\n\nRcppEigen\n0.3.4.0.2\ngtable\n0.3.6\nrmarkdown\n2.29\n\n\nRttf2pt1\n1.3.12\nhere\n1.0.1\nrnaturalearth\n1.0.1\n\n\naskpass\n1.2.1\nhighr\n0.11\nroxygen2\n7.3.2\n\n\nattachment\n0.4.5\nhms\n1.1.3\nrprojroot\n2.0.4\n\n\nbackports\n1.5.0\nhtmltools\n0.5.8.1\nrstudioapi\n0.17.1\n\n\nbase64enc\n0.1-3\nhtmlwidgets\n1.6.4\nrsvg\n2.6.2\n\n\nbit\n4.6.0\nhttpuv\n1.6.16\nrvest\n1.0.4\n\n\nbit64\n4.6.0-1\nhttr\n1.4.7\ns2\n1.1.8\n\n\nbmp\n0.3\nhttr2\n1.1.2\nsass\n0.4.10\n\n\nbrew\n1.0-10\nigraph\n2.1.4\nscales\n1.4.0\n\n\nbrio\n1.1.5\nimager\n1.0.3\nselectr\n0.4-2\n\n\nbslib\n0.9.0\nimguR\n1.0.3\nsf\n1.0-21\n\n\ncachem\n1.1.0\nimport\n1.3.2\nshiny\n1.10.0\n\n\ncallr\n3.7.6\nini\n0.3.1\nshowtext\n0.9-7\n\n\ncamcorder\n0.1.0\nisoband\n0.2.7\nshowtextdb\n3.0\n\n\nclass\n7.3-23\njpeg\n0.1-11\nsourcetools\n0.1.7-1\n\n\nclassInt\n0.4-11\njquerylib\n0.1.4\nsp\n2.2-0\n\n\ncli\n3.6.5\njsonlite\n2.0.0\nstringi\n1.8.7\n\n\nclipr\n0.8.0\nkableExtra\n1.4.0\nstringr\n1.5.1\n\n\ncodetools\n0.2-20\nknitr\n1.50\nstyler\n1.10.3\n\n\ncolorblindr\n0.1.0\nlabeling\n0.4.3\nsvglite\n2.2.1\n\n\ncolorspace\n2.1-1\nlater\n1.4.2\nsys\n3.4.3\n\n\ncommonmark\n1.9.5\nlattice\n0.22-6\nsysfonts\n0.8.9\n\n\ncowplot\n1.1.3\nlazyeval\n0.2.2\nsystemfonts\n1.2.3\n\n\ncpp11\n0.5.2\nlifecycle\n1.0.4\nterra\n1.8-50\n\n\ncrayon\n1.5.3\nlintr\n3.2.0\ntextshaping\n1.0.1\n\n\ncropcircles\n0.2.4\nlitedown\n0.7\ntibble\n3.2.1\n\n\ncrosstalk\n1.2.1\nlubridate\n1.9.4\ntidyr\n1.3.1\n\n\ncurl\n6.2.2\nmagick\n2.8.6\ntidyselect\n1.2.1\n\n\ndata.table\n1.17.2\nmagrittr\n2.0.3\ntidytuesdayR\n1.2.1\n\n\ndesc\n1.4.3\nmaps\n3.4.2.1\ntiff\n0.1-12\n\n\ndigest\n0.6.37\nmarkdown\n2.0\ntimechange\n0.3.0\n\n\ndownlit\n0.4.4\nmarquee\n1.0.0\ntinytex\n0.57\n\n\ndownloader\n0.4.1\nmemoise\n2.0.1\ntweenr\n2.0.3\n\n\ndplyr\n1.1.4\nmgcv\n1.9-1\ntzdb\n0.5.0\n\n\ne1071\n1.7-16\nmime\n0.13\nunits\n0.8-7\n\n\nevaluate\n1.0.3\nnlme\n3.1-168\nutf8\n1.2.5\n\n\nextrafont\n0.19\nopenssl\n2.3.2\nvctrs\n0.6.5\n\n\nextrafontdb\n1.0\nopenxlsx\n4.2.8\nviridis\n0.6.5\n\n\nfansi\n1.0.6\nowidR\n1.4.2\nviridisLite\n0.4.2\n\n\nfarver\n2.1.2\npander\n0.6.6\nvisdat\n0.6.0\n\n\nfastmap\n1.2.0\npatchwork\n1.3.0\nvroom\n1.6.5\n\n\nfontawesome\n0.5.3\npillar\n1.10.2\nwaffle\n1.0.2\n\n\nforcats\n1.0.0\npkgbuild\n1.4.7\nwithr\n3.0.2\n\n\nformatR\n1.14\npkgconfig\n2.0.3\nwk\n0.9.4\n\n\nfs\n1.6.6\npkgload\n1.4.0\nxfun\n0.52\n\n\nfunspotr\n0.0.4\nplyr\n1.8.9\nxml2\n1.3.8\n\n\ngenerics\n0.1.4\npng\n0.1-8\nxmlparsedata\n1.0.5\n\n\ngeofacet\n0.2.1\npoissoned\n0.1.3\nxtable\n1.8-4\n\n\ngeogrid\n0.1.2\npolyclip\n1.10-7\nyaml\n2.3.10\n\n\nggforce\n0.4.2\nprettyunits\n1.2.0\nyulab.utils\n0.2.0\n\n\nggfun\n0.1.8\nprocessx\n3.8.6\nzip\n2.3.3\n\n\ngghighlight\n0.4.1\nprogress\n1.2.3",
    "crumbs": [
      "Appendix"
    ]
  },
  {
    "objectID": "appendix.html#data",
    "href": "appendix.html#data",
    "title": "Appendix",
    "section": "Data",
    "text": "Data\nAll data sets used in this book, and links to the relevant licenses:\n\n\nChapter 2: Programming Languages Database (PLDB contributors 2022)\n\nSource: pldb.com\n\nLicense: PLDB content is published to the public domain and you can use it freely.\n\n\n\n\n\nChapter 3: Mapping Museums (Mapping Museums 2021)\n\nSource: museweb.dcs.bbk.ac.uk/allmus\n\nLicense: Licensed with Creative Commons Attribution 4.0 International.\n\n\n\n\n\nChapter 4: Honey Bee Colonies (United States Department of Agriculture: Economics, Statistics and Market Information System 2022)\n\nSource: usda.library.cornell.edu/concern/publications/rn301137d\n\nLicense: All publication files are considered government works and licensed with U.S. Public Domain.\n\n\n\n\n\nChapter 5: Historical Cross Country Technology Adoption Dataset (Comin and Hobijn 2009)\n\nSource: www.nber.org/research/data/historical-cross-country-technology-adoption-hccta-dataset\n\nLicense: The authors have made this dataset available for anyone to use.\n\n\n\n\n\nChapter 6: Canadian Wind Turbine Database (Natural Resources Canada 2021)\n\nSource: open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070\n\nLicense: Licensed with Open Government Licence – Canada.\n\n\n\n\n\nChapter 7: The small home ranges and large local ecological impacts of pet cats (McDonald and Cole 2020)\n\nSource: www.datarepository.movebank.org/entities/datapackage/4ef43458-a0c0-4ff0-aed4-64b07cedf11c\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\n\nChapter 8: Nobel Prize Laureates (www.nobelprize.org 2024)\n\nSource: api.nobelprize.org/2.1/laureates\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\n\nChapter 9: Duke Lemur Center (Zehr et al. 2014)\n\nSource: lemur.duke.edu/duke-lemur-center-database\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\n\nChapter 10: tidytuesday GitHub Repository by nrennie (Rennie 2024c)\n\nSource: github.com/nrennie/tidytuesday\n\nLicense: Licensed with Creative Commons Attribution 4.0 International.\n\n\n\n\n\nChapter 11: Medical doctors per 1,000 people, 2019 (Our World in Data 2019)\n\nSource: ourworldindata.org/grapher/physicians-per-1000-people\n\nLicense: Licensed with Creative Commons Attribution 4.0 International.\n\n\n\n\n\nChapter 12: Time Zones (Internet Assigned Numbers Authority 2023)\n\nSource: data.iana.org/time-zones/tz-link.html#tzdb\n\nLicense: This web page is in the public domain.\n\n\n\n\n\nChapter 13: US House Election Results (MIT Election Data and Science Lab 2017)\n\nSource: doi.org/10.7910/DVN/IG0UN2\n\nLicense: Licensed with Creative Commons Zero License.",
    "crumbs": [
      "Appendix"
    ]
  },
  {
    "objectID": "appendix.html#images",
    "href": "appendix.html#images",
    "title": "Appendix",
    "section": "Images",
    "text": "Images\nAll images used in this book (which were not created by the author) and links to the relevant licenses:\n\nImage: Lemur by Jax (@lysrix)\n\nSource: unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k (Jax (@lysrix) 2017)\n\nLicense: Licensed with Unsplash License.\n\n\n\n\nImage: {dplyr} Hex sticker\n\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png (RStudio 2020a)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nImage: {ggplot2} Hex sticker\n\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/gglot2.png (RStudio 2018b)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nImage: {tidyr} Hex sticker\n\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png (RStudio 2020c)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nImage: {readr} Hex sticker\n\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/readr.png (RStudio 2018d)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nImage: {purrr} Hex sticker\n\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png (RStudio 2018c)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nImage: {forcats} Hex sticker\n\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png (RStudio 2018a)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nImage: {tibble} Hex sticker\n\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png (RStudio 2018e)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nImage: {stringr} Hex sticker\n\nSource: github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png (RStudio 2020b)\n\nLicense: Licensed with Creative Commons Zero License.\n\n\n\n\nImage: Wind Power Flaticon\n\nSource: www.flaticon.com/free-icon/wind-power_5670189 (Flaticon.com 2024)\n\nLicense: Licensed with Flaticon License: Free for personal and commercial purpose with attribution.",
    "crumbs": [
      "Appendix"
    ]
  },
  {
    "objectID": "appendix.html#visualization-gallery",
    "href": "appendix.html#visualization-gallery",
    "title": "Appendix",
    "section": "Visualization gallery",
    "text": "Visualization gallery\nChapter 2  Programming languages: dumbbell charts with ggplot2:\n\n\n\n\nChapter 3  UK museums: highlighting line charts with gghighlight:\n\n\n\n\nChapter 4  Bee colony losses: visualizing quantities with Poisson disk sampling:\n\n\n\n\nChapter 5  Technology adoption: making gauge charts with ggforce:\n\n\n\n\nChapter 6  Canadian wind turbines: waffle plots and pictograms:\n\n\n\n\nChapter 7  Cats: data-driven annotations with ggtext:\n\n\n\n\nChapter 8  Nobel Prize laureates: positioning text and parameterizing plots:\n\n\n\n\nChapter 9  Lemurs: manipulating images in R:\n\n\n\n\nChapter 10  R packages: using images for custom facet labels:\n Chapter 11  Doctors across the world: making maps with ggplot2:\n\n\n\n\nChapter 12  Time zones: spatial data and mapping with sf:\n Chapter 13  US House elections: geography on a grid with geofacet:",
    "crumbs": [
      "Appendix"
    ]
  },
  {
    "objectID": "appendix.html#book-cover",
    "href": "appendix.html#book-cover",
    "title": "Appendix",
    "section": "Book cover",
    "text": "Book cover\nThe (work-in-progress) cover of this book was also created with ggplot2. The code can be viewed below.\n\nCode# Packages ----------------------------------------------------------------\n\nlibrary(ggplot2)\nlibrary(showtext)\nlibrary(cropcircles)\nlibrary(ggimage)\n\n\n# Fonts -------------------------------------------------------------------\n\nfont_add_google(\"Source Sans 3\", \"Source\")\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n# Functions ---------------------------------------------------------------\n\nis_even &lt;- function(x) {\n  return((x %% 2) == 0)\n}\n\nmake_hex_coords &lt;- function(x0, y0, r) {\n  angles &lt;- seq(pi / 6, 2 * pi + pi / 6, length.out = 7)\n  hexagon_coords &lt;- function(xc, yc, rad, id) {\n    x &lt;- xc + rad * cos(angles)\n    y &lt;- yc + rad * sin(angles)\n    data.frame(x = x, y = y, grp = id, x_grp = xc, y_grp = yc)\n  }\n  result &lt;- do.call(\n    rbind,\n    mapply(hexagon_coords, x0, y0, r, seq_along(x0),\n      SIMPLIFY = FALSE\n    )\n  )\n\n  return(result)\n}\n\n\n# Parameters --------------------------------------------------------------\n\nn_x &lt;- 5\nn_y &lt;- 8\n\ncol_palette &lt;- c(\"#FBEBFF\", \"#E999FF\", \"#9300B8\", \"#400052\")\nbg_col &lt;- \"#200029\"\nbody_font &lt;- \"Source\"\n\npadding &lt;- 20\nwidth &lt;- 5\n\n\n# Generate data -----------------------------------------------------------\n\ninputs &lt;- expand.grid(\n  x = seq(1, length.out = n_x, by = 1),\n  y = seq(1, length.out = n_y, by = 1)\n) |&gt;\n  tibble::as_tibble() |&gt;\n  dplyr::mutate(\n    x = dplyr::if_else(\n      is_even(y),\n      x + 0.5,\n      x\n    )\n  )\ncol_df &lt;- data.frame(\n  col_grp = seq(1, n_x + 0.5, by = 0.5),\n  color = rev(grDevices::colorRampPalette(col_palette)(n_x * 2)),\n  alpha = seq(0.2, 0.6, length.out = n_x * 2)\n)\noutput &lt;- make_hex_coords(\n  x0 = inputs$x,\n  y0 = inputs$y,\n  r = rep(0.5, n_x * n_y)\n) |&gt;\n  tibble::as_tibble() |&gt;\n  dplyr::left_join(col_df, by = c(\"x_grp\" = \"col_grp\"))\n\n\n# Subplots ----------------------------------------------------------------\n\ng1 &lt;- ggplot() +\n  geom_col(\n    data = data.frame(\n      x = LETTERS[1:3],\n      y = c(2, 5, 3)\n    ),\n    mapping = aes(x = x, y = y),\n    fill = bg_col\n  ) +\n  theme_void() +\n  theme(\n    plot.background = element_rect(\n      fill = \"white\", color = \"white\"\n    ),\n    axis.line.x.bottom = element_line(color = bg_col, linewidth = 1),\n    axis.line.y.left = element_line(color = bg_col, linewidth = 1),\n    plot.margin = margin(30, 30, 30, 30),\n    aspect.ratio = 1\n  )\ntmp_a &lt;- tempfile()\nggsave(tmp_a, g1,\n       device = \"png\",\n       height = 400, width = 400,\n       dpi = 300, bg = bg_col,\n       units = \"px\"\n)\nimg_cropped_a &lt;- crop_hex(tmp_a, bg_fill = \"white\")\n\nset.seed(1234)\nx &lt;- runif(15)\ng2 &lt;- ggplot() +\n  geom_point(\n    data = data.frame(\n      x = x,\n      y = x + runif(15, 0, 0.1)\n    ),\n    mapping = aes(x = x, y = y),\n    fill = bg_col\n  ) +\n  scale_x_continuous(limits = c(0, 1)) +\n  scale_y_continuous(limits = c(0, 1)) +\n  theme_void() +\n  theme(\n    plot.background = element_rect(\n      fill = \"white\", color = \"white\"\n    ),\n    axis.line.x.bottom = element_line(color = bg_col, linewidth = 1),\n    axis.line.y.left = element_line(color = bg_col, linewidth = 1),\n    plot.margin = margin(30, 30, 30, 30),\n    aspect.ratio = 1\n  )\ntmp_b &lt;- tempfile()\nggsave(tmp_b, g2,\n       device = \"png\",\n       height = 400, width = 400,\n       dpi = 300, bg = bg_col,\n       units = \"px\"\n)\nimg_cropped_b &lt;- crop_hex(tmp_b, bg_fill = \"white\")\n\ng3 &lt;- ggplot() +\n  geom_line(\n    data = data.frame(\n      x = 1:10,\n      y = cumsum(runif(10))\n    ),\n    mapping = aes(x = x, y = y),\n    color = bg_col\n  ) +\n  geom_line(\n    data = data.frame(\n      x = 1:10,\n      y = cumsum(runif(10, 0, 0.5))\n    ),\n    mapping = aes(x = x, y = y),\n    color = col_palette[3]\n  ) +\n  theme_void() +\n  theme(\n    plot.background = element_rect(\n      fill = \"white\", color = \"white\"\n    ),\n    axis.line.x.bottom = element_line(color = bg_col, linewidth = 1),\n    axis.line.y.left = element_line(color = bg_col, linewidth = 1),\n    plot.margin = margin(30, 30, 30, 30),\n    aspect.ratio = 1\n  )\ntmp_c &lt;- tempfile()\nggsave(tmp_c, g3,\n       device = \"png\",\n       height = 400, width = 400,\n       dpi = 300, bg = bg_col,\n       units = \"px\"\n)\nimg_cropped_c &lt;- crop_hex(tmp_c, bg_fill = \"white\")\n\n\n# Plot --------------------------------------------------------------------\n\nggplot() +\n  geom_polygon(\n    data = output,\n    mapping = aes(\n      x = x, y = y, group = grp,\n      color = alpha(color, alpha)\n    ),\n    fill = \"transparent\",\n    linewidth = 0.4\n  ) +\n  geom_image(\n    data = output[1,],\n    aes(\n      x = 4.5,\n      y = 4,\n      image = img_cropped_a\n    ),\n    size = 0.1\n  ) +\n  geom_image(\n    data = output[1,],\n    aes(\n      x = 2,\n      y = 5,\n      image = img_cropped_b\n    ),\n    size = 0.1\n  ) +\n  geom_image(\n    data = output[1,],\n    aes(\n      x = 3.5,\n      y = 6,\n      image = img_cropped_c\n    ),\n    size = 0.1\n  ) +\n  annotate(\n    \"text\",\n    x = 1.25, y = 2.4,\n    label = \"The Art of Visualization\\nwith ggplot2\",\n    family = body_font,\n    color = \"white\",\n    hjust = 0,\n    vjust = 1,\n    size = 22,\n    fontface = \"bold\",\n    size.unit = \"pt\"\n  ) +\n  annotate(\n    \"text\",\n    x = 1.25, y = 6.9,\n    label = \"Nicola Rennie\",\n    family = body_font,\n    color = \"white\",\n    hjust = 0,\n    vjust = 1,\n    size = 18,\n    fontface = \"bold\",\n    size.unit = \"pt\"\n  ) +\n  scale_color_identity() +\n  scale_y_reverse() +\n  coord_fixed(expand = FALSE, clip = \"off\") +\n  theme_void() +\n  theme(\n    plot.background = element_rect(fill = bg_col, color = bg_col),\n    plot.margin = margin(-padding, -padding, -padding, -padding)\n  )\n\n\n# Save --------------------------------------------------------------------\n\nif (interactive()) {\n  ggsave(\"images/cover.png\",\n         height = 1.5*width, width = width,\n         dpi = 300, bg = bg_col\n  )\n}\n\n\n\n\n\n\n\n\n\n\n\nAnscombe, F. J. 1973. “Graphs in Statistical Analysis.” The American Statistician 27 (1): 17–21. https://doi.org/10.1080/00031305.1973.10478966.\n\n\nAphalo, Pedro J. 2024. Learn R: As a Language. Second Edition. CRC Press. https://www.learnr-book.info/.\n\n\nAuguie, Baptiste. 2019. egg: Extensions for ’ggplot2’: Custom Geom, Custom Themes, Plot Alignment, Labelled Panels, Symmetric Scales, and Fixed Panel Size. https://CRAN.R-project.org/package=egg.\n\n\nBarthelme, Simon. 2024. imager: Image Processing Library Based on ’CImg’. https://CRAN.R-project.org/package=imager.\n\n\nBridson, Robert. 2007. “Fast Poisson Disk Sampling in Arbitrary Dimensions.” In ACM SIGGRAPH 2007 Sketches. SIGGRAPH ’07. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1278780.1278807.\n\n\nBrown, Mark J.F., and Paxton, Robert J. 2009. “The Conservation of Bees: A Global Perspective.” Apidologie 40 (3): 410–16. https://doi.org/10.1051/apido/2009019.\n\n\nCameron, Allan, and Teun van den Brand. 2024. geomtextpath: Curved Text in ’ggplot2’. https://CRAN.R-project.org/package=geomtextpath.\n\n\nCARTO. 2016. ’CARTOColors’ Palettes. https://carto.com/carto-colors/.\n\n\nChang, Winston. 2023. extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCheung, Foo. 2021. dumbbell: Displaying Changes Between Two Points Using Dumbbell Plots. https://CRAN.R-project.org/package=dumbbell.\n\n\nComin, D. A., and B. Hobijn. 2009. “The CHAT Dataset.” Working Paper 15319. Working Paper Series. National Bureau of Economic Research. https://doi.org/10.3386/w15319.\n\n\nCsárdi, Gábor, and Jim Hester. 2024. pak: Another Approach to Package Installation. https://CRAN.R-project.org/package=pak.\n\n\nCsárdi, Gábor, Jim Hester, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2024. remotes: R Package Installation from Remote Repositories, Including ’GitHub’. https://CRAN.R-project.org/package=remotes.\n\n\nDomin, Iaroslav. 2024. ggview: ’ggplot2’ Picture Previewer. https://CRAN.R-project.org/package=ggview.\n\n\nEngler, Jan Broder. 2024. “Tidyplots Empowers Life Scientists with Easy Code-Based Data Visualization.” bioRxiv. https://doi.org/10.1101/2024.11.08.621836.\n\n\nFC, Mike, Trevor L. Davis, and ggplot2 authors. 2024. ggpattern: ’ggplot2’ Pattern Geoms. https://CRAN.R-project.org/package=ggpattern.\n\n\nFlaticon.com. 2024. “Wind Power Flaticon.” https://www.flaticon.com/free-icon/wind-power_5670189.\n\n\nFont Awesome. 2024. “Font Awesome 6.” https://fontawesome.com/.\n\n\nFranconeri, Steven L., Lace M. Padilla, Priti Shah, Jeffrey M. Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. https://doi.org/10.1177/15291006211051956.\n\n\nGarnier, Simon, Ross, Noam, Rudis, Robert, Camargo, et al. 2024. viridis(Lite) - Colorblind-Friendly Color Maps for R. https://doi.org/10.5281/zenodo.4679423.\n\n\nGohel, David, and Panagiotis Skintzos. 2024. ggiraph: Make ’ggplot2’ Graphics Interactive. https://CRAN.R-project.org/package=ggiraph.\n\n\nGovernment Analysis Function. 2021. “Data Visualisation: Colours.”\n\n\nHafen, Ryan. 2023. geofacet: ’ggplot2’ Faceting Utilities for Geographical Data. https://CRAN.R-project.org/package=geofacet.\n\n\nHarmon, Jon. 2024. Web APIs with R. CRC Press. https://wapir.io/.\n\n\nHester, Jim, Florent Angly, Russ Hyde, Michael Chirico, Kun Ren, Alexander Rosenstock, and Indrajeet Patil. 2024. lintr: A ’Linter’ for R Code. https://CRAN.R-project.org/package=lintr.\n\n\nHester, Jim, and Jennifer Bryan. 2024. glue: Interpreted String Literals. https://glue.tidyverse.org/.\n\n\nHughes, Ellis. 2022a. camcorder: Record Your Plot History. https://CRAN.R-project.org/package=camcorder.\n\n\n———. 2022b. tidytuesdayR: Access the Weekly ’TidyTuesday’ Project Dataset. https://CRAN.R-project.org/package=tidytuesdayR.\n\n\nHvitfeldt, Emil. 2021. paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nIannone, Richard. 2024. fontawesome: Easily Work with ’Font Awesome’ Icons. https://CRAN.R-project.org/package=fontawesome.\n\n\nInternet Assigned Numbers Authority. 2023. “The tz Database: Time Zone and Daylight Saving Time Data.” Internet Assigned Numbers Authority. https://data.iana.org/time-zones/tz-link.html.\n\n\nJax (@lysrix). 2017. “Lemur.” https://unsplash.com/photos/red-and-white-rodent-h5xrh3CNT-k.\n\n\nKays, R., R. R. Dunn, A. W. Parsons, B. Mcdonald, T. Perkins, S. A. Powers, L. Shell, et al. 2020. “The Small Home Ranges and Large Local Ecological Impacts of Pet Cats.” Animal Conservation 23 (5): 516–23. https://doi.org/https://doi.org/10.1111/acv.12563.\n\n\nKeyes, David. 2024. R for the Rest of Us: A Statistics-Free Introduction. No Starch Press. https://book.rfortherestofus.com/.\n\n\nLucchesi, Lydia, and Petra Kuhnert. 2020. Vizumap: Visualizing Uncertainty in Spatial Data. https://github.com/lydialucchesi/Vizumap.\n\n\nMapping Museums. 2021. “Mapping Museums Data.” www.mappingmuseums.org.\n\n\nMassicotte, Philippe, and Andy South. 2023. rnaturalearth: World Map Data from Natural Earth. https://docs.ropensci.org/rnaturalearth/.\n\n\nMatejka, Justin, and George Fitzmaurice. 2017. “Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics Through Simulated Annealing.” In, 1290–94. https://doi.org/10.1145/3025453.3025912.\n\n\nMcDonald, J. L., and H. Cole. 2020. “Data from: The Small Home Ranges and Large Local Ecological Impacts of Pet Cats [United Kingdom].” Movebank data repository. https://doi.org/doi:10.5441/001/1.pf315732.\n\n\nMcWhite, Claire D., and Claus O. Wilke. 2024. colorblindr: Simulate colorblindness in R figures. https://github.com/clauswilke/colorblindr.\n\n\nMid-Atlantic Apiculture Research and Extension Consortium. 2024. “Seasonal Cycles of Activities in Colonies.”\n\n\nmikefc. 2024. poissoned: Tileable Poisson Disc Sampling. https://github.com/coolbutuseless/poissoned.\n\n\nMills, Blake Robert. 2022. MetBrewer: Color Palettes Inspired by Works at the Metropolitan Museum of Art. https://CRAN.R-project.org/package=MetBrewer.\n\n\nMIT Election Data and Science Lab. 2017. “U.S. House 1976–2022.” Harvard Dataverse. https://doi.org/10.7910/DVN/IG0UN2.\n\n\nMüller, Kirill, and Lorenz Walthert. 2023. styler: Non-Invasive Pretty Printing of R Code. https://CRAN.R-project.org/package=styler.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nMuth, Lisa. 2018. “An Alternative to Pink & Blue: Colors for Gender Data.”\n\n\nNatural Resources Canada. 2021. “Canadian Wind Turbine Database.” Natural Resources Canada (Government of Canada). https://open.canada.ca/data/en/dataset/79fdad93-9025-49ad-ba16-c26d718cc070.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://jakubnowosad.com/rcartocolor/.\n\n\nOoms, Jeroen. 2024. magick: Advanced Graphics and Image-Processing in R. https://CRAN.R-project.org/package=magick.\n\n\nOur World in Data. 2019. “Medical Doctors Per 1,000 People.” https://ourworldindata.org/grapher/physicians-per-1000-people.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\nPedersen, Thomas Lin. 2022. ggforce: Accelerating ’ggplot2’. https://CRAN.R-project.org/package=ggforce.\n\n\n———. 2024. patchwork: The Composer of Plots. https://CRAN.R-project.org/package=patchwork.\n\n\n———. 2025. “Fonts in R.” https://www.tidyverse.org/blog/2025/05/fonts-in-r/.\n\n\nPedersen, Thomas Lin, and Martin Mitáš. 2024. marquee: Markdown Parser and Renderer for R Graphics. https://CRAN.R-project.org/package=marquee.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2024. systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2023. ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPLDB contributors. 2022. “PLDB: A Programming Language Database.” PLDB.\n\n\nQiu, Yixuan. 2022. sysfonts: Loading Fonts into R. https://CRAN.R-project.org/package=sysfonts.\n\n\n———. 2023. showtext: Using Fonts More Easily in R Graphs. https://CRAN.R-project.org/package=showtext.\n\n\nR Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nR4DS Online Learning Community. 2023. “Tidy Tuesday: A Weekly Social Data Project.” https://github.com/rfordatascience/tidytuesday.\n\n\nRennie, Nicola. 2023a. “Adding Social Media Icons to Charts with ggplot2.” https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n\n———. 2023b. “Creating Template Files with R.” https://nrennie.rbind.io/blog/script-templates-r/.\n\n\n———. 2023c. “Four Ways to Streamline Your R Workflows.” https://nrennie.rbind.io/blog/four-ways-streamline-r-workflows/.\n\n\n———. 2024a. ggtextcircle: Circular Text in ’ggplot2’. https://github.com/nrennie/ggtextcircle.\n\n\n———. 2024b. nobel: Access data from the Nobel Prize API via R. https://github.com/nrennie/nobel.\n\n\n———. 2024c. “tidytuesday.” GitHub Repository. GitHub. https://github.com/nrennie/tidytuesday.\n\n\nRennie, Nicola, and Andreas Krause. 2024. “Presenting data the Significance way - Part 1.” Significance 21 (3): 36–39. https://doi.org/10.1093/jrssig/qmae045.\n\n\nReynolds, Gina. 2025. “Everyday ggplot2 extension.” https://evamaerey.github.io/everyday_ggplot2_extension/.\n\n\nRStudio. 2018a. “forcats Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/forcats.png.\n\n\n———. 2018b. “ggplot2 Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/ggplot2.png.\n\n\n———. 2018c. “purrr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/purrr.png.\n\n\n———. 2018d. “readr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png.\n\n\n———. 2018e. “tibble Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png.\n\n\n———. 2020a. “dplyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/dplyr.png.\n\n\n———. 2020b. “stringr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png.\n\n\n———. 2020c. “tidyr Hex Sticker.” https://github.com/rstudio/hex-stickers/blob/main/PNG/tidyr.png.\n\n\nRudis, Bob, Ben Bolker, and Jan Schulz. 2017. ggalt: Extra Coordinate Systems, ’Geoms’, Statistical Transformations, Scales and Fonts for ’Ggplot2’. https://CRAN.R-project.org/package=ggalt.\n\n\nRudis, Bob, and Dave Gandy. 2023. waffle: Create Waffle Chart Visualizations. https://CRAN.R-project.org/package=waffle.\n\n\nSarkar, Deepayan. 2008. Lattice: Multivariate Data Visualization with r. New York: Springer. http://lmdvr.r-forge.r-project.org.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. openxlsx: Read, Write and Edit xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nScheuch, Christoph. 2025. owidapi: Access the Our World in Data Chart API. https://doi.org/10.32614/CRAN.package.owidapi.\n\n\nSchloerke, Barret, Di Cook, Joseph Larmarange, Francois Briatte, Moritz Marbach, Edwin Thoen, Amos Elberg, and Jason Crowley. 2024. GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally.\n\n\nSchloss, Karen B., Connor C. Gramazio, Allison T. Silverman, Madeline L. Parker, and Audrey S. Wang. 2019. “Mapping Color to Meaning in Colormap Data Visualizations.” IEEE Transactions on Visualization and Computer Graphics 25 (1): 810–19. https://doi.org/10.1109/TVCG.2018.2865147.\n\n\nShalloway, Bryan. 2023. funspotr: Spot R Functions & Packages. https://CRAN.R-project.org/package=funspotr.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSlowikowski, Kamil. 2024. ggrepel: Automatically Position Non-Overlapping Text Labels with ’ggplot2’. https://CRAN.R-project.org/package=ggrepel.\n\n\nTierney, Nicholas. 2017. “visdat: Visualising Whole Data Frames.” JOSS 2 (16): 355. https://doi.org/10.21105/joss.00355.\n\n\nTierney, Nicholas, and Dianne Cook. 2023. “Expanding Tidy Data Principles to Facilitate Missing Data Exploration, Visualization and Assessment of Imputations.” Journal of Statistical Software 105 (7): 1–31. https://doi.org/10.18637/jss.v105.i07.\n\n\nTol, Paul. 2021. “Paul Tol’s Notes: Colour schemes and templates.” https://personal.sron.nl/~pault/.\n\n\nUnited States Census Bureau. 2021a. “Historical Population Change Data (1910-2020).”\n\n\n———. 2021b. “State Area Measurements and Internal Point Coordinates.”\n\n\nUnited States Department of Agriculture: Economics, Statistics and Market Information System. 2022. “Honey Bee Colonies.” USDA Economics, Statistics and Market Information System. https://usda.library.cornell.edu/concern/publications/rn301137d.\n\n\nWalker, Kyle. 2022. Crsuggest: Obtain Suggested Coordinate Reference System Information for Spatial Data. https://CRAN.R-project.org/package=crsuggest.\n\n\nWanzer, Dana Linnell, Tarek Azzam, Natalie D. Jones, and Darrel Skousen. 2021. “The Role of Titles in Enhancing Data Visualization.” Evaluation and Program Planning 84: 101896. https://doi.org/https://doi.org/10.1016/j.evalprogplan.2020.101896.\n\n\nWickham, Hadley. 2016. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2023a. forcats: Tools for Working with Categorical Variables (Factors). https://doi.org/10.32614/CRAN.package.forcats.\n\n\n———. 2023b. stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. Second Edition. O-Reilly. https://r4ds.hadley.nz.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2024. readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Thomas Lin Pedersen, and Dana Seidel. 2023. scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2024. tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus. 2022. ggtextures: Drawing Textured Rectangles and Bars with grid and ggplot2. https://github.com/clauswilke/ggtextures.\n\n\nWilke, Claus O. 2024. cowplot: Streamlined Plot Theme and Plot Annotations for ’ggplot2’. https://wilkelab.org/cowplot/.\n\n\nWilke, Claus O., and Brenton M. Wiernik. 2022. ggtext: Improved Text Rendering Support for ’ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\nwww.nobelprize.org. 2024. “Nobel Prize API Version 2.1.” https://api.nobelprize.org/2.1/laureates.\n\n\nYork, Piers. 2023. owidR: Import Data from Our World in Data. &lt;https://github.com/piersyork/owidR&gt;.\n\n\nYu, Guangchuang. 2023. ggimage: Use Image in ’ggplot2’. https://CRAN.R-project.org/package=ggimage.\n\n\nYutani, Hiroaki. 2023. gghighlight: Highlight Lines and Points in ’ggplot2’. https://CRAN.R-project.org/package=gghighlight.\n\n\nZehr, Sarah M., Richard G. Roach, David Haring, Julie Taylor, Freda H. Cameron, and Anne D. Yoder. 2014. “Life history profiles for 27 strepsirrhine primate taxa generated using captive data from the Duke Lemur Center.” Scientific Data 1 (1). https://doi.org/10.1038/sdata.2014.19.",
    "crumbs": [
      "Appendix"
    ]
  }
]