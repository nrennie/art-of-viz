---
fig-width: 5
fig-asp: 0.67
fig-align: center
fig-dpi: 300
filters:
  - line-highlight
execute: 
  freeze: auto
---

# Other tips and tricks {#sec-other}

There are many functions within {ggplot2}, and many more within the wider community of extension packages, that the chapters in this book can't cover. Some of those packages are used to add different geometries, a few are used behind the scenes to help streamline workflows, and a few are more generally useful R packages.

## {camcorder} for recording gifs {#sec-camcorder}

{camcorder} [@camcorder] is an R package to track and automatically save graphics generated with {ggplot2}. \index{camcorder} \index{camcorder!gg\_record}

```{r}
#| eval: false
library(camcorder)
gg_record(
  dir = "recording",
  device = "png",
  width = 6,
  height = 4,
  units = "in",
  dpi = 300
)
```

If you're reading the online version of this book, you will have seen several examples of these gifs at the end of chapters. \index{camcorder!gg\_playback}

```{r}
#| eval: false
gg_playback(
  name = "data-viz.gif",
  first_image_duration = 4,
  last_image_duration = 20,
  frame_duration = .25,
  background = bg_col
)
```

## Code formatting with {lintr} and {styler} {#sec-code-style}

Writing code that follows a consistent style can make it easier for other people to read, makes collaboration simpler, and can help pick up code errors in your code more quickly. In R, the {lintr} package [@lintr] checks for adherence to a specified coding style and identifies possible syntax errors, then reports them to you so you can take action. I’ve been using {lintr} for a while and it’s definitely helped me to write better quality code - you can also set up GitHub Actions to run linting checks automatically. \index{lintr}

This year, I also started using the {styler} package [@styler]. {styler} goes one step further in terms of code styling, and actually styles your code for you. I used to be a little bit sceptical of packages that overwrite scripts I’ve written, but I’ve quickly grown to love how quick and easy it makes it to style code.  \index{styler}

Creating a keyboard shortcut for the style_active_file() function has been one of the simplest changes I’ve made. It means I can apply the styling easily (without having to call a function manually or click a specific button) as I’m still developing the code rather than waiting until the end to tidy up the code! [@streamline] \index{styler!style\_active\_file}

### Template files for #TidyTuesday {#sec-template-files}

You may notice that each chapter of this book has followed a similar structure: load packages, read in some data, perform some exploratory analysis, load fonts and colors as variables, write relevant text, create a simple plot, add styling with {ggtext}, and save a png file. This means that for each plot, there's a lot of overlap in the structure of the .R files and the code they contain. 

If you visualise data using R on a regular basis, you'll likely find yourself repeating similar steps. You might even find yourself copying and pasting code from a previous file to your new file.

```{r}
#| label: template-files
#| eval: false

# Load packages ----

library(tidyverse)
library(showtext)
library(patchwork)
library(camcorder)
library(ggtext)
library(glue)


# Load data ----

tuesdata <- tidytuesdayR::tt_load(date_chr)


# Load fonts ----

font_add_google("Roboto", "roboto")
showtext_auto()


# Define colours and fonts ----

bg_col <- ""
text_col <- ""
highlight_col <- ""

body_font <- "roboto"
title_font <- "roboto"


# Data wrangling ----



# Start recording ----

gg_record(
  dir = file.path(yr, date_chr, "recording"),
  device = "png",
  width = 7,
  height = 5,
  units = "in",
  dpi = 300
)


# Define text ----

social <- social_caption(
  bg_colour = bg_col,
  icon_colour = highlight_col,
  font_colour = text_col,
  font_family = body_font
)
title <- ""
st <- ""
cap <- paste0(
  "**Data**: <br>**Graphic**:", social
)


# Plot ----


theme(
  plot.margin = margin(5, 5, 5, 5),
  plot.background = element_rect(fill = bg_col, colour = bg_col),
  panel.background = element_rect(fill = bg_col, colour = bg_col),
  plot.title = element_textbox_simple(
    colour = text_col,
    hjust = 0.5,
    halign = 0.5,
    margin = margin(b = 10, t = 5),
    lineheight = 0.5,
    family = title_font
  ),
  plot.subtitle = element_textbox_simple(
    colour = text_col,
    hjust = 0.5,
    halign = 0.5,
    margin = margin(b = 10, t = 5),
    lineheight = 0.5,
    family = body_font
  ),
  plot.caption = element_textbox_simple(
    colour = text_col,
    hjust = 0.5,
    halign = 0.5,
    margin = margin(b = 5, t = 10),
    lineheight = 0.5,
    family = body_font
  )
)


# Save gif ----

gg_playback(
  name = file.path(yr, date_chr, paste0(date_strip, ".gif")),
  first_image_duration = 4,
  last_image_duration = 20,
  frame_duration = .25,
  background = bg_col
)
```

@template_files

\index{templates}


## Writing your own helper functions

As already ... in Chapter 6 (ref) ... function `social_caption()` for adding, which was used in every subsequent chapter. 

- fnction for loading font awesome
- function for writing template file

I fyou don't use this, don't use it. But if e.g. always saveyour images in a specific size with a specific bg col, create a function that does that. You'll be amazed at how much time syou can save.





